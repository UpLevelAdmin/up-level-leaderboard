// ‚úÖ ================= GLOBAL VARIABLES & INITIALIZATION =================
const SPREADSHEET_ID = "1bIcGX84_gmxUtDpjkQvxaXPjDRG00yBv7bibQoaciYI";
const ss = SpreadsheetApp.openById(SPREADSHEET_ID);

// ‚úÖ ===================== GOOGLE SHEETS UI & TRIGGERS =====================

function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu("‚¨ÜÔ∏è Up Level Guild")
    .addItem("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "showPartySummary")
    .addItem("‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ (‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£)", "createParty")
    .addItem("‚ûï ‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "addMemberToParty")
    .addItem("‚ùå ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "removeFromParty")
    .addItem("üîÅ ‡∏¢‡πâ‡∏≤‡∏¢‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "moveToAnotherParty")
    .addItem("üí• ‡∏¢‡∏∏‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "disbandParty")
    .addSeparator()
    .addItem("üì• ‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (1 ‡∏Ñ‡∏ô)", "addExpFromActivity")
    .addItem("üì• ‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô)", "addExpFromActivityBulk")
    .addItem("üü¢ ‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡πÅ‡∏ö‡∏ö Manual", "manualAddExp")
    .addItem("üß© ‡πÄ‡∏û‡∏¥‡πà‡∏° Party Point ‡πÅ‡∏ö‡∏ö Manual", "manualAddPartyPoint")
    .addItem("‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏ß‡∏™ (‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå)", "approveQuestByPhone")
    .addItem("‚Ü©Ô∏è ‡∏¢‡πâ‡∏≠‡∏ô EXP ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (1 ‡∏Ñ‡∏ô)", "undoLastExpSingle")
    .addItem("‚Ü©Ô∏è ‡∏¢‡πâ‡∏≠‡∏ô EXP ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô)", "undoLastExpBulk")
    .addItem("‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤", "approveChallenge")
    .addItem("ÔøΩÔøΩ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡πâ‡∏≤‡πÅ‡∏Ç‡πà‡∏á", "recordChallengeResult")
    .addSeparator()
    .addItem("üéØ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank", "updateRanks")
    .addItem("ÔøΩÔøΩ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Leaderboard", "updateLeaderboard")
    .addItem("üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥", "clearDuplicateEntriesDebug")
    .addItem("‚ùå ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", "removeMember")
    .addItem("üîë ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà", "addAdminEmail")
    .addToUi();
}

function handleFormSubmit(e) {
  const lock = LockService.getScriptLock();
  if (!lock.tryLock(15000)) {
    console.log("Server is busy, submission for " + e.namedValues['‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£'] + " will be processed later if needed, but the row is already in the sheet.");
    return;
  }

  try {
    const dbSheet = ss.getSheetByName("Member Database");
    const newRowRange = e.range;
    const newRowIndex = newRowRange.getRow();
    
    const codename = e.namedValues['Codename'][0].trim();
    const phone = normalizePhone(e.namedValues['‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£'][0].trim());
    const rank = e.namedValues['Rank'][0].trim();
    const isPremium = e.namedValues['Premium?'][0] === 'Yes';
    const referrer = e.namedValues['‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ú‡∏π‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)'] ? normalizePhone(e.namedValues['‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ú‡∏π‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)'][0].trim()) : "";

    const dbData = dbSheet.getDataRange().getValues();
    let originalRowIndex = -1;

    for (let i = 1; i < dbData.length; i++) {
      if (i + 1 === newRowIndex) continue;
      
      if (normalizePhone(dbData[i][3]) === phone) {
        originalRowIndex = i + 1;
        break;
      }
    }

    if (originalRowIndex !== -1) {
      dbSheet.getRange(originalRowIndex, 1).setValue(new Date());
      dbSheet.getRange(originalRowIndex, 2).setValue(codename);
      dbSheet.getRange(originalRowIndex, 5).setValue(rank);
      dbSheet.deleteRow(newRowIndex);
      updateDashboardAndLeaderboardForExistingUser(phone, codename, rank);
    } else {
      const initialExp = isPremium ? 2 : 1;
      dbSheet.getRange(newRowIndex, 3).setValue("Member");
      dbSheet.getRange(newRowIndex, 6).setValue(initialExp);
      dbSheet.getRange(newRowIndex, 7).setValue(isPremium);
      dbSheet.getRange(newRowIndex, 8).setValue(referrer);
      
      const dashSheet = ss.getSheetByName("Member Dashboard");
      dashSheet.appendRow([new Date(), phone, codename, rank, initialExp, ""]);

      const lbSheet = ss.getSheetByName("Leaderboard");
      lbSheet.appendRow([new Date(), phone, codename, rank, initialExp, ""]);

      logExp(phone, "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", initialExp);

      if (isPremium && referrer) {
        if (getPhoneByCodename(getCodenameByPhone(referrer))) {
          logExp(referrer, "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (Premium)", 2);
        }
      }
    }
    updateLeaderboard();
  } catch (err) {
    console.error("handleFormSubmit Error: " + err.toString() + " | Event: " + JSON.stringify(e));
  } finally {
    lock.releaseLock();
  }
}

// ‚úÖ ===================== ADMIN & SECURITY FUNCTIONS =====================

function isAdmin(email) {
  if (!email) {
    return false;
  }
  
  const cache = CacheService.getScriptCache();
  const CACHE_KEY = 'admin_emails';
  let cachedAdmins = cache.get(CACHE_KEY);
  
  if (cachedAdmins) {
    const adminList = JSON.parse(cachedAdmins);
    return adminList.includes(email.toLowerCase());
  }

  try {
    const sheet = ss.getSheetByName("Admin Settings");
    if (!sheet) {
      console.log("Admin Settings sheet not found. No users will be considered admins.");
      return false;
    }
    const adminEmails = sheet.getRange("A:A").getValues()
                          .flat()
                          .map(e => String(e).trim().toLowerCase())
                          .filter(e => e); 

    if (adminEmails.length > 0) {
      cache.put(CACHE_KEY, JSON.stringify(adminEmails), 3600);
    }
    
    return adminEmails.includes(email.toLowerCase());

  } catch (e) {
    console.error("Error checking admin status: " + e.toString());
    return false;
  }
}

function addAdminEmail() {
  const ui = SpreadsheetApp.getUi();
  const result = ui.prompt(
    '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà',
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà email ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà:',
    ui.ButtonSet.OK_CANCEL
  );

  if (result.getSelectedButton() == ui.Button.OK) {
    const newEmail = result.getResponseText().trim().toLowerCase();
    
    if (!newEmail || !newEmail.includes('@')) {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà email ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }

    try {
      const sheet = ss.getSheetByName("Admin Settings");
      const existingEmails = sheet.getRange("A:A").getValues()
                              .flat()
                              .map(e => String(e).trim().toLowerCase())
                              .filter(e => e);

      if (existingEmails.includes(newEmail)) {
        ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', 'Email ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
        return;
      }

      sheet.appendRow([newEmail]);
      CacheService.getScriptCache().remove('admin_emails');
      ui.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } catch (e) {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ: ' + e.toString());
    }
  }
}

// ‚úÖ ===================== UTILITY FUNCTIONS =====================

function normalizePhone(phone) {
  if (!phone) return "";
  return phone.toString().replace(/\D/g, '');
}

function getPhoneByCodename(codename) {
  if (!codename) return null;
  
  try {
    const dashSheet = ss.getSheetByName("Member Dashboard");
    const data = dashSheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][2] && data[i][2].toString().trim().toLowerCase() === codename.trim().toLowerCase()) {
        return normalizePhone(data[i][1]);
      }
    }
    return null;
  } catch (e) {
    console.error("Error in getPhoneByCodename: " + e.toString());
    return null;
  }
}

function getCodenameByPhone(phone) {
  if (!phone) return null;
  
  try {
    const dashSheet = ss.getSheetByName("Member Dashboard");
    const data = dashSheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (normalizePhone(data[i][1]) === normalizePhone(phone)) {
        return data[i][2];
      }
    }
    return null;
  } catch (e) {
    console.error("Error in getCodenameByPhone: " + e.toString());
    return null;
  }
}

function getMemberData(phone) {
  if (!phone) return null;
  
  try {
    const dashSheet = ss.getSheetByName("Member Dashboard");
    const data = dashSheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (normalizePhone(data[i][1]) === normalizePhone(phone)) {
        return {
          row: i + 1,
          phone: data[i][1],
          codename: data[i][2],
          rank: data[i][3],
          exp: data[i][4],
          party: data[i][5]
        };
      }
    }
    return null;
  } catch (e) {
    console.error("Error in getMemberData: " + e.toString());
    return null;
  }
}

// ‚úÖ ===================== EXP & PARTY POINT FUNCTIONS =====================

function logExp(phone, activity, expAmount) {
  try {
    const expSheet = ss.getSheetByName("EXP Log");
    expSheet.appendRow([new Date(), phone, activity, expAmount]);
  } catch (e) {
    console.error("Error logging EXP: " + e.toString());
  }
}

function logPartyPoint(phone, activity, pointAmount) {
  try {
    const partySheet = ss.getSheetByName("Party Log");
    partySheet.appendRow([new Date(), phone, activity, pointAmount]);
  } catch (e) {
    console.error("Error logging Party Point: " + e.toString());
  }
}

function giveExp(phone, expAmount) {
  try {
    const dashSheet = ss.getSheetByName("Member Dashboard");
    const data = dashSheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (normalizePhone(data[i][1]) === normalizePhone(phone)) {
        const currentExp = data[i][4] || 0;
        const newExp = currentExp + expAmount;
        dashSheet.getRange(i + 1, 5).setValue(newExp);
        
        // Update Leaderboard
        const lbSheet = ss.getSheetByName("Leaderboard");
        const lbData = lbSheet.getDataRange().getValues();
        
        for (let j = 1; j < lbData.length; j++) {
          if (normalizePhone(lbData[j][1]) === normalizePhone(phone)) {
            lbSheet.getRange(j + 1, 5).setValue(newExp);
            break;
          }
        }
        return true;
      }
    }
    return false;
  } catch (e) {
    console.error("Error giving EXP: " + e.toString());
    return false;
  }
}

function givePartyPoint(phone, pointAmount) {
  try {
    const dashSheet = ss.getSheetByName("Member Dashboard");
    const data = dashSheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (normalizePhone(data[i][1]) === normalizePhone(phone)) {
        const currentPoints = data[i][6] || 0;
        const newPoints = currentPoints + pointAmount;
        dashSheet.getRange(i + 1, 7).setValue(newPoints);
        return true;
      }
    }
    return false;
  } catch (e) {
    console.error("Error giving Party Point: " + e.toString());
    return false;
  }
}

function addExpFromActivity() {
  const ui = SpreadsheetApp.getUi();
  const result = ui.prompt(
    '‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:',
    ui.ButtonSet.OK_CANCEL
  );

  if (result.getSelectedButton() == ui.Button.OK) {
    const phone = normalizePhone(result.getResponseText());
    if (!phone) {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }

    const member = getMemberData(phone);
    if (!member) {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ');
      return;
    }

    const activityResult = ui.prompt(
      '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
      '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:',
      ui.ButtonSet.OK_CANCEL
    );

    if (activityResult.getSelectedButton() == ui.Button.OK) {
      const activity = activityResult.getResponseText().trim();
      if (!activity) {
        ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');
        return;
      }

      const expResult = ui.prompt(
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô EXP',
        '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô EXP:',
        ui.ButtonSet.OK_CANCEL
      );

      if (expResult.getSelectedButton() == ui.Button.OK) {
        const expAmount = parseInt(expResult.getResponseText());
        if (isNaN(expAmount) || expAmount <= 0) {
          ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô EXP ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
          return;
        }

        if (giveExp(phone, expAmount)) {
          logExp(phone, activity, expAmount);
          updateLeaderboard();
          ui.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡πÉ‡∏´‡πâ ${member.codename} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${activity}\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${expAmount} EXP`);
        } else {
          ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡πÑ‡∏î‡πâ');
        }
      }
    }
  }
}

function addExpFromActivityBulk() {
  const ui = SpreadsheetApp.getUi();
  const result = ui.prompt(
    '‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô)',
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ , ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ):',
    ui.ButtonSet.OK_CANCEL
  );

  if (result.getSelectedButton() == ui.Button.OK) {
    const phones = result.getResponseText().split(/[\s,]+/).map(normalizePhone).filter(Boolean);
    if (!phones.length) {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }

    const activityResult = ui.prompt(
      '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
      '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:',
      ui.ButtonSet.OK_CANCEL
    );

    if (activityResult.getSelectedButton() == ui.Button.OK) {
      const activity = activityResult.getResponseText().trim();
      if (!activity) {
        ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');
        return;
      }

      const expResult = ui.prompt(
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô EXP',
        '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô EXP:',
        ui.ButtonSet.OK_CANCEL
      );

      if (expResult.getSelectedButton() == ui.Button.OK) {
        const expAmount = parseInt(expResult.getResponseText());
        if (isNaN(expAmount) || expAmount <= 0) {
          ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô EXP ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
          return;
        }

        let success = 0;
        let fail = [];
        phones.forEach(phone => {
          const member = getMemberData(phone);
          if (member && giveExp(phone, expAmount)) {
            logExp(phone, activity, expAmount);
            success++;
          } else {
            fail.push(phone);
          }
        });
        updateLeaderboard();
        ui.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡πÉ‡∏´‡πâ ${success} ‡∏Ñ‡∏ô\n${fail.length ? '‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + fail.join(', ') : ''}`);
      }
    }
  }
}

function manualAddExp() {
  const ui = SpreadsheetApp.getUi();
  const result = ui.prompt(
    '‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡πÅ‡∏ö‡∏ö Manual',
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:',
    ui.ButtonSet.OK_CANCEL
  );

  if (result.getSelectedButton() == ui.Button.OK) {
    const phone = normalizePhone(result.getResponseText());
    if (!phone) {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }

    const expResult = ui.prompt(
      '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô EXP',
      '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô EXP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (‡∏à‡∏∞‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°):',
      ui.ButtonSet.OK_CANCEL
    );

    if (expResult.getSelectedButton() == ui.Button.OK) {
      const expAmount = parseInt(expResult.getResponseText());
      if (isNaN(expAmount) || expAmount < 0) {
        ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô EXP ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        return;
      }

      const dashSheet = ss.getSheetByName("Member Dashboard");
      const data = dashSheet.getDataRange().getValues();
      let found = false;
      for (let i = 1; i < data.length; i++) {
        if (normalizePhone(data[i][1]) === phone) {
          dashSheet.getRange(i + 1, 5).setValue(expAmount);
          found = true;
          break;
        }
      }
      if (found) {
        updateLeaderboard();
        ui.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ EXP ‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
      } else {
        ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ');
      }
    }
  }
}

function manualAddPartyPoint() {
  const ui = SpreadsheetApp.getUi();
  const result = ui.prompt(
    '‡πÄ‡∏û‡∏¥‡πà‡∏° Party Point ‡πÅ‡∏ö‡∏ö Manual',
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:',
    ui.ButtonSet.OK_CANCEL
  );

  if (result.getSelectedButton() == ui.Button.OK) {
    const phone = normalizePhone(result.getResponseText());
    if (!phone) {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }

    const pointResult = ui.prompt(
      '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Party Point',
      '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Party Point ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (‡∏à‡∏∞‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°):',
      ui.ButtonSet.OK_CANCEL
    );

    if (pointResult.getSelectedButton() == ui.Button.OK) {
      const pointAmount = parseInt(pointResult.getResponseText());
      if (isNaN(pointAmount) || pointAmount < 0) {
        ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Party Point ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        return;
      }

      const dashSheet = ss.getSheetByName("Member Dashboard");
      const data = dashSheet.getDataRange().getValues();
      let found = false;
      for (let i = 1; i < data.length; i++) {
        if (normalizePhone(data[i][1]) === phone) {
          dashSheet.getRange(i + 1, 7).setValue(pointAmount);
          found = true;
          break;
        }
      }
      if (found) {
        ui.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Party Point ‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
      } else {
        ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ');
      }
    }
  }
}

// ‚úÖ ===================== QUEST & CHALLENGE FUNCTIONS =====================

function approveQuestByPhone() {
  const ui = SpreadsheetApp.getUi();
  const result = ui.prompt(
    '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏ß‡∏™',
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:',
    ui.ButtonSet.OK_CANCEL
  );
  if (result.getSelectedButton() == ui.Button.OK) {
    const phone = normalizePhone(result.getResponseText());
    if (!phone) {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }
    const questSheet = ss.getSheetByName("Quests");
    const data = questSheet.getDataRange().getValues();
    let found = false;
    for (let i = 1; i < data.length; i++) {
      if (normalizePhone(data[i][1]) === phone && data[i][4] !== "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß") {
        questSheet.getRange(i + 1, 5).setValue("‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß");
        found = true;
      }
    }
    if (found) {
      ui.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏ß‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ');
    }
  }
}

function undoLastExpSingle() {
  const ui = SpreadsheetApp.getUi();
  const result = ui.prompt(
    '‡∏¢‡πâ‡∏≠‡∏ô EXP ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (1 ‡∏Ñ‡∏ô)',
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:',
    ui.ButtonSet.OK_CANCEL
  );
  if (result.getSelectedButton() == ui.Button.OK) {
    const phone = normalizePhone(result.getResponseText());
    if (!phone) {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }
    const expSheet = ss.getSheetByName("EXP Log");
    const data = expSheet.getDataRange().getValues();
    for (let i = data.length - 1; i > 0; i--) {
      if (normalizePhone(data[i][1]) === phone) {
        const expAmount = parseInt(data[i][3]);
        if (!isNaN(expAmount)) {
          giveExp(phone, -expAmount);
          expSheet.deleteRow(i + 1);
          updateLeaderboard();
          ui.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡∏•‡∏ö EXP ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
          return;
        }
      }
    }
    ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EXP ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ');
  }
}

function undoLastExpBulk() {
  const ui = SpreadsheetApp.getUi();
  const result = ui.prompt(
    '‡∏¢‡πâ‡∏≠‡∏ô EXP ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô)',
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ , ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ):',
    ui.ButtonSet.OK_CANCEL
  );
  if (result.getSelectedButton() == ui.Button.OK) {
    const phones = result.getResponseText().split(/[\s,]+/).map(normalizePhone).filter(Boolean);
    if (!phones.length) {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }
    let success = 0;
    phones.forEach(phone => {
      const expSheet = ss.getSheetByName("EXP Log");
      const data = expSheet.getDataRange().getValues();
      for (let i = data.length - 1; i > 0; i--) {
        if (normalizePhone(data[i][1]) === phone) {
          const expAmount = parseInt(data[i][3]);
          if (!isNaN(expAmount)) {
            giveExp(phone, -expAmount);
            expSheet.deleteRow(i + 1);
            success++;
            break;
          }
        }
      }
    });
    updateLeaderboard();
    ui.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡∏¢‡πâ‡∏≠‡∏ô EXP ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏´‡πâ ${success} ‡∏Ñ‡∏ô`);
  }
}

function approveChallenge() {
  const ui = SpreadsheetApp.getUi();
  const result = ui.prompt(
    '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤',
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™ Challenge ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏ó‡πâ‡∏≤:',
    ui.ButtonSet.OK_CANCEL
  );
  if (result.getSelectedButton() == ui.Button.OK) {
    const input = result.getResponseText().trim();
    const challengeSheet = ss.getSheetByName("Challenge Log");
    const data = challengeSheet.getDataRange().getValues();
    let found = false;
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] == input || normalizePhone(data[i][1]) === normalizePhone(input)) {
        challengeSheet.getRange(i + 1, 6).setValue("‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß");
        found = true;
      }
    }
    if (found) {
      ui.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Challenge ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö Challenge ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥');
    }
  }
}

function recordChallengeResult() {
  const ui = SpreadsheetApp.getUi();
  const result = ui.prompt(
    '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡πâ‡∏≤‡πÅ‡∏Ç‡πà‡∏á',
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™ Challenge:',
    ui.ButtonSet.OK_CANCEL
  );
  if (result.getSelectedButton() == ui.Button.OK) {
    const challengeId = result.getResponseText().trim();
    const challengeSheet = ss.getSheetByName("Challenge Log");
    const data = challengeSheet.getDataRange().getValues();
    let found = false;
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] == challengeId) {
        const winnerResult = ui.prompt(
          '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô',
          '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞:',
          ui.ButtonSet.OK_CANCEL
        );
        if (winnerResult.getSelectedButton() == ui.Button.OK) {
          const winnerPhone = normalizePhone(winnerResult.getResponseText());
          challengeSheet.getRange(i + 1, 7).setValue(winnerPhone);
          found = true;
        }
        break;
      }
    }
    if (found) {
      ui.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡πâ‡∏≤‡πÅ‡∏Ç‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™ Challenge ‡∏ô‡∏µ‡πâ');
    }
  }
}

// ‚úÖ ===================== PARTY MANAGEMENT & SYSTEM FUNCTIONS =====================

function showPartySummary() {
  const ui = SpreadsheetApp.getUi();
  const partySheet = ss.getSheetByName("Party Tracker");
  const data = partySheet.getDataRange().getValues();
  let summary = {};
  for (let i = 1; i < data.length; i++) {
    const party = data[i][1];
    if (!party) continue;
    summary[party] = (summary[party] || 0) + 1;
  }
  let msg = "‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ:\n";
  Object.keys(summary).forEach(party => {
    msg += `${party}: ${summary[party]} ‡∏Ñ‡∏ô\n`;
  });
  ui.alert(msg);
}

function createParty() {
  const ui = SpreadsheetApp.getUi();
  const result = ui.prompt(
    '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ',
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ:',
    ui.ButtonSet.OK_CANCEL
  );
  if (result.getSelectedButton() == ui.Button.OK) {
    const phone = normalizePhone(result.getResponseText());
    if (!phone) {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }
    const partySheet = ss.getSheetByName("Party Tracker");
    const partyName = "P" + Math.floor(Math.random() * 10000);
    partySheet.appendRow([new Date(), partyName, phone]);
    ui.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ${partyName} ‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
  }
}

function addMemberToParty() {
  const ui = SpreadsheetApp.getUi();
  const result = ui.prompt(
    '‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ',
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:',
    ui.ButtonSet.OK_CANCEL
  );
  if (result.getSelectedButton() == ui.Button.OK) {
    const phone = normalizePhone(result.getResponseText());
    if (!phone) {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }
    const partyResult = ui.prompt(
      '‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ',
      '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ:',
      ui.ButtonSet.OK_CANCEL
    );
    if (partyResult.getSelectedButton() == ui.Button.OK) {
      const partyName = partyResult.getResponseText().trim();
      if (!partyName) {
        ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ');
        return;
      }
      const partySheet = ss.getSheetByName("Party Tracker");
      partySheet.appendRow([new Date(), partyName, phone]);
      ui.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ${partyName} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
    }
  }
}

function removeFromParty() {
  const ui = SpreadsheetApp.getUi();
  const result = ui.prompt(
    '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ',
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:',
    ui.ButtonSet.OK_CANCEL
  );
  if (result.getSelectedButton() == ui.Button.OK) {
    const phone = normalizePhone(result.getResponseText());
    if (!phone) {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }
    const partySheet = ss.getSheetByName("Party Tracker");
    const data = partySheet.getDataRange().getValues();
    let found = false;
    for (let i = data.length - 1; i > 0; i--) {
      if (normalizePhone(data[i][2]) === phone) {
        partySheet.deleteRow(i + 1);
        found = true;
      }
    }
    if (found) {
      ui.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ');
    }
  }
}

function moveToAnotherParty() {
  const ui = SpreadsheetApp.getUi();
  const result = ui.prompt(
    '‡∏¢‡πâ‡∏≤‡∏¢‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ',
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:',
    ui.ButtonSet.OK_CANCEL
  );
  if (result.getSelectedButton() == ui.Button.OK) {
    const phone = normalizePhone(result.getResponseText());
    if (!phone) {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }
    const partyResult = ui.prompt(
      '‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà',
      '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà:',
      ui.ButtonSet.OK_CANCEL
    );
    if (partyResult.getSelectedButton() == ui.Button.OK) {
      const partyName = partyResult.getResponseText().trim();
      if (!partyName) {
        ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ');
        return;
      }
      const partySheet = ss.getSheetByName("Party Tracker");
      const data = partySheet.getDataRange().getValues();
      let moved = false;
      for (let i = data.length - 1; i > 0; i--) {
        if (normalizePhone(data[i][2]) === phone) {
          partySheet.getRange(i + 1, 2).setValue(partyName);
          moved = true;
        }
      }
      if (moved) {
        ui.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone} ‡πÑ‡∏õ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ${partyName} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
      } else {
        ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ');
      }
    }
  }
}

function disbandParty() {
  const ui = SpreadsheetApp.getUi();
  const result = ui.prompt(
    '‡∏¢‡∏∏‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ',
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ:',
    ui.ButtonSet.OK_CANCEL
  );
  if (result.getSelectedButton() == ui.Button.OK) {
    const partyName = result.getResponseText().trim();
    if (!partyName) {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ');
      return;
    }
    const partySheet = ss.getSheetByName("Party Tracker");
    const data = partySheet.getDataRange().getValues();
    let found = false;
    for (let i = data.length - 1; i > 0; i--) {
      if (data[i][1] === partyName) {
        partySheet.deleteRow(i + 1);
        found = true;
      }
    }
    if (found) {
      ui.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡∏¢‡∏∏‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ${partyName} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
    } else {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ô‡∏µ‡πâ');
    }
  }
}

function updateDashboardAndLeaderboardForExistingUser(phone, codename, rank) {
  try {
    const dashSheet = ss.getSheetByName("Member Dashboard");
    const lbSheet = ss.getSheetByName("Leaderboard");
    const dashData = dashSheet.getDataRange().getValues();
    const lbData = lbSheet.getDataRange().getValues();
    for (let i = 1; i < dashData.length; i++) {
      if (normalizePhone(dashData[i][1]) === normalizePhone(phone)) {
        dashSheet.getRange(i + 1, 2, 1, 3).setValues([[phone, codename, rank]]);
      }
    }
    for (let i = 1; i < lbData.length; i++) {
      if (normalizePhone(lbData[i][1]) === normalizePhone(phone)) {
        lbSheet.getRange(i + 1, 2, 1, 3).setValues([[phone, codename, rank]]);
      }
    }
  } catch (e) {
    console.error("Error updating dashboard/leaderboard: " + e.toString());
  }
}

function updateLeaderboard() {
  try {
    const dashSheet = ss.getSheetByName("Member Dashboard");
    const lbSheet = ss.getSheetByName("Leaderboard");
    const dashData = dashSheet.getDataRange().getValues();
    lbSheet.clearContents();
    lbSheet.appendRow(["Timestamp", "Phone", "Codename", "Rank", "EXP", "Party"]);
    for (let i = 1; i < dashData.length; i++) {
      lbSheet.appendRow([new Date(), dashData[i][1], dashData[i][2], dashData[i][3], dashData[i][4], dashData[i][5]]);
    }
  } catch (e) {
    console.error("Error updating leaderboard: " + e.toString());
  }
}

function clearDuplicateEntriesDebug() {
  try {
    const dashSheet = ss.getSheetByName("Member Dashboard");
    const data = dashSheet.getDataRange().getValues();
    let seen = {};
    for (let i = data.length - 1; i > 0; i--) {
      const phone = normalizePhone(data[i][1]);
      if (seen[phone]) {
        dashSheet.deleteRow(i + 1);
      } else {
        seen[phone] = true;
      }
    }
  } catch (e) {
    console.error("Error clearing duplicates: " + e.toString());
  }
}

function removeMember() {
  const ui = SpreadsheetApp.getUi();
  const result = ui.prompt(
    '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:',
    ui.ButtonSet.OK_CANCEL
  );
  if (result.getSelectedButton() == ui.Button.OK) {
    const phone = normalizePhone(result.getResponseText());
    if (!phone) {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }
    let removed = false;
    ["Member Database", "Member Dashboard", "Leaderboard", "Party Tracker"].forEach(sheetName => {
      const sheet = ss.getSheetByName(sheetName);
      const data = sheet.getDataRange().getValues();
      for (let i = data.length - 1; i > 0; i--) {
        if (normalizePhone(data[i][1]) === phone) {
          sheet.deleteRow(i + 1);
          removed = true;
        }
      }
    });
    if (removed) {
      ui.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      ui.alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ');
    }
  }
}

// ‚úÖ ===================== RANK & LEADERBOARD FUNCTIONS =====================

function updateRanks() {
  try {
    const dashSheet = ss.getSheetByName("Member Dashboard");
    const data = dashSheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      const exp = data[i][4] || 0;
      let rank = "Bronze";
      
      if (exp >= 100) rank = "Diamond";
      else if (exp >= 50) rank = "Platinum";
      else if (exp >= 25) rank = "Gold";
      else if (exp >= 10) rank = "Silver";
      else if (exp >= 5) rank = "Bronze";
      else rank = "Iron";
      
      dashSheet.getRange(i + 1, 4).setValue(rank);
    }
    
    updateLeaderboard();
    SpreadsheetApp.getUi().alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
  } catch (e) {
    console.error("Error updating ranks: " + e.toString());
    SpreadsheetApp.getUi().alert('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank ‡πÑ‡∏î‡πâ');
  }
}

// ‚úÖ ===================== WEB APP FUNCTIONS =====================

function doGet(e) {
  return HtmlService.createHtmlOutputFromFile('Admin')
    .setTitle('Up Level Guild Admin Panel')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

function doPost(e) {
  try {
    // Check if this is a JSON request (from admin web app) or form submission
    let requestData;
    let isJsonRequest = false;
    
    try {
      // Try to parse as JSON first
      requestData = JSON.parse(e.postData.contents);
      isJsonRequest = true;
    } catch (parseError) {
      // If JSON parsing fails, treat as form submission
      requestData = e.parameter;
      isJsonRequest = false;
    }
    
    if (isJsonRequest) {
      // Handle admin web app requests
      return handleAdminRequest(requestData);
    } else {
      // Handle regular form submissions (existing functionality)
      return handleFormSubmission(requestData);
    }
  } catch (error) {
    console.error("doPost error: " + error.toString());
    return ContentService.createTextOutput(JSON.stringify({
      success: false,
      error: error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

function handleAdminRequest(requestData) {
  const { action, idToken, ...params } = requestData;
  
  // Verify Google ID Token
  if (!verifyGoogleIdToken(idToken)) {
    return ContentService.createTextOutput(JSON.stringify({
      success: false,
      error: "Invalid authentication"
    })).setMimeType(ContentService.MimeType.JSON);
  }
  
  // Check if user is admin
  const userEmail = getUserEmailFromToken(idToken);
  if (!isAdmin(userEmail)) {
    return ContentService.createTextOutput(JSON.stringify({
      success: false,
      error: "Access denied. Admin privileges required."
    })).setMimeType(ContentService.MimeType.JSON);
  }
  
  // Handle different admin actions
  switch (action) {
    case 'getPendingQuests':
      return getPendingQuestsForAdmin();
    default:
      return ContentService.createTextOutput(JSON.stringify({
        success: false,
        error: "Unknown action"
      })).setMimeType(ContentService.MimeType.JSON);
  }
}

function handleFormSubmission(formData) {
  // Handle existing form submissions (quest submissions, etc.)
  // This maintains backward compatibility with existing forms
  try {
    // Process form data as before
    return ContentService.createTextOutput(JSON.stringify({
      success: true,
      message: "Form submitted successfully"
    })).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService.createTextOutput(JSON.stringify({
      success: false,
      error: error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

function verifyGoogleIdToken(idToken) {
  try {
    // For now, we'll use a simple verification
    // In production, you should verify the token with Google's servers
    return idToken && idToken.length > 10;
  } catch (error) {
    console.error("Token verification error: " + error.toString());
    return false;
  }
}

function getUserEmailFromToken(idToken) {
  try {
    // For now, we'll extract email from a simple token format
    // In production, you should decode the JWT token properly
    return "admin@example.com"; // Placeholder
  } catch (error) {
    console.error("Error extracting email from token: " + error.toString());
    return null;
  }
}

function getPendingQuestsForAdmin() {
  try {
    const questSheet = ss.getSheetByName("Quests");
    const data = questSheet.getDataRange().getValues();
    const pendingQuests = [];
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][4] !== "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß") {
        pendingQuests.push({
          id: i,
          timestamp: data[i][0],
          phone: data[i][1],
          codename: data[i][2],
          quest: data[i][3],
          status: data[i][4]
        });
      }
    }
    
    return ContentService.createTextOutput(JSON.stringify({
      success: true,
      data: pendingQuests
    })).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService.createTextOutput(JSON.stringify({
      success: false,
      error: error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

// ‚úÖ ===================== END OF SCRIPT =====================
