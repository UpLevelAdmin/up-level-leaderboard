// ‚ö° ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö debouncing ‡πÅ‡∏•‡∏∞ rate limiting
let globalStandingsUpdateScheduled = false;
let globalLastStandingsCheck = 0;
let globalLastStandingsUpdate = 0;

function onOpen() {
  const ui = SpreadsheetApp.getUi();
  
  // üèÜ Tournament Management - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
  ui.createMenu('üèÜ Tournament')
    .addItem('üÜî ‡∏™‡∏£‡πâ‡∏≤‡∏á Player ID ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', 'generatePlayerIDs')
    .addItem('üìû ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡∏°‡∏µ 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤', 'fixPhoneNumbers')
    .addSeparator()
    .addItem('üé≤ ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å', 'pairFirstRound')
    .addItem('‚û°Ô∏è ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ', 'pairNextRound')
    .addItem('üîÅ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings', 'updateStandings')
    .addItem('‚Ü©Ô∏è ‡∏¢‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', 'undoLastPairing')
    .addSeparator()
    .addItem('üö´ Drop ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠)', 'dropPlayerFromList')
    .addItem('‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Drop ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô', 'cancelPlayerDrop')
    .addSeparator()
    .addItem('üóëÔ∏è Clear Pairing (‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)', 'clearPairingData')
    .addToUi();
  
  // üîÑ Round Robin Tournament - ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏û‡∏ö‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î
  ui.createMenu('üîÑ Round Robin')
    .addItem('üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á Round Robin', 'createRoundRobinTournament')
    .addItem('üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏• Round Robin', 'updateRoundRobinResults')
    .addItem('üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡πÅ‡∏•‡∏∞ Standings ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', 'autoUpdateRoundRobinResults')
    .addItem('üèÜ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• Round Robin', 'createRoundRobinStanding')
    .addSeparator()
    .addItem('üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', 'setupRoundRobinTriggers')
    .addItem('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Trigger ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà', 'checkRoundRobinTriggers')
    .addSeparator()
    .addItem('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standings (OW% & H2H)', 'fixRoundRobinStandingsData')
    .addItem('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', 'fixAllRoundRobinData')
    .addToUi();
  
  // üìä Analysis & Stats - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  ui.createMenu('üìä Analysis')
    .addItem('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà', 'showPairingValidation')
    .addItem('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô', 'showPairingStats')
    .addItem('üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£', 'showTournamentAdvice')
    .addItem('üìä ‡πÅ‡∏™‡∏î‡∏á Bracket Pairing', 'showBracketPairing')
    .addToUi();
  
  // üõ†Ô∏è Data Management - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  ui.createMenu('üõ†Ô∏è Data Management')
    .addItem('üßπ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà)', 'clearAllData')
    .addItem('ü™£ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå Bucket (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠)', 'clearBucketData')
    .addItem('üìè ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L (H2H)', 'forceResizeH2HColumn')
    .addItem('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Standing ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß', 'showStandingCheckResult')
    .addItem('üîÑ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Status ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'forceUpdateAllStatus')
    .addItem('‚ö° ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Status ‡πÄ‡∏õ‡πá‡∏ô OK (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß)', 'updatePendingStatusToOK')
    .addItem('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', 'checkRoundCompletion')
    .addItem('üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings', 'resetStandingsUpdateFlags')
    .addItem('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö Player ID', 'testPlayerIdSorting')
    .addItem('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Player', 'fixPlayerDataIssues')
    .addSeparator()
    .addItem('üóëÔ∏è ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á Standings', 'removeStandingsTable')
    .addItem('üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Standings ‡πÉ‡∏´‡∏°‡πà', 'recreateStandingsTable')
    .addSeparator()
    .addItem('üìè ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô', 'adjustPairingColumns')
    .addItem('üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Hide Standing Controls', 'resetHideStandingControls')
    .addItem('üßπ ‡∏•‡∏ö Hide Standing ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô', 'removeDuplicateHideStanding')
    .addSeparator()
    .addItem('‚ö° ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Controls ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ', 'forceResetControls')
    .addSeparator()
    .addItem('üß† ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏ö‡∏ö Smart', 'smartResizeAllSheets')
    .addSeparator()
    .addItem('ü™£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket Cache', 'updateBucketCacheManual')
    .addItem('ü™£ ‡∏•‡πâ‡∏≤‡∏á Bucket Cache', 'clearBucketCache')
    .addItem('ü™£ ‡∏™‡∏£‡πâ‡∏≤‡∏á Bucket Sheet ‡πÉ‡∏´‡∏°‡πà', 'createBucketSheet')
    .addToUi();
  
  // üé® Formatting & Display - ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  ui.createMenu('üé® Formatting')
    .addItem('üé® ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏µ‡∏ó', 'formatPairingSheet')
    .addItem('‚ú® ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•', 'improveVisualFormatting')
    .addItem('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠', 'fixTextOverlap')
    .addSeparator()
    .addItem('üìä ‡πÅ‡∏¢‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô', 'separateRoundsVisually')
    .addToUi();
  
  // üìä Export & Reports - ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
  ui.createMenu('üìä Export & Reports')
    .addItem('üìÑ Export ‡πÄ‡∏õ‡πá‡∏ô CSV', 'exportToCSV')
    .addItem('üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó Report ‡πÉ‡∏´‡∏°‡πà', 'createReportSheet')
    .addItem('üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PDF', 'createPDFReport')
    .addItem('üèãÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á Gym Standing for fill', 'createGymStandingForFill')
    .addToUi();

  // üîß Debug & Maintenance - ‡∏î‡∏µ‡∏ö‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö)
  ui.createMenu('üîß Debug & Maintenance')
    .addItem('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô', 'checkMissingMembers')
    .addItem('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤', 'fixIncompletePairing')
    .addItem('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç P2_ID ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á', 'fixMissingPlayerIDs')
    .addSeparator()
    .addItem('üêõ Debug Standings', 'debugStandingsUpdate')
    .addItem('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Player', 'debugPlayerData')
    .addItem('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö onEdit Trigger', 'testOnEditTrigger')
    .addToUi();

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Hide Standing controls ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  setupPairingHideStandingControls();
  
  // ‡∏•‡∏ö Hide Standing ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  removeDuplicateHideStandingSilent();
  
  // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
  setupColumnWidthsOnce();
  
  // ‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Standing ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  setupStandingColumnWidthsOnce();
}

function pairFirstRound() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const existingRounds = pairingSheet.getRange('A2:A').getValues().flat().filter(r => r);
  if (existingRounds.length > 0) {
    const response = SpreadsheetApp.getUi().alert(
      '‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 
      '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?', 
      SpreadsheetApp.getUi().ButtonSet.YES_NO
    );
    if (response === SpreadsheetApp.getUi().Button.NO) {
      return;
    }
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏°
    pairingSheet.getRange(2, 1, pairingSheet.getLastRow() - 1, pairingSheet.getLastColumn()).clearContent();
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó Players
  const playersSheet = ss.getSheetByName('Players');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏µ‡∏ó Players ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (playersSheet.getLastRow() <= 1) {
    SpreadsheetApp.getUi().alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Players ‡∏Å‡πà‡∏≠‡∏ô');
    return;
  }
  
  const playersData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 4).getValues();
  const dropList = pairingSheet.getRange('M2:M').getValues().flat().filter(name => name);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á dropSet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞ ID
  const dropSet = new Set(dropList.map(x => x.trim()));
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ dropSet ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  if (!dropSet || !(dropSet instanceof Set)) {
    console.log('‚ö†Ô∏è dropSet ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà');
    dropSet = new Set(dropList.map(x => x.trim()));
  }
  
  // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Drop ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const activePlayers = playersData.filter(row => {
    if (!row[0] || !row[1] || !row[2]) return false;
    const playerId = row[0];
    const playerName = row[1];
    return !dropSet.has(playerId) && !dropSet.has(playerName);
  });

  // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
  console.log('Players Data:', playersData);
  console.log('Active Players:', activePlayers);
  console.log('Drop List:', dropList);

  if (activePlayers.length < 2) {
    SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ ‚Äì ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏ô)\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö: ' + playersData.length + ' ‡∏Ñ‡∏ô\n‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ' + activePlayers.length + ' ‡∏Ñ‡∏ô');
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  if (activePlayers.length < 4) {
    const response = SpreadsheetApp.getUi().alert(
      '‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
      '‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ' + activePlayers.length + ' ‡∏Ñ‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏î‡∏∏‡∏• ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      SpreadsheetApp.getUi().ButtonSet.YES_NO
    );
    if (response === SpreadsheetApp.getUi().Button.NO) {
      return;
    }
  }

  // ‡∏™‡∏∏‡πà‡∏° (Fisher-Yates shuffle)
  for (let i = activePlayers.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [activePlayers[i], activePlayers[j]] = [activePlayers[j], activePlayers[i]];
  }

  const round = 1;
  let output = [];
  let byePlayer = null;

  // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏Ñ‡∏µ‡πà ‚Üí ‡∏à‡∏±‡∏ö BYE ‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á (‡∏™‡∏∏‡πà‡∏°)
  if (activePlayers.length % 2 !== 0) {
    const index = Math.floor(Math.random() * activePlayers.length);
    byePlayer = activePlayers.splice(index, 1)[0]; // remove from list
  }

  // ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  for (let i = 0; i < activePlayers.length; i += 2) {
    const p1 = activePlayers[i];
    const p2 = activePlayers[i + 1];

    if (!p2) break;

    output.push([
      round,
      i / 2 + 1,
      p1[0], p1[1], false, false, false, false,
      p2[0], p2[1], '', 'PENDING', ''
    ]);
  }

  // BYE ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  if (byePlayer) {
    output.push([
      round,
      output.length + 1,
      byePlayer[0], byePlayer[1], true, false, false, false,
      'BYE', 'BYE', '1:0', 'BYE WIN', ''
    ]);
  }

  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á Pairing
  const startRow = pairingSheet.getLastRow() + 1;
  pairingSheet.getRange(startRow, 1, output.length, output[0].length).setValues(output);
  addCheckboxes(pairingSheet, output.length);
  
  // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÉ‡∏ä‡πâ formatPairingComplete ‡πÅ‡∏ó‡∏ô formatPairingData
  formatPairingComplete(pairingSheet);
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings
  try {
    updateStandings();
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings:', error);
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö Standings
  }
}

function pairNextRound() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const bucketSheet = ss.getSheetByName('Bucket');
  const playersSheet = ss.getSheetByName('Players');

  // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Standing ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏Å‡πà‡∏≠‡∏ô
  let standingCheck;
  try {
    standingCheck = quickCheckStandings();
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Standing:', error);
    standingCheck = { isValid: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' };
  }
  
  if (!standingCheck.isValid) {
    // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standing ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠ (‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î)
    console.log('Standing ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standing...');
    try {
      updateStandings();
    } catch (error) {
      console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standing:', error);
      // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standing ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    try {
      const standingCheckAfterUpdate = quickCheckStandings();
      if (!standingCheckAfterUpdate.isValid) {
        console.log('‚ö†Ô∏è Standing ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï - ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠');
      } else {
        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standing ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      }
    } catch (error) {
      console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Standing ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:', error);
      // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    }
    
    console.log('‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö Standing');
  }

  // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  const allPairingData = pairingSheet.getDataRange().getValues();
  const playersData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 4).getValues();
  
  // ‡∏î‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const roundData = allPairingData.slice(1).map(row => row[0]).filter(r => r);
  const nextRound = roundData.length ? Math.max(...roundData) + 1 : 1;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (roundData.length > 0) {
    const lastRound = Math.max(...roundData);
    const hasLastRound = roundData.some(r => r === lastRound);
    if (hasLastRound) {
      const response = SpreadsheetApp.getUi().alert(
        '‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 
        '‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + lastRound + ' ‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + nextRound + ' ‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?', 
        SpreadsheetApp.getUi().ButtonSet.YES_NO
      );
      if (response === SpreadsheetApp.getUi().Button.NO) {
        return;
      }
    }
  }

  // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÉ‡∏ä‡πâ Bucket cache ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
  let standings = [];
  let matchHistory = {};
  let playerBrackets = {};
  
  if (bucketSheet && bucketSheet.getLastRow() > 1) {
    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Bucket (‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å)
    const bucketData = bucketSheet.getRange(2, 1, bucketSheet.getLastRow() - 1, 8).getValues();
    standings = bucketData
      .filter(row => row[4] === 'ACTIVE') // Status = ACTIVE
      .map(row => ({
        id: row[0],
        name: row[1],
        points: row[2],
        rank: row[3],
        status: row[4]
      }));
    
    // ‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡πÉ‡∏ä‡πâ MatchHistory ‡∏à‡∏≤‡∏Å Bucket (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå G)
    try {
      const matchHistoryStr = bucketSheet.getRange(1, 7).getValue();
      if (matchHistoryStr && matchHistoryStr !== '') {
        matchHistory = JSON.parse(matchHistoryStr);
      }
    } catch (error) {
      console.log('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô MatchHistory ‡∏à‡∏≤‡∏Å Bucket:', error);
    }
    
    // ‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡πÉ‡∏ä‡πâ PlayerBrackets ‡∏à‡∏≤‡∏Å Bucket (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå H)
    try {
      const playerBracketsStr = bucketSheet.getRange(1, 8).getValue();
      if (playerBracketsStr && playerBracketsStr !== '') {
        playerBrackets = JSON.parse(playerBracketsStr);
      }
    } catch (error) {
      console.log('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô PlayerBrackets ‡∏à‡∏≤‡∏Å Bucket:', error);
    }
    
    console.log('‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Bucket cache (‡πÄ‡∏£‡πá‡∏ß)');
  } else {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Bucket
    try {
      standings = calculateStandingsFast(allPairingData, playersData);
      console.log('‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà (‡∏ä‡πâ‡∏≤)');
    } catch (error) {
      console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Standings:', error);
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á standings ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      standings = [];
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• standings ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (standings.length === 0) {
    SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• standings ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡∏Å‡πà‡∏≠‡∏ô');
    return;
  }

  // ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏î‡πâ‡∏ö‡∏≤‡∏¢
  const byeList = allPairingData
    .filter(r => r[8] === 'BYE') // P2_ID ‡πÄ‡∏õ‡πá‡∏ô BYE (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå I)
    .map(r => r[2]); // P1_ID ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏≤‡∏¢

  // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏™‡∏£‡πâ‡∏≤‡∏á player lookup map
  const playerMap = {};
  playersData.forEach(row => {
    if (row[0] && row[1]) {
      playerMap[row[0]] = row[1];
    }
  });

  // ‡∏Å‡∏£‡∏≠‡∏á activePlayers ‡∏à‡∏≤‡∏Å standings (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà drop)
  let activePlayers = standings
    .filter(player => player.status !== 'DROPPED' && player.id)
    .map(player => ({
      id: player.id,
      name: player.name,
      points: player.points,
      rank: player.rank
    }))
    .sort((a, b) => {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
      if (b.points !== a.points) {
        return b.points - a.points;
      }
      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
      return a.id.localeCompare(b.id);
    });

  // ‚ö° ‡∏•‡∏ö debug logging ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ log ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
  console.log(`‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${nextRound} - ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ${activePlayers.length} ‡∏Ñ‡∏ô`);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ players ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (activePlayers.length < 2) {
    SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ ‚Äì ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏Ñ‡∏ô)\n\n‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ' + activePlayers.length + ' ‡∏Ñ‡∏ô');
    return;
  }

  // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
  if (Object.keys(matchHistory).length === 0) {
    // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏™‡∏£‡πâ‡∏≤‡∏á matchHistory ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Bucket)
    allPairingData.slice(1).forEach(row => {
      const p1 = row[2], p2 = row[8]; // P1_ID, P2_ID (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C ‡πÅ‡∏•‡∏∞ I)
      if (!p1 || !p2 || p1 === '' || p2 === '' || p2 === 'BYE' || p1 === 'BYE') return;
      if (!matchHistory[p1]) matchHistory[p1] = [];
      if (!matchHistory[p2]) matchHistory[p2] = [];
      matchHistory[p1].push(p2);
      matchHistory[p2].push(p1);
    });
  }

  // 1. ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (Bracket Pairing)
  if (Object.keys(playerBrackets).length === 0) {
    // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏™‡∏£‡πâ‡∏≤‡∏á playerBrackets (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Bucket)
    activePlayers.forEach(player => {
      const points = player.points;
      if (!playerBrackets[points]) playerBrackets[points] = [];
      playerBrackets[points].push(player);
    });
  }

  // ‚ö° ‡∏•‡∏ö debug logging ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  // console.log('Player Brackets:', playerBrackets);

  // 2. ‡πÅ‡∏à‡∏Å‡∏ö‡∏≤‡∏¢‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏Ñ‡∏µ‡πà - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏î‡πâ BYE ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  let byePlayer = null;
  if (activePlayers.length % 2 === 1) {
    const sortedPoints = Object.keys(playerBrackets).map(Number).sort((a, b) => a - b);
    
    for (let points of sortedPoints) {
      const playersInBracket = playerBrackets[points];
      for (let player of playersInBracket) {
        if (!byeList.includes(player.id)) {
          byePlayer = player;
          playerBrackets[points] = playerBrackets[points].filter(p => p.id !== player.id);
          if (playerBrackets[points].length === 0) {
            delete playerBrackets[points];
          }
          break;
        }
      }
      if (byePlayer) break;
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏î‡πâ BYE ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    if (!byePlayer) {
      const availablePoints = Object.keys(playerBrackets).map(Number).filter(points => 
        playerBrackets[points] && Array.isArray(playerBrackets[points]) && playerBrackets[points].length > 0
      );
      
      if (availablePoints.length > 0) {
        const lowestPoints = Math.min(...availablePoints);
        byePlayer = playerBrackets[lowestPoints].pop();
        if (playerBrackets[lowestPoints].length === 0) {
          delete playerBrackets[lowestPoints];
        }
      }
    }
  }

  // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á pairing ‡πÅ‡∏ö‡∏ö backtracking - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥ 100%
  const paired = [];
  
  // ‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏°: timeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏á
  const startTime = Date.now();
  const MAX_TIME = activePlayers.length <= 16 ? 15000 : 30000; // 15-30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
  function getEligibleOpponents(p1, availablePlayers, matchHistory) {
    const eligible = [];
    availablePlayers.forEach(p2 => {
      if (p1.id !== p2.id) {
        const hasPlayed = matchHistory[p1.id] && matchHistory[p1.id].includes(p2.id);
        if (!hasPlayed) {
          eligible.push(p2);
        }
      }
    });
    return eligible;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
  function calculatePairingScore(p1, p2) {
    const pointDiff = Math.abs(p1.points - p2.points);
    const avgPoints = (p1.points + p2.points) / 2;
    
    // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏Ñ‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô)
    const avgScore = avgPoints / 10;
    
    // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á (pair down ‡πÑ‡∏î‡πâ)
    const pointScore = Math.max(0, 15 - pointDiff * 2); // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    const balanceScore = Math.min(p1.points, p2.points) / 10;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
    return (avgScore * 0.6) + (pointScore * 0.2) + (balanceScore * 0.2);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö backtracking (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å Swiss Tournament)
  function pairPlayers(players, matchHistory) {
    // ‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö timeout
    if (Date.now() - startTime > MAX_TIME) {
      console.log('‚è∞ Timeout - ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ');
      return false;
    }
    
    if (players.length === 0) return true;
    if (players.length === 1) return false;

    // --- ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ Swiss Tournament ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ---
    // 1. ‡∏Ñ‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô)
    // 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ pair down (‡∏Ñ‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô)
    // 3. ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥ 100%

    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    const pointsGroups = {};
    players.forEach(player => {
      if (!pointsGroups[player.points]) pointsGroups[player.points] = [];
      pointsGroups[player.points].push(player);
    });
    
    const sortedPoints = Object.keys(pointsGroups).map(Number).sort((a, b) => b - a);
    
    // 1. ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
    for (let points of sortedPoints) {
      const playersInGroup = pointsGroups[points];
      if (playersInGroup.length >= 2) {
        for (let i = 0; i < playersInGroup.length; i++) {
          for (let j = i + 1; j < playersInGroup.length; j++) {
            const p1 = playersInGroup[i];
            const p2 = playersInGroup[j];
            
            const hasPlayed = matchHistory[p1.id] && matchHistory[p1.id].includes(p2.id);
            
            if (!hasPlayed) {
              // ‚ö° ‡∏•‡∏ö debug logging ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
              // console.log(`‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô: ${p1.name} (${p1.points} pts) vs ${p2.name} (${p2.points} pts)`);
              
              const remainingPlayers = players.filter(p => p.id !== p1.id && p.id !== p2.id);
              paired.push([p1, p2]);
              
              if (pairPlayers(remainingPlayers, matchHistory)) {
                return true;
              }
              
              paired.pop(); // backtrack
            }
          }
        }
      }
    }
    
    // 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ pair down
    const p1 = players[0];
    const eligibleOpponents = getEligibleOpponents(p1, players.slice(1), matchHistory);
    
    if (eligibleOpponents.length === 0) {
      return false; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    }
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô)
    eligibleOpponents.sort((a, b) => {
      const pointDiffA = Math.abs(p1.points - a.points);
      const pointDiffB = Math.abs(p1.points - b.points);
      
      // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô
      if (pointDiffA !== pointDiffB) {
        return pointDiffA - pointDiffB;
      }
      
      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤
      return b.points - a.points;
    });
    
    for (let p2 of eligibleOpponents) {
      const remainingPlayers = players.filter(p => p.id !== p1.id && p.id !== p2.id);
      paired.push([p1, p2]);
      
      if (pairPlayers(remainingPlayers, matchHistory)) {
        return true;
      }
      
      paired.pop(); // backtrack
    }
    
    return false;
  }

  // ‡∏•‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö backtracking
  const remainingPlayers = activePlayers.filter(p => !byePlayer || p.id !== byePlayer.id);
  
  // ‚ö° ‡∏•‡∏ö debug logging ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  // console.log('Remaining Players for Pairing:', remainingPlayers.map(p => `${p.name} (${p.id}) - ${p.points} pts`));
  
  const success = pairPlayers(remainingPlayers, matchHistory);

  if (!success) {
    // ‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö timeout
    if (Date.now() - startTime > MAX_TIME) {
      console.log('‚è∞ Timeout - ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ');
      SpreadsheetApp.getUi().alert(
        '‚è∞ Timeout',
        `‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (${MAX_TIME/1000} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)\n\n` +
        `‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ${activePlayers.length} ‡∏Ñ‡∏ô\n` +
        `üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n` +
        `- ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô "‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÄ‡∏£‡πá‡∏ß)"\n` +
        `- ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô\n` +
        `- ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° timeout`,
        SpreadsheetApp.getUi().ButtonSet.OK
      );
      return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å Swiss Tournament)
    const playerCount = activePlayers.length;
    let recommendedRounds;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å Swiss Tournament
    if (playerCount <= 4) {
      recommendedRounds = 3;
    } else if (playerCount <= 8) {
      recommendedRounds = 4;
    } else if (playerCount <= 16) {
      recommendedRounds = 5;
    } else if (playerCount <= 32) {
      recommendedRounds = 6;
    } else {
      recommendedRounds = Math.ceil(Math.log2(playerCount)) + 1;
    }
    
    const currentRound = nextRound - 1;
    
    let message = '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥\n\n';
    message += `‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${nextRound} (‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${currentRound} ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô)\n`;
    message += `‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ${playerCount} ‡∏Ñ‡∏ô\n`;
    message += `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ${recommendedRounds} ‡∏£‡∏≠‡∏ö\n\n`;
    
    if (currentRound >= recommendedRounds) {
      message += '‚úÖ ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥! ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏°‡∏≤‡∏Å‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß\n';
      message += '‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥\n\n';
      message += 'üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n';
      message += '- ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô "‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÄ‡∏£‡πá‡∏ß)" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô\n';
      message += '- ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà\n';
      
      const response = SpreadsheetApp.getUi().alert(
        '‚ö†Ô∏è ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ã‡πâ‡∏≥',
        message,
        SpreadsheetApp.getUi().ButtonSet.YES_NO
      );
      
      if (response === SpreadsheetApp.getUi().Button.YES) {
        // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏ó‡∏ô
        pairNextRoundFast();
        return;
      } else {
        return; // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
      }
    } else {
      message += '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ\n';
      message += '‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n\n';
      message += 'üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n';
      message += '- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤\n';
      message += '- ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô "‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÄ‡∏£‡πá‡∏ß)"\n';
      message += '- ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà\n\n';
      message += `üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:\n`;
      message += `- ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ${playerCount} ‡∏Ñ‡∏ô‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ ${recommendedRounds} ‡∏£‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥\n`;
      message += `- ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${currentRound} ‡∏à‡∏≤‡∏Å ${recommendedRounds} ‡∏£‡∏≠‡∏ö`;
      
      SpreadsheetApp.getUi().alert(
        '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥',
        message,
        SpreadsheetApp.getUi().ButtonSet.OK
      );
      return;
    }
  }

  // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏à‡∏±‡∏î‡πÇ‡∏ï‡πä‡∏∞‡∏ï‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î - ‡πÇ‡∏ï‡πä‡∏∞ 1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
  const output = [];
  
  // ‚ö° ‡∏•‡∏ö debug logging ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  // console.log('=== ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ ===');
  // paired.forEach(([p1, p2], index) => {
  //   console.log(`‡∏Ñ‡∏π‡πà ${index + 1}: ${p1.name} (${p1.points}pts) vs ${p2.name} (${p2.points}pts)`);
  // });
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢) - ‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÇ‡∏ï‡πä‡∏∞ 1
  const sortedPairs = paired.map(([p1, p2]) => ({
    p1, p2, 
    maxPoints: Math.max(p1.points, p2.points), // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà
    avgPoints: (p1.points + p2.points) / 2,
    minPoints: Math.min(p1.points, p2.points) // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
  })).sort((a, b) => {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô (‡πÇ‡∏ï‡πä‡∏∞ 1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
    if (b.maxPoints !== a.maxPoints) {
      return b.maxPoints - a.maxPoints;
    }
    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤)
    if (b.minPoints !== a.minPoints) {
      return b.minPoints - a.minPoints;
    }
    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    return b.avgPoints - a.avgPoints;
  });
  
  // ‚ö° ‡∏•‡∏ö debug logging ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  // console.log('=== ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ===');
  // sortedPairs.forEach((pair, index) => {
  //   console.log(`‡πÇ‡∏ï‡πä‡∏∞ ${index + 1}: ${pair.p1.name} (${pair.p1.points}pts) vs ${pair.p2.name} (${pair.p2.points}pts) - Max: ${pair.maxPoints}, Min: ${pair.minPoints}, Avg: ${pair.avgPoints}`);
  // });
  
  let tableNumber = 1;
  sortedPairs.forEach(({p1, p2}) => {
    output.push([
      nextRound,
      tableNumber++,
      p1.id, p1.name, false, false, false, false,
      p2.id, p2.name, '', 'PENDING', ''
    ]);
  });

  // BYE ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÉ‡∏™‡πà‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î)
  if (byePlayer) {
    output.push([
      nextRound,
      tableNumber,
      byePlayer.id, byePlayer.name, true, false, false, false,
      'BYE', 'BYE', '1:0', 'BYE WIN', ''
    ]);
  }

  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á Pairing
  const startRow = pairingSheet.getLastRow() + 1;
  pairingSheet.getRange(startRow, 1, output.length, output[0].length).setValues(output);
  addCheckboxes(pairingSheet, output.length);
  
  // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
  try {
    updateBucketCache(standings, new Set(), {});
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache:', error);
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö Bucket
  }
  
  // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏•‡∏î‡∏Å‡∏≤‡∏£ format ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô - ‡πÉ‡∏ä‡πâ completePairingFormat() ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà (‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏£‡∏≠‡∏ö, ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå, ‡πÅ‡∏•‡∏∞‡∏™‡∏µ)
  completePairingFormat();
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings
  try {
    updateStandings();
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings:', error);
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö Standings
  }
  
  // ‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
  const endTime = Date.now();
  const duration = (endTime - startTime) / 1000;
  console.log(`‚úÖ ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${nextRound} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${duration.toFixed(2)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
}



// ‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache ‡πÅ‡∏ö‡∏ö manual
function updateBucketCacheManual() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const pairingSheet = ss.getSheetByName('Pairing');
    const playersSheet = ss.getSheetByName('Players');
    const bucketSheet = ss.getSheetByName('Bucket');
    
    if (!bucketSheet) {
      SpreadsheetApp.getUi().alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Bucket', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó Bucket ‡∏Å‡πà‡∏≠‡∏ô', SpreadsheetApp.getUi().ButtonSet.OK);
      return;
    }
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì standings
    const allPairingData = pairingSheet.getDataRange().getValues();
    const playersData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 4).getValues();
    const standingsArray = calculateStandingsFast(allPairingData, playersData);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á matchHistory
    const matchHistory = {};
    allPairingData.slice(1).forEach(row => {
      const p1 = row[2], p2 = row[8];
      if (!p1 || !p2 || p1 === '' || p2 === '' || p2 === 'BYE' || p1 === 'BYE') return;
      if (!matchHistory[p1]) matchHistory[p1] = [];
      if (!matchHistory[p2]) matchHistory[p2] = [];
      matchHistory[p1].push(p2);
      matchHistory[p2].push(p1);
    });
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á playerBrackets
    const activePlayers = standingsArray.filter(player => player.status !== 'DROPPED' && player.id);
    const playerBrackets = {};
    activePlayers.forEach(player => {
      const points = player.points;
      if (!playerBrackets[points]) playerBrackets[points] = [];
      playerBrackets[points].push(player);
    });
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache
    try {
      updateBucketCache(standingsArray, new Set(), {});
    } catch (error) {
      console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache:', error);
    }
    
    SpreadsheetApp.getUi().alert(
      '‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket Cache ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ${standingsArray.length} ‡∏Ñ‡∏ô\n\n` +
      `‚Ä¢ Standings: ${standingsArray.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n` +
      `‚Ä¢ MatchHistory: ${Object.keys(matchHistory).length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n` +
      `‚Ä¢ PlayerBrackets: ${Object.keys(playerBrackets).length} ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache ‡πÅ‡∏ö‡∏ö manual:', error);
    SpreadsheetApp.getUi().alert(
      '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
      `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket Cache ‡πÑ‡∏î‡πâ\n\n‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
}

// ‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache
function updateBucketCache(standings, matchHistory, playerBrackets) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const bucketSheet = ss.getSheetByName('Bucket');
    
    if (!bucketSheet) {
      console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Bucket - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cache');
      return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ standings ‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!Array.isArray(standings)) {
      console.log('‚ö†Ô∏è standings ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache');
      return;
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standings
    const bucketData = standings.map(player => [
      player.id,           // Player_ID
      player.name,         // Player_Name
      player.points,       // Points
      player.rank,        // Rank
      player.status,      // Status
      new Date()          // Last_Updated
    ]);
    
    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Bucket
    if (bucketData.length > 0) {
      bucketSheet.getRange(2, 1, bucketData.length, 6).setValues(bucketData);
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï MatchHistory (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå G) - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ matchHistory ‡πÄ‡∏õ‡πá‡∏ô object ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (matchHistory && typeof matchHistory === 'object') {
      bucketSheet.getRange(1, 7).setValue('MATCH_HISTORY');
      bucketSheet.getRange(2, 7).setValue(JSON.stringify(matchHistory));
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï PlayerBrackets (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå H) - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ playerBrackets ‡πÄ‡∏õ‡πá‡∏ô object ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (playerBrackets && typeof playerBrackets === 'object') {
      bucketSheet.getRange(1, 8).setValue('PLAYER_BRACKETS');
      bucketSheet.getRange(2, 8).setValue(JSON.stringify(playerBrackets));
    }
    
    console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache:', error);
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö Bucket
  }
}

// ‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á Bucket cache
function clearBucketCache() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const bucketSheet = ss.getSheetByName('Bucket');
    
    if (bucketSheet) {
      bucketSheet.clearContents();
      bucketSheet.clearFormats();
      console.log('‚úÖ ‡∏•‡πâ‡∏≤‡∏á Bucket cache ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    }
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á Bucket cache:', error);
  }
}

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

function getPlayerNameById(id) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const playersSheet = ss.getSheetByName('Players');
  const players = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 4).getValues();
  for (let i = 0; i < players.length; i++) {
    if (players[i][0] === id) return players[i][1];
  }
  return '';
}

function addCheckboxes(sheet, rowCount) {
  const startRow = sheet.getLastRow() - rowCount + 1;
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ‡∏Ñ‡∏π‡πà: E=Win P1, F=Draw, G=Win P2, H=Double Loss (0:0)
  sheet.getRange(startRow, 5, rowCount, 4).insertCheckboxes();
  
  // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå - ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
  // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  for (let i = startRow; i < startRow + rowCount; i++) {
    sheet.setRowHeight(i, 35);
  }
}

// ‚ö° ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô formatPairingData ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô - ‡πÉ‡∏ä‡πâ formatPairingComplete ‡πÅ‡∏ó‡∏ô
// function formatPairingData(sheet, startRow, rowCount) {
//   // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö formatPairingComplete
// }

// ‚ö° ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô updateStandings ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
// function updateStandings() {

function updateStandings() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const standingSheet = ss.getSheetByName('Standing');
  const playersSheet = ss.getSheetByName('Players');
  const bucketSheet = ss.getSheetByName('Bucket');
  
  // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  const allPairingData = pairingSheet.getDataRange().getValues();
  const playersData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 4).getValues();
  const dropList = pairingSheet.getRange('M2:M').getValues().flat().filter(name => name);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á dropSet
  const dropSet = new Set(dropList.map(x => x.trim()));
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ dropSet ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  if (!dropSet || !(dropSet instanceof Set)) {
    console.log('‚ö†Ô∏è dropSet ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà');
    dropSet = new Set(dropList.map(x => x.trim()));
  }
  
  // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì standings ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache
  const standingsArray = calculateStandingsFast(allPairingData, playersData);
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache
  if (bucketSheet) {
    try {
      const bucketData = standingsArray.map(player => [
        player.id,           // Player_ID
        player.name,         // Player_Name
        player.points,       // Points
        player.rank,        // Rank
        player.status,      // Status
        new Date()          // Last_Updated
      ]);
      
      if (bucketData.length > 0) {
        bucketSheet.getRange(2, 1, bucketData.length, 6).setValues(bucketData);
      }
      
      console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache ‡πÉ‡∏ô updateStandings');
    } catch (error) {
      console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache:', error);
    }
  }
  
  // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏™‡∏£‡πâ‡∏≤‡∏á player lookup map
  const allPlayers = {};
  playersData.forEach(row => {
    if (row[0] && row[1]) {
      allPlayers[row[0]] = { name: row[1], trId: row[2] || '', played: 0, win: 0, draw: 0, loss: 0 };
    }
  });
  
  // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÉ‡∏ä‡πâ batch processing ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏µ‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
  const standings = {};
  const opponentHistory = {};
  
  allPairingData.slice(1).forEach(row => {
    const p1_id = row[2]; // P1_ID
    const p2_id = row[8]; // P2_ID
    const p1_name = row[3]; // PLAYER 1
    const p2_name = row[9]; // PLAYER 2
    const result = row[10]; // RESULT
    
    if (p1_id && p2_id && result) {
      // Initialize players if not exists
      if (!standings[p1_id]) standings[p1_id] = { name: p1_name, played: 0, win: 0, draw: 0, loss: 0 };
      if (!opponentHistory[p1_id]) opponentHistory[p1_id] = [];
      
      if (p2_id === 'BYE') {
        standings[p1_id].played++;
        standings[p1_id].win++;
      } else {
        if (!standings[p2_id]) standings[p2_id] = { name: p2_name, played: 0, win: 0, draw: 0, loss: 0 };
        if (!opponentHistory[p2_id]) opponentHistory[p2_id] = [];
        
        opponentHistory[p1_id].push(p2_id);
        opponentHistory[p2_id].push(p1_id);
        
        standings[p1_id].played++;
        standings[p2_id].played++;

        if (result === '1:0') {
          standings[p1_id].win++;
          standings[p2_id].loss++;
        } else if (result === '0:1') {
          standings[p1_id].loss++;
          standings[p2_id].win++;
        } else if (result === '1:1') {
          standings[p1_id].draw++;
          standings[p2_id].draw++;
        } else if (result === '0:0') {
          standings[p1_id].loss++;
          standings[p2_id].loss++;
        }
      }
    }
  });
  
  // Calculate OW% (Opponent's Win Percentage)
  const calculateOW = (playerId) => {
    const opponents = opponentHistory[playerId] || [];
    if (opponents.length === 0) return 0;
    
    let totalOpponentWins = 0;
    let totalOpponentGames = 0;

    opponents.forEach(opponentId => {
      const opponentStats = standings[opponentId];
      if (opponentStats) {
        totalOpponentWins += opponentStats.win;
        totalOpponentGames += opponentStats.played;
      }
    });
    
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OW% - ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 100%
    if (totalOpponentGames > 0) {
      const owRate = Math.min(100, Math.round((totalOpponentWins / totalOpponentGames) * 100));
      console.log(`OW calculation for ${playerId}: ${totalOpponentWins} wins / ${totalOpponentGames} games = ${owRate}%`);
      return owRate;
    }
    return 0;
  };
  
  // Calculate Head-to-Head (H2H) score
  const calculateH2H = (playerId, opponentId) => {
    let row = 2;
    
    while (pairingSheet.getRange(row, 1).getValue() !== '') {
      const p1_id = pairingSheet.getRange(row, 3).getValue();
      const p2_id = pairingSheet.getRange(row, 9).getValue();
      const result = pairingSheet.getRange(row, 11).getValue();
      
      if ((p1_id === playerId && p2_id === opponentId) || (p1_id === opponentId && p2_id === playerId)) {
        if (result === '1:0') {
          return p1_id === playerId ? 1 : -1; // ‡πÉ‡∏Ñ‡∏£‡∏ä‡∏ô‡∏∞
        } else if (result === '0:1') {
          return p1_id === playerId ? -1 : 1; // ‡πÉ‡∏Ñ‡∏£‡∏ä‡∏ô‡∏∞
        } else if (result === '1:1') {
          return 0; // ‡πÄ‡∏™‡∏°‡∏≠
        }
        break; // Found the match, no need to continue
      }
      row++;
    }
    
    return 0; // ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
  };
  
  // Merge standings with all players (including those who haven't played yet)
  const mergedStandings = { ...allPlayers, ...standings };
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TR_ID ‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó Players
  const playerTrIdMap = {};
  playersData.forEach(row => {
    if (row[0] && row[2]) { // Player_id (A) ‡πÅ‡∏•‡∏∞ TR_ID (C)
      playerTrIdMap[row[0]] = row[2];
    }
  });
  
  // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache
  if (bucketSheet) {
    try {
      updateBucketCache(mergedStandings, dropSet, playerTrIdMap);
    } catch (error) {
      console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache:', error);
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á dropSet ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      const newDropSet = new Set(dropList.map(x => x.trim()));
      updateBucketCache(mergedStandings, newDropSet, playerTrIdMap);
    }
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° TR_ID ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö standings (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
  Object.keys(mergedStandings).forEach(playerId => {
    if (playerTrIdMap[playerId] && !mergedStandings[playerId].trId) {
      mergedStandings[playerId].trId = playerTrIdMap[playerId];
    }
  });
  
  // ‡πÅ‡∏¢‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà drop ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà drop
  const activePlayers = [];
  const droppedPlayers = [];
  
  Object.entries(mergedStandings).forEach(([player_id, stats]) => {
    const points = stats.win * 3 + stats.draw;
    
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Win Rate - ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 100%
    let winRate = 0;
    if (stats.played > 0) {
      winRate = Math.min(100, Math.round((stats.win / stats.played) * 100));
    }
    
    const owRate = calculateOW(player_id);
    
    // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    console.log(`Player: ${stats.name}, Played: ${stats.played}, Win: ${stats.win}, Draw: ${stats.draw}, Loss: ${stats.loss}, Points: ${points}, WinRate: ${winRate}%, OW: ${owRate}%`);
    
    const playerData = [
      0, // Rank (will be filled later)
      player_id,
      stats.name,
      stats.trId || '', // TR_ID
      stats.played,
      stats.win,
      stats.draw,
      parseInt(stats.loss) || 0, // Loss - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
      parseInt(points) || 0, // Points - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
      winRate + '%',
      owRate + '%',
      '' // H2H (will be filled later)
    ];
    
    // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö playerData
    console.log(`PlayerData for ${stats.name}:`, playerData);
    
    if (dropSet.has(stats.name) || dropSet.has(player_id)) {
      droppedPlayers.push(playerData);
    } else {
      activePlayers.push(playerData);
    }
  });
  
  // Sort active players by points (descending), then win rate (descending), then OW% (descending)
  activePlayers.sort((a, b) => {
    if (b[8] !== a[8]) return b[8] - a[8]; // Points (index 8)
    if (parseInt(b[9]) !== parseInt(a[9])) return parseInt(b[9]) - parseInt(a[9]); // Win Rate (index 9)
    if (parseInt(b[10]) !== parseInt(a[10])) return parseInt(b[10]) - parseInt(a[10]); // OW% (index 10)
    return a[2].localeCompare(b[2]); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
  });
  
  // Sort dropped players by points (descending) - ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î
  droppedPlayers.sort((a, b) => b[8] - a[8]); // Sort by Points (index 8)
  
  // ‡∏£‡∏ß‡∏° active players ‡πÅ‡∏•‡∏∞ dropped players
  let finalStandingsArray = [...activePlayers, ...droppedPlayers];
  

  
  // Add H2H scores for tied players (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ active players)
  for (let i = 0; i < activePlayers.length; i++) {
    const currentPlayer = activePlayers[i];
    const currentPoints = currentPlayer[8]; // Points (index 8)
    const currentWinRate = parseInt(currentPlayer[9]); // Win Rate (index 9)
    const currentOW = parseInt(currentPlayer[10]); // OW% (index 10)
    
    // Find players with same points, win rate, and OW% (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ active players)
    const tiedPlayers = activePlayers.filter((player, index) => 
      index !== i && 
      player[8] === currentPoints && 
      parseInt(player[9]) === currentWinRate && 
      parseInt(player[10]) === currentOW
    );
    
    if (tiedPlayers.length > 0) {
      // Calculate H2H against tied players
      let h2hInfo = "";
      for (const tiedPlayer of tiedPlayers) {
        const h2h = calculateH2H(currentPlayer[1], tiedPlayer[1]);
        if (h2h === 1) {
          h2hInfo = `W vs ${tiedPlayer[2]}`; // W = Win
          break;
        } else if (h2h === -1) {
          h2hInfo = `L vs ${tiedPlayer[2]}`; // L = Loss
          break;
        } else if (h2h === 0) {
          h2hInfo = `D vs ${tiedPlayer[2]}`; // D = Draw
          break;
        }
      }
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏• H2H ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠
      if (h2hInfo === "") {
        h2hInfo = `Tied with ${tiedPlayers.length} player(s)`;
      }
      
      currentPlayer[11] = h2hInfo; // H2H ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô index 11
    } else {
      currentPlayer[11] = ""; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
    }
  }
  
  // Re-sort active players with H2H as tie-breaker
  activePlayers.sort((a, b) => {
    if (b[8] !== a[8]) return b[8] - a[8]; // Points (index 8)
    if (parseInt(b[9]) !== parseInt(a[9])) return parseInt(b[9]) - parseInt(a[9]); // Win Rate (index 9)
    if (parseInt(b[10]) !== parseInt(a[10])) return parseInt(b[10]) - parseInt(a[10]); // OW% (index 10)
    return a[2].localeCompare(b[2]); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
  });
  
  // ‡∏£‡∏ß‡∏° active players ‡πÅ‡∏•‡∏∞ dropped players ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏´‡∏•‡∏±‡∏á sort)
  finalStandingsArray = [...activePlayers, ...droppedPlayers];
  
  // Add ranks ‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≤‡∏¢ DROP - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏£‡πà‡∏ß‡∏°
  let rankCounter = 1;
  let currentRank = 1;
  
  for (let i = 0; i < finalStandingsArray.length; i++) {
    const row = finalStandingsArray[i];
    
    if (i >= activePlayers.length) {
      // Dropped players - ‡πÉ‡∏ä‡πâ‡∏õ‡πâ‡∏≤‡∏¢ DROP
      row[0] = 'DROP';
    } else {
      // Active players - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏£‡πà‡∏ß‡∏°
      if (i === 0) {
        // ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏£‡∏Å
        row[0] = currentRank;
      } else {
        const prevRow = finalStandingsArray[i - 1];
        const prevPoints = prevRow[8]; // Points (index 8)
        const prevWinRate = parseInt(prevRow[9]); // Win Rate (index 9)
        const prevOW = parseInt(prevRow[10]); // OW% (index 10)
        
        const currentPoints = row[8]; // Points (index 8)
        const currentWinRate = parseInt(row[9]); // Win Rate (index 9)
        const currentOW = parseInt(row[10]); // OW% (index 10)
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ Points, Win Rate ‡πÅ‡∏•‡∏∞ OW% ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å)
        if (currentPoints === prevPoints && 
            currentWinRate === prevWinRate &&
            currentOW === prevOW) {
          // ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏£‡πà‡∏ß‡∏°
          row[0] = currentRank;
        } else {
          // ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
          currentRank = rankCounter;
          row[0] = currentRank;
        }
      }
      rankCounter++;
    }
  }
  
  // Clear existing data in Standing sheet
  standingSheet.clearContents();
  
  // Add headers
  const headers = ['Rank', 'Player ID', 'Player Name', 'TR_ID', 'Played', 'Win', 'Draw', 'Loss', 'Points', 'Win Rate', 'OW%', 'H2H'];
  standingSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  
  // Add data
  if (finalStandingsArray.length > 0) {
    // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
    console.log('Final finalStandingsArray:', finalStandingsArray);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Points ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    finalStandingsArray.forEach((row, index) => {
      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Points ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
      if (typeof row[8] === 'string') {
        if (row[8].includes('%')) {
          // ‡∏ñ‡πâ‡∏≤ Points ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ó‡∏µ‡πà‡∏°‡∏µ % ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
          row[8] = parseInt(row[8].replace('%', '')) || 0;
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡∏≠‡∏∑‡πà‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
          row[8] = parseInt(row[8]) || 0;
        }
        console.log(`Fixed Points for row ${index}: ${row[8]}`);
      }
      
      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Loss ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
      if (typeof row[7] === 'number' && row[7] % 1 !== 0) {
        row[7] = parseInt(row[7]) || 0;
        console.log(`Fixed Loss for row ${index}: ${row[7]}`);
      }
    });
    
    standingSheet.getRange(2, 1, finalStandingsArray.length, 12).setValues(finalStandingsArray);
  }
  
  // Style the table with improved formatting
  const headerRange = standingSheet.getRange(1, 1, 1, 12);
  headerRange.setBackground('#6366f1'); // Indigo background
  headerRange.setFontColor('#ffffff'); // White text
  headerRange.setFontWeight('bold');
  headerRange.setFontSize(12);
  headerRange.setHorizontalAlignment('center');
  headerRange.setVerticalAlignment('middle');
  headerRange.setBorder(true, true, true, true, true, true, '#4f46e5', SpreadsheetApp.BorderStyle.SOLID);
  
  if (finalStandingsArray.length > 0) {
    const dataRange = standingSheet.getRange(2, 1, finalStandingsArray.length, 12);
    dataRange.setHorizontalAlignment('center');
    dataRange.setVerticalAlignment('middle');
    dataRange.setFontSize(11);
    
    // Left align player names
    standingSheet.getRange(2, 3, finalStandingsArray.length, 1).setHorizontalAlignment('left');
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Loss ‡πÅ‡∏•‡∏∞ Points ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    standingSheet.getRange(2, 8, finalStandingsArray.length, 1).setNumberFormat('0'); // Loss - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
    standingSheet.getRange(2, 9, finalStandingsArray.length, 1).setNumberFormat('0'); // Points - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
    
    // Add alternating row colors for better readability
    finalStandingsArray.forEach((_, index) => {
      const rowRange = standingSheet.getRange(2 + index, 1, 1, 12);
      
      if (index >= activePlayers.length) {
        // Dropped players - ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô
        rowRange.setBackground('#f3f4f6');
        rowRange.setFontColor('#6b7280'); // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
        rowRange.setFontStyle('italic'); // ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏µ‡∏¢‡∏á
      } else {
        // Active players - ‡∏™‡∏µ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß
        rowRange.setBackground(index % 2 === 0 ? '#f3e8ff' : '#f0f9ff'); // Purple and blue alternating
      }
    });

    // Add borders
    dataRange.setBorder(true, true, true, true, true, true, '#e2e8f0', SpreadsheetApp.BorderStyle.SOLID);
    
    // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏£‡πà‡∏ß‡∏°
    // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏© - ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  }
  
  // Set column widths for better readability
  standingSheet.setColumnWidth(1, 60);   // Rank
  standingSheet.setColumnWidth(2, 100);  // Player ID
  standingSheet.setColumnWidth(3, 200);  // Player Name
  standingSheet.setColumnWidth(4, 100);  // TR_ID
  standingSheet.setColumnWidth(5, 80);   // Played
  standingSheet.setColumnWidth(6, 60);   // Win
  standingSheet.setColumnWidth(7, 60);   // Draw
  standingSheet.setColumnWidth(8, 60);   // Loss
  standingSheet.setColumnWidth(9, 80);   // Points
  standingSheet.setColumnWidth(10, 100); // Win Rate
  standingSheet.setColumnWidth(11, 80);  // OW%
  standingSheet.setColumnWidth(12, 80);  // H2H
  
  // ‡πÉ‡∏ä‡πâ Hide Standing controls ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Paring ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Standing)
}



function removeStandingsTable() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const standingSheet = ss.getSheetByName('Standing');
  
  const response = SpreadsheetApp.getUi().alert(
    '‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á Standings',
    '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Standing ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ',
    SpreadsheetApp.getUi().ButtonSet.YES_NO
  );
  
  if (response === SpreadsheetApp.getUi().Button.YES) {
  standingSheet.clearContents();
    SpreadsheetApp.getUi().alert('‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Standing ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
  }
}

function formatPairingSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('Pairing');
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
  sheet.setColumnWidth(1, 60);   // ROUND
  sheet.setColumnWidth(2, 60);   // TABLE
  sheet.setColumnWidth(3, 80);   // P1_ID
  sheet.setColumnWidth(4, 150);  // PLAYER 1
  sheet.setColumnWidth(5, 80);   // WIN_P1
  sheet.setColumnWidth(6, 80);   // DRAW
  sheet.setColumnWidth(7, 80);   // WIN_P2
  sheet.setColumnWidth(8, 80);   // Double Loss
  sheet.setColumnWidth(9, 80);   // P2_ID
  sheet.setColumnWidth(10, 150); // PLAYER 2
  sheet.setColumnWidth(11, 80);  // RESULT
  sheet.setColumnWidth(12, 80);  // STATUS
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  const headerRange = sheet.getRange(1, 1, 1, 12);
  headerRange.setBackground('#f3f4f6');
  headerRange.setFontWeight('bold');
  headerRange.setHorizontalAlignment('center');
  headerRange.setVerticalAlignment('middle');
  headerRange.setBorder(true, true, true, true, true, true, '#d1d5db', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå checkbox
  const checkboxRange = sheet.getRange(2, 5, sheet.getLastRow() - 1, 4);
  checkboxRange.setHorizontalAlignment('center');
  checkboxRange.setVerticalAlignment('middle');
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  const resultRange = sheet.getRange(2, 11, sheet.getLastRow() - 1, 2);
  resultRange.setHorizontalAlignment('center');
  resultRange.setVerticalAlignment('middle');
  resultRange.setFontWeight('bold');
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  const playerNameRange = sheet.getRange(2, 4, sheet.getLastRow() - 1, 1);
  playerNameRange.setHorizontalAlignment('left');
  playerNameRange.setVerticalAlignment('middle');
  
  const player2NameRange = sheet.getRange(2, 10, sheet.getLastRow() - 1, 1);
  player2NameRange.setHorizontalAlignment('left');
  player2NameRange.setVerticalAlignment('middle');
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° border ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const dataRange = sheet.getRange(2, 1, sheet.getLastRow() - 1, 12);
  dataRange.setBorder(true, true, true, true, true, true, '#e5e7eb', SpreadsheetApp.BorderStyle.SOLID);

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£ wrap text ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  playerNameRange.setWrap(true);
  player2NameRange.setWrap(true);
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£
  updateStandings();
  completePairingFormat();
  
  SpreadsheetApp.getUi().alert('‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏µ‡∏ó Pairing ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
}

function improveVisualFormatting() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('Pairing');
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö checkbox ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
  const checkboxRange = sheet.getRange(2, 5, sheet.getLastRow() - 1, 4);
  checkboxRange.setBackground('#f9fafb');
  checkboxRange.setBorder(true, true, true, true, true, true, '#d1d5db', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î
  const resultRange = sheet.getRange(2, 11, sheet.getLastRow() - 1, 1);
  resultRange.setBackground('#fef3c7'); // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô
  resultRange.setFontWeight('bold');
  resultRange.setFontSize(12);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const statusRange = sheet.getRange(2, 12, sheet.getLastRow() - 1, 1);
  statusRange.setBackground('#dbeafe'); // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
  statusRange.setFontWeight('bold');
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  const player1Range = sheet.getRange(2, 4, sheet.getLastRow() - 1, 1);
  const player2Range = sheet.getRange(2, 10, sheet.getLastRow() - 1, 1);
  
  player1Range.setBackground('#f0fdf4'); // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô
  player2Range.setBackground('#fef2f2'); // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏≠‡πà‡∏≠‡∏ô
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ID
  const idRange = sheet.getRange(2, 3, sheet.getLastRow() - 1, 1);
  const id2Range = sheet.getRange(2, 9, sheet.getLastRow() - 1, 1);
  
  idRange.setBackground('#f3e8ff'); // ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡∏≠‡πà‡∏≠‡∏ô
  id2Range.setBackground('#f3e8ff');
  idRange.setFontWeight('bold');
  id2Range.setFontWeight('bold');
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£
  updateStandings();
  completePairingFormat();
  
  SpreadsheetApp.getUi().alert('‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
}

function fixTextOverlap() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('Pairing');
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  sheet.setColumnWidth(1, 70);   // ROUND
  sheet.setColumnWidth(2, 70);   // TABLE
  sheet.setColumnWidth(3, 90);   // P1_ID
  sheet.setColumnWidth(4, 180);  // PLAYER 1 (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á)
  sheet.setColumnWidth(5, 90);   // WIN_P1
  sheet.setColumnWidth(6, 90);   // DRAW
  sheet.setColumnWidth(7, 90);   // WIN_P2
  sheet.setColumnWidth(8, 90);   // Double Loss
  sheet.setColumnWidth(9, 90);   // P2_ID
  sheet.setColumnWidth(10, 180); // PLAYER 2 (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á)
  sheet.setColumnWidth(11, 100); // RESULT (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á)
  sheet.setColumnWidth(12, 90);  // STATUS
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô
  const player1Range = sheet.getRange(2, 4, sheet.getLastRow() - 1, 1);
  const player2Range = sheet.getRange(2, 10, sheet.getLastRow() - 1, 1);
  
  player1Range.setHorizontalAlignment('left');
  player1Range.setVerticalAlignment('middle');
  player1Range.setWrap(true);
  player1Range.setFontSize(11);
  
  player2Range.setHorizontalAlignment('left');
  player2Range.setVerticalAlignment('middle');
  player2Range.setWrap(true);
  player2Range.setFontSize(11);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  const resultRange = sheet.getRange(2, 11, sheet.getLastRow() - 1, 1);
  resultRange.setHorizontalAlignment('center');
  resultRange.setVerticalAlignment('middle');
  resultRange.setFontWeight('bold');
  resultRange.setFontSize(12);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö checkbox ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  const checkboxRange = sheet.getRange(2, 5, sheet.getLastRow() - 1, 4);
  checkboxRange.setHorizontalAlignment('center');
  checkboxRange.setVerticalAlignment('middle');
  checkboxRange.setBackground('#f8fafc');
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° border ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  const dataRange = sheet.getRange(2, 1, sheet.getLastRow() - 1, 12);
  dataRange.setBorder(true, true, true, true, true, true, '#e2e8f0', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  sheet.setRowHeights(2, sheet.getLastRow(), 25);
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£
  updateStandings();
  completePairingFormat();
  
  SpreadsheetApp.getUi().alert('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
}








function undoLastPairing() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  const roundsData = pairingSheet.getRange('A2:A').getValues().flat();
  const rounds = roundsData.filter(r => r && r !== '' && !isNaN(r)).map(r => parseInt(r));
  
  if (rounds.length === 0) {
    SpreadsheetApp.getUi().alert('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≠‡∏ö‡πÉ‡∏î‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≠‡∏ô');
    return;
  }

  const lastRound = Math.max(...rounds);
  const data = pairingSheet.getDataRange().getValues();

  // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå (‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
  const rowsToClear = [];
  for (let i = 1; i < data.length; i++) {
    const roundValue = data[i][0];
    if (roundValue && roundValue !== '' && !isNaN(roundValue) && parseInt(roundValue) === lastRound) {
      rowsToClear.push(i + 1); // ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà i+1 (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ i ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0)
    }
  }

  if (rowsToClear.length === 0) {
    SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + lastRound);
    return;
  }

  // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
  const response = SpreadsheetApp.getUi().alert(
    '‚Ü©Ô∏è ‡∏¢‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î',
    '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + lastRound + ' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n' +
    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö: ' + rowsToClear.length + ' ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n' +
    '‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ',
    SpreadsheetApp.getUi().ButtonSet.YES_NO
  );

  if (response !== SpreadsheetApp.getUi().Button.YES) {
    return;
  }

  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß)
  rowsToClear.forEach(rowNum => {
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A ‡∏ñ‡∏∂‡∏á M (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô header)
    pairingSheet.getRange(rowNum, 1, 1, 13).clearContent();
    
    // ‡∏•‡∏ö checkbox ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå E, F, G, H
    try {
      pairingSheet.getRange(rowNum, 5, 1, 4).removeCheckboxes();
    } catch (e) {
      // ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏°‡∏µ checkbox) ‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
    }
    
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const rowRange = pairingSheet.getRange(rowNum, 1, 1, 13);
    rowRange.clearFormat(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏µ, ‡∏Ç‡∏≠‡∏ö, ‡∏ü‡∏≠‡∏ô‡∏ï‡πå)
  });

  SpreadsheetApp.getUi().alert('‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + lastRound + ' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£
  updateStandings();
  completePairingFormat();
}

function fixIncompletePairing() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  // ‡∏´‡∏≤‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (P2_ID ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
  const data = pairingSheet.getDataRange().getValues();
  let problematicRounds = new Set();
  let problematicDetails = [];
  
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const round = row[0];
    const table = row[1];
    const p1Name = row[3];
    const p2Id = row[8]; // P2_ID column (I)
    const p2Name = row[9]; // PLAYER 2 column (J)
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤: P2_ID ‡∏ß‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠ P2_ID ‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
    if (round && p2Name && (!p2Id || p2Id === '' || p2Id.toString().length < 2)) {
      problematicRounds.add(round);
      problematicDetails.push('‡∏£‡∏≠‡∏ö ' + round + ' ‡πÇ‡∏ï‡πä‡∏∞ ' + table + ': ' + p1Name + ' vs ' + p2Name + ' (P2_ID: ' + (p2Id || '‡∏ß‡πà‡∏≤‡∏á') + ')');
    }
  }
  
  if (problematicRounds.size === 0) {
    SpreadsheetApp.getUi().alert('‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤');
    return;
  }
  
  const roundList = Array.from(problematicRounds).sort((a, b) => a - b).join(', ');
  
  const response = SpreadsheetApp.getUi().alert(
    'üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
    '‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏£‡∏≠‡∏ö: ' + roundList + '\n\n' +
    '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤:\n' + problematicDetails.join('\n') + '\n\n' +
    '‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n' +
    '‚Ä¢ ‡πÉ‡∏ä‡πà = ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡∏°‡πà\n' +
    '‚Ä¢ ‡πÑ‡∏°‡πà = ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç\n\n' +
    '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
    SpreadsheetApp.getUi().ButtonSet.YES_NO
  );
  
  if (response === SpreadsheetApp.getUi().Button.YES) {
    // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    const rowsToKeep = data.filter((row, i) => {
      if (i === 0) return true; // keep header
      return !problematicRounds.has(row[0]); // keep rows not in problematic rounds
    });
    
  pairingSheet.clearContents();
    pairingSheet.getRange(1, 1, rowsToKeep.length, data[0].length).setValues(rowsToKeep);
    
    // ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    problematicRounds.forEach(round => {
      pairNextRound();
    });
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    updateStandings();
    smartResizeAllSheetsSilent();
    
    SpreadsheetApp.getUi().alert(
      '‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö ' + roundList + ' ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n' +
      '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'
    );
  } else {
    SpreadsheetApp.getUi().alert('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç\n\n‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏î‡πÜ');
  }
}

function fixMissingPlayerIDs() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ P2_ID ‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏°‡∏µ PLAYER 2
  const data = pairingSheet.getDataRange().getValues();
  let fixedCount = 0;
  let fixedDetails = [];
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠ -> ID ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  const playerMap = new Map();
  const playerData = pairingSheet.getRange(2, 1, pairingSheet.getLastRow() - 1, 2).getValues();
  playerData.forEach(row => {
    if (row[0] && row[1]) {
      playerMap.set(row[1].toString().trim(), row[0]);
    }
  });
  
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const round = row[0];
    const table = row[1];
    const p1Name = row[3];
    const p2Id = row[8]; // P2_ID column (I)
    const p2Name = row[9]; // PLAYER 2 column (J)
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤: P2_ID ‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏°‡∏µ PLAYER 2
    if (round && p2Name && (!p2Id || p2Id === '')) {
      const correctP2Id = playerMap.get(p2Name.toString().trim());
      if (correctP2Id) {
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç P2_ID
        pairingSheet.getRange(i + 1, 9).setValue(correctP2Id); // Column I (P2_ID)
        fixedCount++;
        fixedDetails.push('‡∏£‡∏≠‡∏ö ' + round + ' ‡πÇ‡∏ï‡πä‡∏∞ ' + table + ': ' + p1Name + ' vs ' + p2Name + ' (P2_ID: ' + correctP2Id + ')');
      }
    }
  }
  
  if (fixedCount === 0) {
    SpreadsheetApp.getUi().alert('‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö P2_ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
    return;
  }
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£
  updateStandings();
  completePairingFormat();
  
  SpreadsheetApp.getUi().alert(
    '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç P2_ID ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ' + fixedCount + ' ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n\n' +
    fixedDetails.join('\n') + '\n\n' +
    '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'
  );
}

function doGet(e) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // Swiss Tournament Data
  const pairingSheet = ss.getSheetByName('Pairing');
  const playersSheet = ss.getSheetByName('Players');
  const standingSheet = ss.getSheetByName('Standing');
  
  // Round Robin Tournament Data
  const roundRobinSheet = ss.getSheetByName('Round Robin');
  const roundRobinStandingSheet = ss.getSheetByName('Round Robin Standing');
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Swiss Tournament
  const pairingData = pairingSheet.getDataRange().getValues();
  const playersData = playersSheet.getDataRange().getValues();
  const standingsData = standingSheet.getLastRow() > 1 ? standingSheet.getRange(1, 1, standingSheet.getLastRow(), standingSheet.getLastColumn()).getValues() : [];
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Round Robin Tournament
  const roundRobinData = roundRobinSheet.getLastRow() > 1 ? roundRobinSheet.getDataRange().getValues() : [];
  const roundRobinStandingData = roundRobinStandingSheet.getLastRow() > 1 ? roundRobinStandingSheet.getDataRange().getValues() : [];
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Hide Standing
  const hideStandingStatus = checkHideStandingStatus();

  return ContentService.createTextOutput(
    JSON.stringify({
      // Swiss Tournament
      pairing: pairingData,
      players: playersData,
      standings: standingsData,
      
      // Round Robin Tournament
      roundRobin: roundRobinData,
      roundRobinStandings: roundRobinStandingData,
      
      // Hide Standing Status
      hideStanding: hideStandingStatus
    })
  ).setMimeType(ContentService.MimeType.JSON);
}

function validatePairing() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const playersSheet = ss.getSheetByName('Players');
  
  const pairingData = pairingSheet.getDataRange().getValues();
  const playersData = playersSheet.getRange('A2:B').getValues();
  
  const issues = [];
  const matchHistory = {};
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ã‡πâ‡∏≥
  pairingData.slice(1).forEach((row, index) => {
    const p1 = row[2], p2 = row[8]; // P1_ID, P2_ID (index 8)
    const round = row[0];
    
    if (!p1 || !p2 || p2 === 'BYE') return;
    
    const pairKey = p1 + '-' + p2;
    const reverseKey = p2 + '-' + p1;
    
    if (matchHistory[pairKey] || matchHistory[reverseKey]) {
      issues.push('‡∏£‡∏≠‡∏ö ' + round + ': ' + getPlayerNameById(p1) + ' vs ' + getPlayerNameById(p2) + ' (‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ã‡πâ‡∏≥)');
    }
    
    matchHistory[pairKey] = true;
    matchHistory[reverseKey] = true;
  });
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å BYE
  const byeCount = {};
  pairingData.slice(1).forEach(row => {
    const p1 = row[2];
    const p2 = row[8]; // P2_ID ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà index 8
    
    if (p2 === 'BYE' && p1) {
      byeCount[p1] = (byeCount[p1] || 0) + 1;
    }
  });
  
  Object.entries(byeCount).forEach(([playerId, count]) => {
    if (count > 1) {
      issues.push(getPlayerNameById(playerId) + ' ‡πÑ‡∏î‡πâ BYE ' + count + ' ‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
  });
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
  const incompleteMatches = [];
  pairingData.slice(1).forEach((row, index) => {
    const result = row[10]; // Result column
    const p2 = row[8]; // P2_ID ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà index 8
    
    if (p2 !== 'BYE' && (!result || result === '')) {
      incompleteMatches.push('‡πÅ‡∏ñ‡∏ß ' + (index + 2) + ': ' + row[3] + ' vs ' + row[9] + ' (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•)'); // PLAYER 2 ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà index 9
    }
  });
  
  if (incompleteMatches.length > 0) {
    issues.push('‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à: ' + incompleteMatches.length + ' ‡∏Ñ‡∏π‡πà');
  }
  
  return {
    issues: issues,
    incompleteMatches: incompleteMatches,
    byeCount: byeCount
  };
}

function showPairingValidation() {
  const validation = validatePairing();
  
  let message = '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà:\n\n';
  
  if (validation.issues.length === 0) {
    message += '‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà';
  } else {
    message += '‚ö†Ô∏è ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤:\n';
    validation.issues.forEach(issue => {
      message += '‚Ä¢ ' + issue + '\n';
    });
  }
  
  if (validation.incompleteMatches.length > 0) {
    message += '\nüìã ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à: ' + validation.incompleteMatches.length + ' ‡∏Ñ‡∏π‡πà';
  }
  
  SpreadsheetApp.getUi().alert(message);
}

function showPairingStats() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const playersSheet = ss.getSheetByName('Players');
  
  const pairingData = pairingSheet.getDataRange().getValues();
  const playersData = playersSheet.getRange('A2:B').getValues();
  
  // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö
  const rounds = new Set();
  const playerStats = {};
  
  pairingData.slice(1).forEach(row => {
    const round = row[0];
    const p1 = row[2], p2 = row[9];
    const result = row[10];
    
    if (round) rounds.add(round);
    
    if (p1 && p1 !== '') {
      if (!playerStats[p1]) playerStats[p1] = { played: 0, byes: 0, incomplete: 0 };
      playerStats[p1].played++;
      if (p2 === 'BYE') playerStats[p1].byes++;
      if (p2 !== 'BYE' && (!result || result === '')) playerStats[p1].incomplete++;
    }
    
    if (p2 && p2 !== '' && p2 !== 'BYE') {
      if (!playerStats[p2]) playerStats[p2] = { played: 0, byes: 0, incomplete: 0 };
      playerStats[p2].played++;
      if (!result || result === '') playerStats[p2].incomplete++;
    }
  });
  
  const totalRounds = rounds.size;
  const totalPlayers = Object.keys(playerStats).length;
  const activePlayers = Object.values(playerStats).filter(p => p.played > 0).length;
  
      let message = 'üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô\n\n';
  message += 'üéØ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö: ' + totalRounds + '\n';
  message += 'üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ' + totalPlayers + '\n';
  message += 'üèÉ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: ' + activePlayers + '\n\n';
  
  // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  const playerList = Object.entries(playerStats)
    .sort((a, b) => b[1].played - a[1].played)
    .slice(0, 10); // ‡πÅ‡∏™‡∏î‡∏á 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
  
      message += 'üèÜ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:\n';
  playerList.forEach(([playerId, stats], index) => {
    const playerName = getPlayerNameById(playerId);
    message += (index + 1) + '. ' + playerName + ': ' + stats.played + ' ‡πÄ‡∏Å‡∏°';
    if (stats.byes > 0) message += ' (BYE: ' + stats.byes + ')';
          if (stats.incomplete > 0) message += ' ‚ö†Ô∏è';
      message += '\n';
  });
  
  // ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
  const incompleteCount = Object.values(playerStats).reduce((sum, p) => sum + p.incomplete, 0);
  if (incompleteCount > 0) {
    message += '\n‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à: ' + incompleteCount + ' ‡πÄ‡∏Å‡∏°';
  }
  
  SpreadsheetApp.getUi().alert(message);
}

function showTournamentAdvice() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const playersSheet = ss.getSheetByName('Players');
  const standingSheet = ss.getSheetByName('Standing');
  
  const pairingData = pairingSheet.getDataRange().getValues();
  const playersData = playersSheet.getRange('A2:B').getValues();
  
  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
  const rounds = new Set();
  const playerStats = {};
  const incompleteMatches = [];
  
  pairingData.slice(1).forEach(row => {
    const round = row[0];
    const p1 = row[2], p2 = row[9];
    const result = row[10];
    
    if (round) rounds.add(round);
    
    if (p1 && p1 !== '') {
      if (!playerStats[p1]) playerStats[p1] = { played: 0, wins: 0, draws: 0, losses: 0, byes: 0 };
      playerStats[p1].played++;
      if (p2 === 'BYE') playerStats[p1].byes++;
    }
    
    if (p2 && p2 !== '' && p2 !== 'BYE') {
      if (!playerStats[p2]) playerStats[p2] = { played: 0, wins: 0, draws: 0, losses: 0, byes: 0 };
      playerStats[p2].played++;
    }
    
    if (p2 !== 'BYE' && (!result || result === '')) {
      incompleteMatches.push({ round, p1: row[3], p2: row[8] });
    }
  });
  
  const totalRounds = rounds.size;
  const totalPlayers = Object.keys(playerStats).length;
  const activePlayers = Object.values(playerStats).filter(p => p.played > 0).length;
  const incompleteCount = incompleteMatches.length;
  
  let advice = 'üéØ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô\n\n';
  
  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  if (totalRounds === 0) {
    advice += 'üìã ‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å: ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô\n';
  } else if (totalRounds < 3) {
    advice += 'üìã ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + totalRounds + ': ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3-4 ‡∏£‡∏≠‡∏ö\n';
  } else if (totalRounds >= 6) {
    advice += 'üìã ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + totalRounds + ': ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß\n';
  } else {
    advice += 'üìã ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + totalRounds + ': ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£\n';
  }
  
  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  if (totalPlayers < 4) {
    advice += '‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (' + totalPlayers + ' ‡∏Ñ‡∏ô) - ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏Ñ‡∏ô\n';
  } else if (totalPlayers < 8) {
    advice += 'üìä ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ' + totalPlayers + ' ‡∏Ñ‡∏ô - ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ 3-4 ‡∏£‡∏≠‡∏ö\n';
  } else if (totalPlayers < 16) {
    advice += 'üìä ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ' + totalPlayers + ' ‡∏Ñ‡∏ô - ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ 4-5 ‡∏£‡∏≠‡∏ö\n';
  } else {
    advice += 'üìä ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ' + totalPlayers + ' ‡∏Ñ‡∏ô - ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ 5-6 ‡∏£‡∏≠‡∏ö\n';
  }
  
  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
  if (incompleteCount > 0) {
    advice += '\n‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à: ' + incompleteCount + ' ‡∏Ñ‡∏π‡πà\n';
    advice += 'üí° ‡∏Ñ‡∏ß‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ\n';
  }
  
  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å BYE
  const byeCounts = Object.values(playerStats).map(p => p.byes);
  const maxByes = Math.max(...byeCounts);
  if (maxByes > 1) {
    advice += '\n‚ö†Ô∏è ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ BYE ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n';
    advice += 'üí° ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å BYE\n';
  }
  
  // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  if (totalRounds > 0 && incompleteCount === 0) {
    advice += '\n‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ\n';
  } else if (incompleteCount > 0) {
    advice += '\n‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à\n';
  }
  
  // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
  advice += '\nüîß ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:\n';
  advice += '‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ\n';
  advice += '‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤\n';
  advice += '‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞\n';
  
  SpreadsheetApp.getUi().alert(advice);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô debugStandingsUpdate() ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤‡∏ö‡∏±‡∏Ñ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

function recreateStandingsTable() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const standingSheet = ss.getSheetByName('Standing');
  
  const response = SpreadsheetApp.getUi().alert(
    '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Standings ‡πÉ‡∏´‡∏°‡πà',
    '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Standing ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
    SpreadsheetApp.getUi().ButtonSet.YES_NO
  );
  
  if (response === SpreadsheetApp.getUi().Button.YES) {
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
    standingSheet.clearContents();
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
  updateStandings();
    
    SpreadsheetApp.getUi().alert('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Standings ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
  }
}

function clearAllData() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const standingSheet = ss.getSheetByName('Standing');
  const roundRobinSheet = ss.getSheetByName('Round Robin');
  const roundRobinStandingSheet = ss.getSheetByName('Round Robin Standing');
  const playersSheet = ss.getSheetByName('Players');
  const bucketSheet = ss.getSheetByName('Bucket'); // ‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ä‡∏µ‡∏ó Bucket
  
  const response = SpreadsheetApp.getUi().alert(
    'üßπ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
    '‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡∏µ‡∏ó\n\n' +
    '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Players)\n' +
    '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Pairing)\n' +
    '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standings (Standing)\n' +
    '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Round Robin (Round Robin)\n' +
    '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Round Robin Standing (Round Robin Standing)\n' +
    '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bucket (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠, cache)\n' +
    '‚Ä¢ Checkbox ‡πÅ‡∏•‡∏∞ Format ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n\n' +
    '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
    SpreadsheetApp.getUi().ButtonSet.YES_NO
  );
  
  if (response === SpreadsheetApp.getUi().Button.YES) {
    // === ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Players ===
    if (playersSheet) {
      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Players (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô header)
      const playersLastRow = playersSheet.getLastRow();
      if (playersLastRow > 1) {
        const playersDataRange = playersSheet.getRange(2, 1, playersLastRow - 1, playersSheet.getLastColumn());
        playersDataRange.clearContent();
        playersDataRange.clearFormat(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏™‡∏µ
        playersDataRange.removeCheckboxes(); // ‡∏•‡∏ö checkbox
      }
      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      playersSheet.getRange(2, 1, playersSheet.getMaxRows() - 1, playersSheet.getMaxColumns()).clearContent();
      playersSheet.getRange(2, 1, playersSheet.getMaxRows() - 1, playersSheet.getMaxColumns()).clearFormat();
      playersSheet.getRange(2, 1, playersSheet.getMaxRows() - 1, playersSheet.getMaxColumns()).removeCheckboxes();
    }
    
    // === ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Pairing ===
    const lastRow = pairingSheet.getLastRow();
    if (lastRow > 1) {
      const dataRange = pairingSheet.getRange(2, 1, lastRow - 1, pairingSheet.getLastColumn());
      dataRange.clearContent();
      dataRange.clearFormat(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏™‡∏µ
      dataRange.removeCheckboxes(); // ‡∏•‡∏ö checkbox
    }
    
    // === ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Standing ===
    standingSheet.clearContents();
    standingSheet.clearFormats(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏™‡∏µ (‡πÉ‡∏ä‡πâ clearFormats ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sheet object)
    
    // === ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Round Robin ===
    if (roundRobinSheet) {
      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Round Robin (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô header)
      const rrLastRow = roundRobinSheet.getLastRow();
      if (rrLastRow > 1) {
        const rrDataRange = roundRobinSheet.getRange(2, 1, rrLastRow - 1, roundRobinSheet.getLastColumn());
        rrDataRange.clearContent();
        rrDataRange.clearFormat(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏™‡∏µ
        rrDataRange.removeCheckboxes(); // ‡∏•‡∏ö checkbox
      }
      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      roundRobinSheet.getRange(2, 1, roundRobinSheet.getMaxRows() - 1, roundRobinSheet.getMaxColumns()).clearContent();
      roundRobinSheet.getRange(2, 1, roundRobinSheet.getMaxRows() - 1, roundRobinSheet.getMaxColumns()).clearFormat();
      roundRobinSheet.getRange(2, 1, roundRobinSheet.getMaxRows() - 1, roundRobinSheet.getMaxColumns()).removeCheckboxes();
    }
    
    // === ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Round Robin Standing ===
    if (roundRobinStandingSheet) {
      roundRobinStandingSheet.clearContents();
      roundRobinStandingSheet.clearFormats(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏™‡∏µ (‡πÉ‡∏ä‡πâ clearFormats ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sheet object)
    }
    
    // === ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Bucket ===
    if (bucketSheet) {
      // ‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞ cache ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Bucket
      bucketSheet.clearContents();
      bucketSheet.clearFormats();
      console.log('‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Bucket ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞ cache)');
    }
    
    // === ‡∏™‡∏£‡πâ‡∏≤‡∏á header ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó Players ===
    if (playersSheet) {
      const playersHeaders = ['Player_id', 'Name', 'TR_ID', 'Tel'];
      playersSheet.getRange(1, 1, 1, playersHeaders.length).setValues([playersHeaders]);
      
      // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header Players
      const playersHeaderRange = playersSheet.getRange(1, 1, 1, playersHeaders.length);
      playersHeaderRange.setBackground('#f3f4f6');
      playersHeaderRange.setFontWeight('bold');
      playersHeaderRange.setHorizontalAlignment('center');
      playersHeaderRange.setBorder(true, true, true, true, true, true, '#d1d5db', SpreadsheetApp.BorderStyle.SOLID);
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
      playersSheet.setColumnWidth(1, 100); // Player_id
      playersSheet.setColumnWidth(2, 200); // Name
      playersSheet.setColumnWidth(3, 120); // TR_ID
      playersSheet.setColumnWidth(4, 120); // Tel
    }
    
    // === ‡∏™‡∏£‡πâ‡∏≤‡∏á header ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó Pairing ===
    const pairingHeaders = ['ROUND', 'TABLE', 'P1_ID', 'PLAYER 1', 'WIN_P1', 'DRAW', 'WIN_P2', 'Double Loss', 'P2_ID', 'PLAYER 2', 'RESULT', 'STATUS', 'Drop'];
    pairingSheet.getRange(1, 1, 1, pairingHeaders.length).setValues([pairingHeaders]);
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header Pairing
    const pairingHeaderRange = pairingSheet.getRange(1, 1, 1, pairingHeaders.length);
    pairingHeaderRange.setBackground('#f3f4f6');
    pairingHeaderRange.setFontWeight('bold');
    pairingHeaderRange.setHorizontalAlignment('center');
    pairingHeaderRange.setBorder(true, true, true, true, true, true, '#d1d5db', SpreadsheetApp.BorderStyle.SOLID);
    
    // === ‡∏™‡∏£‡πâ‡∏≤‡∏á header ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó Standing ===
    const standingHeaders = ['RANK', 'PLAYER ID', 'PLAYER NAME', 'TR_ID', 'WINS', 'DRAWS', 'LOSSES', 'POINTS', 'WIN RATE', 'OW%', 'H2H'];
    standingSheet.getRange(1, 1, 1, standingHeaders.length).setValues([standingHeaders]);
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header Standing
    const standingHeaderRange = standingSheet.getRange(1, 1, 1, standingHeaders.length);
    standingHeaderRange.setBackground('#34a853');
    standingHeaderRange.setFontColor('white');
    standingHeaderRange.setFontWeight('bold');
    standingHeaderRange.setHorizontalAlignment('center');
    
    // === ‡∏™‡∏£‡πâ‡∏≤‡∏á header ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó Round Robin ===
    if (roundRobinSheet) {
      const rrHeaders = ['ROUND', 'MATCH', 'P1_ID', 'PLAYER 1', 'P1_TR_ID', 'P1_RANK', 'WIN_P1', 'DRAW', 'WIN_P2', 'Double Loss', 'P2_ID', 'PLAYER 2', 'P2_TR_ID', 'P2_RANK', 'RESULT', 'STATUS'];
      roundRobinSheet.getRange(1, 1, 1, rrHeaders.length).setValues([rrHeaders]);
      
      // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header Round Robin
      const rrHeaderRange = roundRobinSheet.getRange(1, 1, 1, rrHeaders.length);
      rrHeaderRange.setBackground('#f3f4f6');
      rrHeaderRange.setFontWeight('bold');
      rrHeaderRange.setHorizontalAlignment('center');
      rrHeaderRange.setBorder(true, true, true, true, true, true, '#d1d5db', SpreadsheetApp.BorderStyle.SOLID);
    }
    
    // === ‡∏™‡∏£‡πâ‡∏≤‡∏á header ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó Round Robin Standing ===
    if (roundRobinStandingSheet) {
      const rrStandingHeaders = ['RANK', 'PLAYER ID', 'PLAYER NAME', 'TR_ID', 'WINS', 'DRAWS', 'LOSSES', 'POINTS', 'WIN RATE', 'OW%', 'H2H'];
      roundRobinStandingSheet.getRange(1, 1, 1, rrStandingHeaders.length).setValues([rrStandingHeaders]);
      
      // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header Round Robin Standing
      const rrStandingHeaderRange = roundRobinStandingSheet.getRange(1, 1, 1, rrStandingHeaders.length);
      rrStandingHeaderRange.setBackground('#34a853');
      rrStandingHeaderRange.setFontColor('white');
      rrStandingHeaderRange.setFontWeight('bold');
      rrStandingHeaderRange.setHorizontalAlignment('center');
    }
    
    SpreadsheetApp.getUi().alert(
      '‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß\n\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Players)\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Pairing)\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standings (Standing)\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Round Robin (Round Robin)\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Round Robin Standing (Round Robin Standing)\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bucket (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠, cache)\n' +
      '‚Ä¢ Checkbox ‡πÅ‡∏•‡∏∞ Format ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n\n' +
      '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà!',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
}

function generatePlayerIDs() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const playersSheet = ss.getSheetByName('Players');
  
  // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
  const data = playersSheet.getDataRange().getValues();
  let playerCount = 0;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Name ‡πÅ‡∏•‡∏∞ Tel ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  for (let i = 1; i < data.length; i++) {
    const name = data[i][1]; // Column B (Name)
    const tel = data[i][3];  // Column D (Tel) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å C ‡πÄ‡∏õ‡πá‡∏ô D
    
    if (name && name.toString().trim() !== '' && tel && tel.toString().trim() !== '') {
      playerCount++;
    }
  }
  
  if (playerCount === 0) {
    SpreadsheetApp.getUi().alert(
      '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô',
      '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Name ‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Tel ‡∏Å‡πà‡∏≠‡∏ô',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    return;
  }
  
  const response = SpreadsheetApp.getUi().alert(
    'üÜî ‡∏™‡∏£‡πâ‡∏≤‡∏á Player ID ‡πÅ‡∏•‡∏∞ TR_ID ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
    '‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ' + playerCount + ' ‡∏Ñ‡∏ô\n\n' +
    'Player ID ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô:\n' +
    '‚Ä¢ P001, P002, P003, ... (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 1-9 ‡∏Ñ‡∏ô)\n' +
    '‚Ä¢ P01, P02, P03, ... (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 10-99 ‡∏Ñ‡∏ô)\n' +
    '‚Ä¢ P1, P2, P3, ... (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 100+ ‡∏Ñ‡∏ô)\n\n' +
    'TR_ID ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô:\n' +
    '‚Ä¢ th + ‡πÄ‡∏•‡∏Ç 8 ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏ä‡πà‡∏ô th12345678)\n\n' +
    '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô: TR_ID_‡∏ä‡∏∑‡πà‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô th34294245_Visthisidh L.)\n\n' +
    '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏µ 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 0957780151)\n\n' +
    '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Player ID ‡πÅ‡∏•‡∏∞ TR_ID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
    SpreadsheetApp.getUi().ButtonSet.YES_NO
  );
  
  if (response === SpreadsheetApp.getUi().Button.YES) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Player ID, TR_ID ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠
    let idCounter = 1;
    const idFormat = playerCount < 10 ? 'P00' : 'P0';
    
    // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    let maxNameLength = 0;
    const playerNames = [];
    
    for (let i = 1; i < data.length; i++) {
      const name = data[i][1]; // Column B (Name)
      const tel = data[i][3];  // Column D (Tel) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å C ‡πÄ‡∏õ‡πá‡∏ô D
      
      if (name && name.toString().trim() !== '' && tel && tel.toString().trim() !== '') {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Player ID
        let playerID;
        if (playerCount < 10) {
          // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 1-9 ‡∏Ñ‡∏ô: P001, P002, P003, ...
          playerID = 'P00' + idCounter;
        } else if (playerCount < 100) {
          // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 10-99 ‡∏Ñ‡∏ô: P01, P02, P03, ...
          playerID = 'P0' + idCounter;
        } else {
          // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 100+ ‡∏Ñ‡∏ô: P1, P2, P3, ...
          playerID = 'P' + idCounter;
        }
        playersSheet.getRange(i + 1, 1).setValue(playerID); // Column A (Player_id)
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á TR_ID (th + ‡πÄ‡∏•‡∏Ç 8 ‡∏´‡∏•‡∏±‡∏Å)
        const trId = 'th' + Math.floor(Math.random() * 90000000 + 10000000); // ‡πÄ‡∏•‡∏Ç 8 ‡∏´‡∏•‡∏±‡∏Å
        playersSheet.getRange(i + 1, 3).setValue(trId); // Column C (TR_ID)
        
        // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠: TR_ID_‡∏ä‡∏∑‡πà‡∏≠
        const formattedName = formatPlayerNameWithTRID(trId, name.toString().trim());
        playersSheet.getRange(i + 1, 2).setValue(formattedName); // Column B (Name)
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        const nameLength = formattedName.length;
        if (nameLength > maxNameLength) {
          maxNameLength = nameLength;
        }
        playerNames.push(formattedName);
        
        // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡∏°‡∏µ 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
        let formattedTel = tel.toString().trim();
        if (!formattedTel.startsWith('0')) {
          formattedTel = '0' + formattedTel;
        }
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô text format ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤ 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
        const telCell = playersSheet.getRange(i + 1, 4); // Column D (Tel)
        telCell.setNumberFormat('@'); // @ = text format
        telCell.setValue(formattedTel);
        
        idCounter++;
      }
    }
    
    // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Bucket (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const bucketSheet = createBucketSheetIfNotExists();
    if (bucketSheet) {
      try {
        // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå MAX_NAME_LENGTH
        const lastColumn = bucketSheet.getLastColumn();
        const headerRow = bucketSheet.getRange(1, 1, 1, lastColumn).getValues()[0];
        const maxNameLengthCol = headerRow.findIndex(cell => cell === 'MAX_NAME_LENGTH') + 1;
        
        if (maxNameLengthCol > 0) {
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
          bucketSheet.getRange(1, maxNameLengthCol + 1).setValue(maxNameLength);
          bucketSheet.getRange(1, maxNameLengthCol + 1).setBackground('#dbeafe');
          bucketSheet.getRange(1, maxNameLengthCol + 1).setFontWeight('bold');
          
          console.log(`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${maxNameLength} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ${maxNameLengthCol + 1}`);
        }
      } catch (error) {
        console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Bucket:', error);
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö Bucket
      }
    }
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Player_id
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Player_id
    const idRange = playersSheet.getRange(2, 1, playerCount, 1);
    idRange.setBackground('#e0f2fe');
    idRange.setFontWeight('bold');
    idRange.setHorizontalAlignment('center');
    idRange.setBorder(true, true, true, true, true, true, '#0288d1', SpreadsheetApp.BorderStyle.SOLID);
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Name
    const nameRange = playersSheet.getRange(2, 2, playerCount, 1);
    nameRange.setBackground('#f3e5f5');
    nameRange.setFontWeight('bold');
    nameRange.setHorizontalAlignment('center');
    nameRange.setBorder(true, true, true, true, true, true, '#9c27b0', SpreadsheetApp.BorderStyle.SOLID);
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå TR_ID
    const trIdRange = playersSheet.getRange(2, 3, playerCount, 1);
    trIdRange.setBackground('#fff3e0');
    trIdRange.setFontWeight('bold');
    trIdRange.setHorizontalAlignment('center');
    trIdRange.setBorder(true, true, true, true, true, true, '#ff9800', SpreadsheetApp.BorderStyle.SOLID);
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Tel - ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô text format
    const telRange = playersSheet.getRange(2, 4, playerCount, 1);
    telRange.setBackground('#e8f5e8');
    telRange.setFontWeight('bold');
    telRange.setHorizontalAlignment('center');
    telRange.setNumberFormat('@'); // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô text format ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤ 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
    telRange.setBorder(true, true, true, true, true, true, '#4caf50', SpreadsheetApp.BorderStyle.SOLID);
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    playersSheet.setColumnWidth(1, 100); // Player_id
    playersSheet.setColumnWidth(2, 200); // Name (‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö TR_ID_‡∏ä‡∏∑‡πà‡∏≠)
    playersSheet.setColumnWidth(3, 120); // TR_ID
    playersSheet.setColumnWidth(4, 120); // Tel (‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£)
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    for (let i = 2; i <= playerCount + 1; i++) {
      playersSheet.setRowHeight(i, 30);
    }
    
    SpreadsheetApp.getUi().alert(
      '‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Player ID ‡πÅ‡∏•‡∏∞ TR_ID ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      '‡∏™‡∏£‡πâ‡∏≤‡∏á Player ID ‡πÅ‡∏•‡∏∞ TR_ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ' + playerCount + ' ‡∏Ñ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n' +
      'Player ID ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô\n' +
      'TR_ID ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç 8 ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô\n' +
      '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô: TR_ID_‡∏ä‡∏∑‡πà‡∏≠\n' +
      '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏µ 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 0957780151)\n\n' +
      'üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: Player ID ‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏•‡∏Ç 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
}

// üìù ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ‡∏ä‡∏∑‡πà‡∏≠ + ‡∏ï‡∏±‡∏ß‡∏¢‡πà‡∏≠‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
function formatPlayerName(fullName) {
  const nameParts = fullName.split(' ').filter(part => part.trim() !== '');
  
  if (nameParts.length === 1) {
    // ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    return nameParts[0];
  } else if (nameParts.length >= 2) {
    // ‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
    const firstName = nameParts[0];
    const lastName = nameParts[nameParts.length - 1];
    const lastNameInitial = lastName.charAt(0).toUpperCase() + '.';
    return firstName + ' ' + lastNameInitial;
  }
  
  return fullName; // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
}

// üìù ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° TR_ID: TR_ID_‡∏ä‡∏∑‡πà‡∏≠
function formatPlayerNameWithTRID(trId, fullName) {
  const formattedName = formatPlayerName(fullName);
  return trId + '_' + formattedName;
}

function showBracketPairing() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const standingSheet = ss.getSheetByName('Standing');
  const playersSheet = ss.getSheetByName('Players');

  // ‡∏î‡∏∂‡∏á drop list
  const dropList = pairingSheet.getRange('M2:M').getValues().flat().filter(name => name);

  // ‡∏î‡∏∂‡∏á standings
  let standings = [];
  if (standingSheet.getLastRow() > 1) {
    standings = standingSheet.getRange(2, 1, standingSheet.getLastRow() - 1, 3).getValues();
  }

  if (standings.length === 0) {
    SpreadsheetApp.getUi().alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standings\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡∏Å‡πà‡∏≠‡∏ô');
    return;
  }

  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å ID
  const playerData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 4).getValues();
  const getName = id => {
    const found = playerData.find(row => row[0] === id);
    return found ? found[1] : id;
  };

  // ‡∏ï‡∏±‡∏î‡∏Ñ‡∏ô drop ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  const activePlayers = standings
    .filter(r => r[1] && r[1] !== '' && !dropList.includes(r[1]))
    .sort((a, b) => b[2] - a[2]);

  const playerBrackets = {};
  activePlayers.forEach(player => {
    const points = player[2];
    if (!playerBrackets[points]) playerBrackets[points] = [];
    playerBrackets[points].push(player[1]); // Player ID
  });

  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Bracket Pairing
  let message = 'üìä Bracket Pairing Analysis\n\n';
  
  const sortedPoints = Object.keys(playerBrackets).map(Number).sort((a, b) => b - a);
  
  sortedPoints.forEach(points => {
    const playersInBracket = playerBrackets[points];
    message += `üèÜ ${points} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (${playersInBracket.length} ‡∏Ñ‡∏ô):\n`;
    
    playersInBracket.forEach(playerId => {
      const playerName = getName(playerId);
      const playerStanding = standings.find(s => s[1] === playerId);
      const winRate = playerStanding ? playerStanding[8] : '0%';
      const owRate = playerStanding ? playerStanding[9] : '0%';
      message += `  ‚Ä¢ ${playerName} (${playerId}) - WR: ${winRate}, OW: ${owRate}\n`;
    });
    message += '\n';
  });

  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
  message += 'üîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:\n';
  message += `‚Ä¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${activePlayers.length} ‡∏Ñ‡∏ô\n`;
  message +=(`‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Bracket: ${sortedPoints.length} ‡∏Å‡∏•‡∏∏‡πà‡∏°\n`);
  
  if (activePlayers.length % 2 === 1) {
    message += '‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏µ‡πà - ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å BYE\n';
  } else {
    message += '‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏π‡πà - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å BYE\n';
  }

  // ‡πÅ‡∏™‡∏î‡∏á Bracket ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
  const problematicBrackets = [];
  sortedPoints.forEach(points => {
    const playersInBracket = playerBrackets[points];
    if (playersInBracket.length === 1) {
      problematicBrackets.push(`${points} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (${getName(playersInBracket[0])})`);
    }
  });

  if (problematicBrackets.length > 0) {
    message += `\n‚ö†Ô∏è Bracket ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà:\n`;
    problematicBrackets.forEach(bracket => {
      message += `  ‚Ä¢ ${bracket}\n`;
    });
  }

  SpreadsheetApp.getUi().alert(message);
}

// üèÜ Round Robin Tournament Functions
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏û‡∏ö‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î (‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î)

// üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á Round Robin Tournament
function createRoundRobinTournament() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const playersSheet = ss.getSheetByName("Players");
  const roundRobinSheet = ss.getSheetByName("Round Robin");
  
  if (!playersSheet || !roundRobinSheet) {
    return SpreadsheetApp.getUi().alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Players ‡∏´‡∏£‡∏∑‡∏≠ Round Robin");
  }
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  const playersData = playersSheet.getDataRange().getValues();
  const headers = playersData[0];
  
  // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á)
  let idCol = headers.indexOf("Player_id");
  let nameCol = headers.indexOf("Name");
  const trIdCol = headers.indexOf("TR_ID");
  const rankCol = headers.indexOf("RANK");
  
  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
  if (idCol === -1) {
    idCol = headers.indexOf("PLAYER ID");
  }
  if (nameCol === -1) {
    nameCol = headers.indexOf("PLAYER NAME");
  }
  
  if (idCol === -1 || nameCol === -1) {
    return SpreadsheetApp.getUi().alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Player_id ‡∏´‡∏£‡∏∑‡∏≠ Name ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Players\n\nHeaders ‡∏ó‡∏µ‡πà‡∏û‡∏ö: " + headers.join(', '));
  }
  
  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà active
  const activePlayers = playersData.slice(1).filter(row => {
    const playerName = String(row[nameCol]).trim();
    return playerName && playerName !== "" && playerName !== "BYE";
  });
  
  if (activePlayers.length < 2) {
    return SpreadsheetApp.getUi().alert("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏ô");
  }
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö
  const playerCount = activePlayers.length;
  const totalRounds = playerCount - 1;
  const matchesPerRound = Math.floor(playerCount / 2);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Round Robin Schedule
  const schedule = generateRoundRobinSchedule(activePlayers, idCol, nameCol, trIdCol);
  
  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Round Robin
  roundRobinSheet.clearContents();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Headers
  const roundRobinHeaders = [
    "ROUND", "MATCH", "P1_ID", "PLAYER 1", "P1_TR_ID", "P1_RANK", 
    "WIN_P1", "DRAW", "WIN_P2", "Double Loss",
    "P2_ID", "PLAYER 2", "P2_TR_ID", "P2_RANK", "RESULT", "STATUS"
  ];
  
  roundRobinSheet.getRange(1, 1, 1, roundRobinHeaders.length).setValues([roundRobinHeaders]);
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó Headers
  const headerRange = roundRobinSheet.getRange(1, 1, 1, roundRobinHeaders.length);
  headerRange.setBackground("#4285f4");
  headerRange.setFontColor("white");
  headerRange.setFontWeight("bold");
  headerRange.setHorizontalAlignment("center");
  
  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
  let currentRow = 2;
  
  schedule.forEach((round, roundIndex) => {
    round.forEach((match, matchIndex) => {
      const rowData = [
        roundIndex + 1, // ROUND
        matchIndex + 1, // MATCH
        match.player1.id, // P1_ID
        match.player1.name, // PLAYER 1
        match.player1.trId || "", // P1_TR_ID
        match.player1.rank || "", // P1_RANK
        false, // WIN_P1 (checkbox)
        false, // DRAW (checkbox)
        false, // WIN_P2 (checkbox)
        false, // Double Loss (checkbox)
        match.player2.id, // P2_ID
        match.player2.name, // PLAYER 2
        match.player2.trId || "", // P2_TR_ID
        match.player2.rank || "", // P2_RANK
        "", // RESULT
        "" // STATUS
      ];
      
      roundRobinSheet.getRange(currentRow, 1, 1, rowData.length).setValues([rowData]);
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ checkboxes
      roundRobinSheet.getRange(currentRow, 7, 1, 4).insertCheckboxes();
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó
      const rowRange = roundRobinSheet.getRange(currentRow, 1, 1, rowData.length);
      rowRange.setBorder(true, true, true, true, true, true);
      
      // ‡∏™‡∏µ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß
      if (roundIndex % 2 === 0) {
        rowRange.setBackground("#f8f9fa");
      }
      
      currentRow++;
    });
  });
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
  roundRobinSheet.setColumnWidth(1, 60); // ROUND
  roundRobinSheet.setColumnWidth(2, 60); // MATCH
  roundRobinSheet.setColumnWidth(3, 80); // P1_ID
  roundRobinSheet.setColumnWidth(4, 120); // PLAYER 1
  roundRobinSheet.setColumnWidth(5, 100); // P1_TR_ID
  roundRobinSheet.setColumnWidth(6, 80); // P1_RANK
  roundRobinSheet.setColumnWidth(7, 60); // WIN_P1
  roundRobinSheet.setColumnWidth(8, 60); // DRAW
  roundRobinSheet.setColumnWidth(9, 60); // WIN_P2
  roundRobinSheet.setColumnWidth(10, 80); // Double Loss
  roundRobinSheet.setColumnWidth(11, 80); // P2_ID
  roundRobinSheet.setColumnWidth(12, 120); // PLAYER 2
  roundRobinSheet.setColumnWidth(13, 100); // P2_TR_ID
  roundRobinSheet.setColumnWidth(14, 80); // P2_RANK
  roundRobinSheet.setColumnWidth(15, 80); // RESULT
  roundRobinSheet.setColumnWidth(16, 80); // STATUS
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ
  const summary = `
üèÜ Round Robin Tournament ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ${playerCount} ‡∏Ñ‡∏ô
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö: ${totalRounds} ‡∏£‡∏≠‡∏ö
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö: ${matchesPerRound} ‡πÅ‡∏°‡∏ï‡∏ä‡πå
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalRounds * matchesPerRound} ‡πÅ‡∏°‡∏ï‡∏ä‡πå

üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡∏µ‡∏ó "Round Robin"
2. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ checkboxes
3. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
4. ‡∏î‡∏π‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏µ‡∏ó "Round Robin Standing"

üéØ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏ö‡∏ö Round Robin ‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î
  `;
  
  SpreadsheetApp.getUi().alert("Round Robin Tournament\n\n" + summary);
}

// üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô Round Robin
function generateRoundRobinSchedule(players, idCol, nameCol, trIdCol) {
  const playerCount = players.length;
  const schedule = [];
  
  // ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏µ‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° BYE
  let playerList = [...players];
  if (playerCount % 2 === 1) {
    playerList.push({
      [idCol]: "BYE",
      [nameCol]: "BYE",
      [trIdCol]: "BYE",
      rank: ""
    });
  }
  
  const n = playerList.length;
  const rounds = n - 1;
  const halfSize = n / 2;
  
  for (let round = 0; round < rounds; round++) {
    const roundMatches = [];
    
    for (let i = 0; i < halfSize; i++) {
      const player1Index = i;
      const player2Index = n - 1 - i;
      
      // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô BYE
      if (playerList[player1Index][nameCol] === "BYE" || playerList[player2Index][nameCol] === "BYE") {
        continue;
      }
      
      roundMatches.push({
        player1: {
          id: playerList[player1Index][idCol],
          name: playerList[player1Index][nameCol],
          trId: playerList[player1Index][trIdCol] || "",
          rank: playerList[player1Index].rank || ""
        },
        player2: {
          id: playerList[player2Index][idCol],
          name: playerList[player2Index][nameCol],
          trId: playerList[player2Index][trIdCol] || "",
          rank: playerList[player2Index].rank || ""
        }
      });
    }
    
    schedule.push(roundMatches);
    
    // ‡∏´‡∏°‡∏∏‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ (Berger Table)
    const lastPlayer = playerList.pop();
    playerList.splice(1, 0, lastPlayer);
  }
  
  return schedule;
}

// üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Round Robin ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
function calculateRoundRobinScores(players) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const roundRobinSheet = ss.getSheetByName("Round Robin");
  
  if (!roundRobinSheet) {
    console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Round Robin");
    return;
  }
  
  const data = roundRobinSheet.getDataRange().getValues();
  const headers = data[0];
  
  // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  const p1IdCol = headers.indexOf("P1_ID");
  const p2IdCol = headers.indexOf("P2_ID");
  const winP1Col = headers.indexOf("WIN_P1");
  const drawCol = headers.indexOf("DRAW");
  const winP2Col = headers.indexOf("WIN_P2");
  const doubleLossCol = headers.indexOf("Double Loss");
  
  if (p1IdCol === -1 || p2IdCol === -1) {
    console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå P1_ID ‡∏´‡∏£‡∏∑‡∏≠ P2_ID ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Round Robin");
    return;
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  const playerMap = new Map();
  players.forEach(player => {
    playerMap.set(player.id, player);
  });
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Round Robin
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const p1Id = row[p1IdCol];
    const p2Id = row[p2IdCol];
    const winP1 = row[winP1Col];
    const draw = row[drawCol];
    const winP2 = row[winP2Col];
    const doubleLoss = row[doubleLossCol];
    
    // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    const player1 = playerMap.get(p1Id);
    const player2 = playerMap.get(p2Id);
    
    if (!player1 || !player2) {
      console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: P1=${p1Id}, P2=${p2Id}`);
      continue;
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    if (winP1) {
      player1.wins++;
      player1.points += 3;
      player2.losses++;
    } else if (winP2) {
      player2.wins++;
      player2.points += 3;
      player1.losses++;
    } else if (draw) {
      player1.draws++;
      player1.points += 1;
      player2.draws++;
      player2.points += 1;
    } else if (doubleLoss) {
      // Double Loss - ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
      player1.losses++;
      player2.losses++;
    }
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏Ç‡πà‡∏á) ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
  }
  
  console.log(`üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Round Robin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: ${data.length - 1} ‡πÄ‡∏Å‡∏°`);
}

// üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô Round Robin
function updateRoundRobinResults() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const roundRobinSheet = ss.getSheetByName("Round Robin");
  
  if (!roundRobinSheet) {
    return SpreadsheetApp.getUi().alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Round Robin");
  }
  
  const data = roundRobinSheet.getDataRange().getValues();
  const headers = data[0];
  
  // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  const winP1Col = headers.indexOf("WIN_P1");
  const drawCol = headers.indexOf("DRAW");
  const winP2Col = headers.indexOf("WIN_P2");
  const doubleLossCol = headers.indexOf("Double Loss");
  const resultCol = headers.indexOf("RESULT");
  const statusCol = headers.indexOf("STATUS");
  
  let updatedCount = 0;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const winP1 = row[winP1Col];
    const draw = row[drawCol];
    const winP2 = row[winP2Col];
    const doubleLoss = row[doubleLossCol];
    
    let result = "";
    let status = "";
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    if (winP1) {
      result = "1:0";
      status = "OK";
    } else if (winP2) {
      result = "0:1";
      status = "OK";
    } else if (draw) {
      result = "1:1";
      status = "OK";
    } else if (doubleLoss) {
      result = "0:0";
      status = "OK";
    } else {
      result = "";
      status = "";
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    roundRobinSheet.getRange(i + 1, resultCol + 1).setValue(result);
    roundRobinSheet.getRange(i + 1, statusCol + 1).setValue(status);
    
    if (result !== "") {
      updatedCount++;
    }
  }
  
  SpreadsheetApp.getUi().alert(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:\n‚Ä¢ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•: ${updatedCount} ‡πÅ‡∏°‡∏ï‡∏ä‡πå\n‚Ä¢ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•: ${data.length - 1 - updatedCount} ‡πÅ‡∏°‡∏ï‡∏ä‡πå`);
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï standings ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
  if (updatedCount > 0) {
    try {
      createRoundRobinStanding();
      console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Round Robin Standing ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standing:', error);
    }
  }
}

// üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô Round Robin ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
function autoUpdateRoundRobinResults() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const roundRobinSheet = ss.getSheetByName("Round Robin");
  
  if (!roundRobinSheet) {
    return SpreadsheetApp.getUi().alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Round Robin");
  }
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
  updateRoundRobinResults();
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï standings
  try {
    createRoundRobinStanding();
    SpreadsheetApp.getUi().alert("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏•‡∏∞ Standings ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standing:', error);
    SpreadsheetApp.getUi().alert("‚ö†Ô∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings");
  }
}

// üîÑ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Round Robin
function onEditRoundRobin(e) {
  const sheet = e.source.getActiveSheet();
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Round Robin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (sheet.getName() === "Round Robin") {
    const range = e.range;
    const column = range.getColumn();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå checkboxes ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (column >= 7 && column <= 10) { // WIN_P1, DRAW, WIN_P2, Double Loss
      try {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        updateRoundRobinResults();
        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï standings ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        ScriptApp.newTrigger('updateRoundRobinStandingsDelayed')
          .timeBased()
          .after(2000)
          .create();
      } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô:', error);
      }
    }
  }
}

// üîÑ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï standings ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å delay
function updateRoundRobinStandingsDelayed() {
  try {
    // ‡∏•‡∏ö trigger ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const triggers = ScriptApp.getProjectTriggers();
    triggers.forEach(trigger => {
      if (trigger.getHandlerFunction() === 'updateRoundRobinStandingsDelayed') {
        ScriptApp.deleteTrigger(trigger);
      }
    });
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï standings
    createRoundRobinStanding();
    console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings:', error);
  }
}

// üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ OW% ‡πÅ‡∏•‡∏∞ H2H
function fixRoundRobinStandingsData() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const standingsSheet = ss.getSheetByName("Round Robin Standing");
    
    if (!standingsSheet) {
      SpreadsheetApp.getUi().alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "Round Robin Standing"');
      return;
    }
    
    const data = standingsSheet.getDataRange().getValues();
    if (data.length <= 1) {
      SpreadsheetApp.getUi().alert('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó "Round Robin Standing"');
      return;
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OW% ‡πÅ‡∏•‡∏∞ H2H ‡πÉ‡∏´‡∏°‡πà
    const updatedData = [];
    updatedData.push(data[0]); // header row
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const playerId = row[1];
      const wins = parseInt(row[4]) || 0;
      const draws = parseInt(row[5]) || 0;
      const losses = parseInt(row[6]) || 0;
      const points = parseInt(row[7]) || 0;
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Win Rate
      const totalGames = wins + draws + losses;
      const winRate = totalGames > 0 ? Math.round((wins / totalGames) * 100) + '%' : '0%';
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OW% (Opponent Win Percentage)
      const owPercentage = calculateOpponentWinPercentage(playerId, data);
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì H2H (Head to Head)
      const h2hScore = calculateHeadToHeadScore(playerId, data);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà
      const newRow = [
        row[0], // RANK
        row[1], // PLAYER ID
        row[2], // PLAYER NAME
        row[3], // TR_ID
        wins,
        draws,
        losses,
        points,
        winRate,
        owPercentage + '%',
        h2hScore
      ];
      
      updatedData.push(newRow);
    }
    
    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡∏µ‡∏ó
    standingsSheet.getRange(1, 1, updatedData.length, updatedData[0].length).setValues(updatedData);
    
    SpreadsheetApp.getUi().alert('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standings ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Win Rate\n- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OW% ‡πÉ‡∏´‡∏°‡πà\n- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì H2H ‡πÉ‡∏´‡∏°‡πà\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå');
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standings:', error);
    SpreadsheetApp.getUi().alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standings: ' + error.message);
  }
}

// üî¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OW% (Opponent Win Percentage)
function calculateOpponentWinPercentage(playerId, standingsData) {
  try {
    const roundRobinSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Round Robin");
    if (!roundRobinSheet) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "Round Robin"');
      return 0;
    }
    
    const roundRobinData = roundRobinSheet.getDataRange().getValues();
    const opponents = new Set();
    
    console.log('üîç ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OW% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô:', playerId);
    console.log('  - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Round Robin ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', roundRobinData.length, '‡πÅ‡∏ñ‡∏ß');
    
    // ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
    for (let i = 1; i < roundRobinData.length; i++) {
      const row = roundRobinData[i];
      const p1Id = row[2]; // P1_ID (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C)
      const p2Id = row[10]; // P2_ID (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå K) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å row[8] ‡πÄ‡∏õ‡πá‡∏ô row[10]
      
      console.log(`  - ‡πÅ‡∏ñ‡∏ß ${i}: P1=${p1Id}, P2=${p2Id}`);
      
      if (p1Id === playerId && p2Id !== 'BYE') {
        opponents.add(p2Id);
        console.log('    -> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á (P2):', p2Id);
      } else if (p2Id === playerId && p1Id !== 'BYE') {
        opponents.add(p1Id);
        console.log('    -> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á (P1):', p1Id);
      }
    }
    
    console.log('  - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', opponents.size);
    console.log('  - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á:', Array.from(opponents));
    
    if (opponents.size === 0) {
      console.log('  - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á');
      return 0;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• standingsData ‡∏ó‡∏µ‡πà‡∏°‡∏µ
    console.log('  - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standings ‡∏ó‡∏µ‡πà‡∏°‡∏µ:');
    for (let j = 1; j < standingsData.length; j++) {
      const row = standingsData[j];
      console.log(`    ${j}: ID=${row[1]}, Name=${row[2]}, W=${row[4]}, D=${row[5]}, L=${row[6]}`);
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì win rate ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    let totalOpponentWins = 0;
    let totalOpponentGames = 0;
    
    opponents.forEach(opponentId => {
      console.log('  - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á:', opponentId);
      
      // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡∏à‡∏≤‡∏Å standingsData
      let opponentRow = null;
      for (let j = 1; j < standingsData.length; j++) {
        if (standingsData[j][1] === opponentId) {
          opponentRow = standingsData[j];
          console.log('    -> ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß:', j);
          break;
        }
      }
      
      if (opponentRow) {
        const opponentWins = parseInt(opponentRow[4]) || 0;
        const opponentDraws = parseInt(opponentRow[5]) || 0;
        const opponentLosses = parseInt(opponentRow[6]) || 0;
        const opponentGames = opponentWins + opponentDraws + opponentLosses;
        
        console.log('    -> ‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á', opponentId, ':', opponentWins, 'W,', opponentDraws, 'D,', opponentLosses, 'L,', opponentGames, '‡πÄ‡∏Å‡∏°');
        
        totalOpponentWins += opponentWins;
        totalOpponentGames += opponentGames;
      } else {
        console.log('    -> ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á:', opponentId);
      }
    });
    
    console.log('  - ‡∏™‡∏£‡∏∏‡∏õ: Total Wins =', totalOpponentWins, ', Total Games =', totalOpponentGames);
    
    const owPercentage = totalOpponentGames > 0 ? Math.round((totalOpponentWins / totalOpponentGames) * 100) : 0;
    console.log('  - OW% ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ:', owPercentage + '%');
    
    return owPercentage;
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OW%:', error);
    return 0;
  }
}

// üî¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì H2H (Head to Head) - ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ OW% ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
function calculateHeadToHeadScore(playerId, standingsData) {
  try {
    const roundRobinSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Round Robin");
    if (!roundRobinSheet) return 0;
    
    const roundRobinData = roundRobinSheet.getDataRange().getValues();
    let h2hScore = 0;
    
    // ‡∏´‡∏≤‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ OW% ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
    const currentPlayerRow = standingsData.find(row => row[1] === playerId);
    if (!currentPlayerRow) return 0;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OW% ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentPlayerOw = calculateOpponentWinPercentage(playerId, standingsData);
    
    // ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ OW% ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
    const tiedPlayers = standingsData.filter(row => {
      if (row[1] === playerId) return false; // ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
      const opponentOw = calculateOpponentWinPercentage(row[1], standingsData);
      return opponentOw === currentPlayerOw;
    });
    
    if (tiedPlayers.length === 0) return 0;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì H2H score
    tiedPlayers.forEach(opponent => {
      const opponentId = opponent[1];
      
      // ‡∏´‡∏≤‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á
      for (let i = 1; i < roundRobinData.length; i++) {
        const row = roundRobinData[i];
        const p1Id = row[2]; // P1_ID (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C)
        const p2Id = row[10]; // P2_ID (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå K)
        const result = row[14]; // RESULT column
        
        if ((p1Id === playerId && p2Id === opponentId) || 
            (p1Id === opponentId && p2Id === playerId)) {
          
          if (result === '1:0') {
            if (p1Id === playerId) h2hScore += 1;
          } else if (result === '0:1') {
            if (p2Id === playerId) h2hScore += 1;
          } else if (result === '1:1') {
            h2hScore += 0.5;
          }
          break;
        }
      }
    });
    
    return h2hScore;
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì H2H:', error);
    return 0;
  }
}

// üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
function fixAllRoundRobinData() {
  try {
    SpreadsheetApp.getUi().alert('üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Round Robin ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...');
    
    // 1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standings
    fixRoundRobinStandingsData();
    
    // 2. ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    Utilities.sleep(2000);
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const standingsSheet = ss.getSheetByName("Round Robin Standing");
    
    if (standingsSheet) {
      const data = standingsSheet.getDataRange().getValues();
      let hasIssues = false;
      let issueDetails = '';
      
      for (let i = 1; i < data.length; i++) {
        const row = data[i];
        const winRate = row[8];
        const ow = row[9];
        const h2h = row[10];
        
        if (typeof winRate === 'string' && !winRate.includes('%')) {
          hasIssues = true;
          issueDetails += `- ‡πÅ‡∏ñ‡∏ß ${i}: Win Rate ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ % (${winRate})\n`;
        }
        
        if (typeof ow === 'string' && !ow.includes('%')) {
          hasIssues = true;
          issueDetails += `- ‡πÅ‡∏ñ‡∏ß ${i}: OW% ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ % (${ow})\n`;
        }
        
        if (typeof h2h === 'string' && !h2h.includes('%') && h2h !== '-') {
          hasIssues = true;
          issueDetails += `- ‡πÅ‡∏ñ‡∏ß ${i}: H2H ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ % (${h2h})\n`;
        }
      }
      
      if (hasIssues) {
        SpreadsheetApp.getUi().alert('‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n\n' + issueDetails + '\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô "üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standings (OW% & H2H)" ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      } else {
        SpreadsheetApp.getUi().alert('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß:\n- Win Rate ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå\n- OW% ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå\n- H2H ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå');
      }
    }
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', error);
    SpreadsheetApp.getUi().alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ' + error.message);
  }
}

// üèÜ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• Round Robin
function createRoundRobinStanding() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const standingSheet = ss.getSheetByName("Round Robin Standing");
  const playersSheet = ss.getSheetByName("Players");
  
  if (!standingSheet) {
    console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Round Robin Standing");
    return;
  }
  
  if (!playersSheet) {
    console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Players");
    return;
  }
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó Players
  const playersData = playersSheet.getDataRange().getValues();
  const playersHeaders = playersData[0];
  
  // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á)
  let playerIdCol = playersHeaders.indexOf("Player_id");
  let playerNameCol = playersHeaders.indexOf("Name");
  
  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
  if (playerIdCol === -1) {
    playerIdCol = playersHeaders.indexOf("PLAYER ID");
  }
  if (playerNameCol === -1) {
    playerNameCol = playersHeaders.indexOf("PLAYER NAME");
  }
  
  const trIdCol = playersHeaders.indexOf("TR_ID");
  
  if (playerIdCol === -1 || playerNameCol === -1) {
    const errorMsg = `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Player ID ‡∏´‡∏£‡∏∑‡∏≠ Player Name ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Players\n\nHeaders ‡∏ó‡∏µ‡πà‡∏û‡∏ö: ${playersHeaders.join(', ')}\n\nPlayer ID Column: ${playerIdCol}\nPlayer Name Column: ${playerNameCol}\n\n‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Player_id" ‡πÅ‡∏•‡∏∞ "Name" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà`;
    console.error(errorMsg);
    SpreadsheetApp.getUi().alert(errorMsg);
    return;
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const allPlayers = [];
  for (let i = 1; i < playersData.length; i++) {
    const row = playersData[i];
    const playerId = row[playerIdCol];
    const playerName = row[playerNameCol];
    const trId = row[trIdCol];
    
    if (playerId && playerName) {
      allPlayers.push({
        id: playerId,
        name: playerName,
        trId: trId || "",
        wins: 0,
        draws: 0,
        losses: 0,
        points: 0,
        owRate: 0,
        h2h: ""
      });
    }
  }
  
  console.log(`‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ${allPlayers.length} ‡∏Ñ‡∏ô`);
  
  if (allPlayers.length === 0) {
    const errorMsg = `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Players\n\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${playersData.length - 1} (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° header)\n\nHeaders: ${playersHeaders.join(', ')}`;
    console.error(errorMsg);
    SpreadsheetApp.getUi().alert(errorMsg);
    return;
  }
  
  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
  standingSheet.clearContents();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Headers
  const standingHeaders = [
    "RANK", "PLAYER ID", "PLAYER NAME", "TR_ID", "WINS", "DRAWS", "LOSSES", "POINTS", "WIN RATE", "OW%", "H2H"
  ];
  
  standingSheet.getRange(1, 1, 1, standingHeaders.length).setValues([standingHeaders]);
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó Headers
  const headerRange = standingSheet.getRange(1, 1, 1, standingHeaders.length);
  headerRange.setBackground("#34a853");
  headerRange.setFontColor("white");
  headerRange.setFontWeight("bold");
  headerRange.setHorizontalAlignment("center");
  
  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  allPlayers.forEach((player, index) => {
    const totalGames = player.wins + player.draws + player.losses;
    const winRate = totalGames > 0 ? ((player.wins / totalGames) * 100).toFixed(1) + "%" : "0%";
    
    const rowData = [
      index + 1, // RANK
      player.id, // PLAYER ID
      player.name, // PLAYER NAME
      player.trId || "", // TR_ID
      player.wins, // WINS
      player.draws, // DRAWS
      player.losses, // LOSSES
      player.points, // POINTS
      winRate, // WIN RATE
      player.owRate + "%", // OW%
      player.h2h // H2H
    ];
    
    const rowIndex = index + 2;
    standingSheet.getRange(rowIndex, 1, 1, rowData.length).setValues([rowData]);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó
    const rowRange = standingSheet.getRange(rowIndex, 1, 1, rowData.length);
    rowRange.setBorder(true, true, true, true, true, true);
    
    // ‡∏™‡∏µ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß
    if (index % 2 === 0) {
      rowRange.setBackground("#f8f9fa");
    }
  });
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
  standingSheet.setColumnWidth(1, 60); // RANK
  standingSheet.setColumnWidth(2, 100); // PLAYER ID
  standingSheet.setColumnWidth(3, 150); // PLAYER NAME
  standingSheet.setColumnWidth(4, 100); // TR_ID
  standingSheet.setColumnWidth(5, 80); // WINS
  standingSheet.setColumnWidth(6, 80); // DRAWS
  standingSheet.setColumnWidth(7, 80); // LOSSES
  standingSheet.setColumnWidth(8, 80); // POINTS
  standingSheet.setColumnWidth(9, 100); // WIN RATE
  standingSheet.setColumnWidth(10, 100); // OW%
  standingSheet.setColumnWidth(11, 120); // H2H
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå POINTS ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå)
  if (allPlayers.length > 0) {
    standingSheet.getRange(2, 8, allPlayers.length, 1).setNumberFormat('0'); // POINTS - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
  }
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô Round Robin
  calculateRoundRobinScores(allPlayers);
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
  allPlayers.sort((a, b) => {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    if (b.points !== a.points) {
      return b.points - a.points;
    }
    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° win rate
    const aWinRate = a.wins / (a.wins + a.draws + a.losses) || 0;
    const bWinRate = b.wins / (b.wins + b.draws + b.losses) || 0;
    if (bWinRate !== aWinRate) {
      return bWinRate - aWinRate;
    }
    // ‡∏ñ‡πâ‡∏≤ win rate ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏ô‡∏∞
    return b.wins - a.wins;
  });
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó
  allPlayers.forEach((player, index) => {
    const totalGames = player.wins + player.draws + player.losses;
    const winRate = totalGames > 0 ? ((player.wins / totalGames) * 100).toFixed(1) + "%" : "0%";
    
    const rowData = [
      index + 1, // RANK
      player.id, // PLAYER ID
      player.name, // PLAYER NAME
      player.trId || "", // TR_ID
      player.wins, // WINS
      player.draws, // DRAWS
      player.losses, // LOSSES
      player.points, // POINTS
      winRate, // WIN RATE
      player.owRate + "%", // OW%
      player.h2h // H2H
    ];
    
    const rowIndex = index + 2;
    standingSheet.getRange(rowIndex, 1, 1, rowData.length).setValues([rowData]);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó
    const rowRange = standingSheet.getRange(rowIndex, 1, 1, rowData.length);
    rowRange.setBorder(true, true, true, true, true, true);
    
    // ‡∏™‡∏µ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß
    if (index % 2 === 0) {
      rowRange.setBackground("#f8f9fa");
    }
  });
  
  console.log(`üèÜ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• Round Robin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ${allPlayers.length} ‡∏Ñ‡∏ô`);
  
  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  SpreadsheetApp.getUi().alert(`üèÜ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• Round Robin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:\n‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ${allPlayers.length} ‡∏Ñ‡∏ô\n‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ${allPlayers.map(p => p.name).join(', ')}`);
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug
  console.log('Debug - Players Data:', playersData);
  console.log('Debug - Players Headers:', playersHeaders);
  console.log('Debug - Player ID Column:', playerIdCol);
  console.log('Debug - Player Name Column:', playerNameCol);
  console.log('Debug - All Players:', allPlayers);
}

// üëÅÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Hide Standing
function checkHideStandingStatus() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö checkbox ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á O1 (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå O, ‡πÅ‡∏ñ‡∏ß 1) ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing
  const hideStandingCell = pairingSheet.getRange(1, 15); // O1
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á O1 ‡∏°‡∏µ checkbox ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  try {
    const checkboxValue = hideStandingCell.getValue();
    const isChecked = checkboxValue === true;
    
    console.log(`Hide Standing Status (O1): ${isChecked ? '‡∏ã‡πà‡∏≠‡∏ô Standings' : '‡πÅ‡∏™‡∏î‡∏á Standings'}`);
    console.log(`Raw checkbox value: ${checkboxValue}, Type: ${typeof checkboxValue}`);
    
    return {
      hideStanding: isChecked
    };
  } catch (error) {
    console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö checkbox ‡∏ó‡∏µ‡πà O1, ‡πÅ‡∏™‡∏î‡∏á Standings ‡∏õ‡∏Å‡∏ï‡∏¥');
    return {
      hideStanding: false
    };
  }
}

// üö´ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏ä‡πâ Hide Standing controls ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
// ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á controls ‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
// ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ checkbox ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á O2 ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß

// üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Hide Standing controls ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing
function setupPairingHideStandingControls() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Hide Standing controls ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const controlText = pairingSheet.getRange(1, 14); // N1
  const hideCheckbox = pairingSheet.getRange(1, 15); // O1
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á N1 ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "Hide Standing" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingText = controlText.getValue();
    const existingCheckbox = hideCheckbox.getValue();
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á
    if (existingText === 'Hide Standing' && (existingCheckbox === true || existingCheckbox === false)) {
      console.log('Hide Standing controls ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á');
      return;
    }
  } catch (error) {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ controls
    console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö Hide Standing controls ‡πÄ‡∏î‡∏¥‡∏° ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà');
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "Hide Standing" ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á N1
  controlText.setValue('Hide Standing');
  controlText.setBackground('#e3f2fd'); // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
  controlText.setFontWeight('bold');
  controlText.setHorizontalAlignment('center');
  controlText.setBorder(true, true, true, true, true, true, '#2196f3', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° checkbox ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á O1
  hideCheckbox.insertCheckboxes();
  hideCheckbox.check(); // ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡πá‡∏ô default
  hideCheckbox.setBackground('#fef3c7'); // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô
  hideCheckbox.setFontWeight('bold');
  hideCheckbox.setHorizontalAlignment('center');
  hideCheckbox.setBorder(true, true, true, true, true, true, '#fcd34d', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  pairingSheet.setColumnWidth(14, 120); // N - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  pairingSheet.setColumnWidth(15, 80);  // O - checkbox
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
  pairingSheet.setRowHeight(2, 40);
  
  console.log('‡∏™‡∏£‡πâ‡∏≤‡∏á Hide Standing checkbox ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
  
  // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ trigger ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ onEdit ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ trigger
}

// ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: onEdit trigger ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Google Apps Script ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å onEdit ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç

// üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Hide Standing controls ‡πÄ‡∏õ‡πá‡∏ô default (‡πÉ‡∏ä‡πâ controls ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
function resetHideStandingControls() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï checkbox ‡∏ó‡∏µ‡πà O1 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å
  const hideCheckbox = pairingSheet.getRange(1, 15); // O1
  hideCheckbox.check();
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô)
  updateStandings();
  smartResizeAllSheetsSilent();
  
  SpreadsheetApp.getUi().alert(
    'üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
    'Hide Standing checkbox ‡∏ñ‡∏π‡∏Å‡∏ï‡∏¥‡πä‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô default ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

// üìè ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing
function adjustPairingColumns() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô)
  updateStandings();
  smartResizeAllSheetsSilent();
  
  SpreadsheetApp.getUi().alert(
    'üìè ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
    '‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå D (PLAYER 1) ‡πÅ‡∏•‡∏∞ J (PLAYER 2) ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß',
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

// ‚ö° ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Controls ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
function forceResetControls() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï checkbox ‡∏ó‡∏µ‡πà O2 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å
  const hideCheckbox = pairingSheet.getRange(2, 15); // O2
  hideCheckbox.check();
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô)
  updateStandings();
  smartResizeAllSheetsSilent();
  
  SpreadsheetApp.getUi().alert(
    '‚ö° ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
    'Hide Standing checkbox ‡∏ñ‡∏π‡∏Å‡∏ï‡∏¥‡πä‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô default\n‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô\n‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÅ‡∏•‡πâ‡∏ß',
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

// üßπ ‡∏•‡∏ö Hide Standing ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
function removeDuplicateHideStanding() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡∏∞ 2 ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå N
  const n1Value = pairingSheet.getRange(1, 14).getValue(); // N1
  const n2Value = pairingSheet.getRange(2, 14).getValue(); // N2
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡∏∞ 2 ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå O
  const o1Value = pairingSheet.getRange(1, 15).getValue(); // O1
  const o2Value = pairingSheet.getRange(2, 15).getValue(); // O2
  
  let removedCount = 0;
  
  // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡∏°‡∏µ "Hide Standing" ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1)
  if (n2Value === 'Hide Standing') {
    pairingSheet.getRange(2, 14, 1, 2).clearContent(); // ‡∏•‡∏ö N2:O2
    removedCount++;
    console.log('‡∏•‡∏ö Hide Standing ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2');
  }
  
  // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1 ‡πÑ‡∏°‡πà‡∏°‡∏µ "Hide Standing" ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
  if (n1Value !== 'Hide Standing') {
    setupPairingHideStandingControls();
    console.log('‡∏™‡∏£‡πâ‡∏≤‡∏á Hide Standing ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ checkbox ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  try {
    const checkboxValue = pairingSheet.getRange(1, 15).getValue();
    if (checkboxValue !== true && checkboxValue !== false) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ checkbox ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      const hideCheckbox = pairingSheet.getRange(1, 15);
      hideCheckbox.insertCheckboxes();
      hideCheckbox.check(); // ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡πá‡∏ô default
      hideCheckbox.setBackground('#fef3c7');
      hideCheckbox.setFontWeight('bold');
      hideCheckbox.setHorizontalAlignment('center');
      hideCheckbox.setBorder(true, true, true, true, true, true, '#fcd34d', SpreadsheetApp.BorderStyle.SOLID);
      console.log('‡∏™‡∏£‡πâ‡∏≤‡∏á checkbox ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà O1');
    }
  } catch (error) {
    console.log('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á checkbox ‡πÑ‡∏î‡πâ:', error);
  }
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  pairingSheet.setColumnWidth(14, 120); // N - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  pairingSheet.setColumnWidth(15, 80);  // O - checkbox
  pairingSheet.setRowHeight(1, 40);
  
  SpreadsheetApp.getUi().alert(
    'üßπ ‡∏•‡∏ö‡∏ã‡πâ‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
    `‡∏•‡∏ö Hide Standing ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô ${removedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏µ controls ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß`,
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

// üßπ ‡∏•‡∏ö Hide Standing ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô (‡πÅ‡∏ö‡∏ö‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÜ)
function removeDuplicateHideStandingSilent() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1 ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå N
  const n1Value = pairingSheet.getRange(1, 14).getValue(); // N1
  
  // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡∏°‡∏µ "Hide Standing" ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1)
  const n2Value = pairingSheet.getRange(2, 14).getValue(); // N2
  if (n2Value === 'Hide Standing') {
    pairingSheet.getRange(2, 14, 1, 2).clearContent(); // ‡∏•‡∏ö N2:O2
    console.log('‡∏•‡∏ö Hide Standing ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 (‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÜ)');
  }
}

// ‚ö° ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô adjustPlayerNameColumns ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô - ‡πÉ‡∏ä‡πâ formatPairingComplete ‡πÅ‡∏ó‡∏ô
// function adjustPlayerNameColumns(pairingSheet) {
//   // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö formatPairingComplete
// }

// üìè ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏ö‡∏ö Smart

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó Bucket ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
function createBucketSheetIfNotExists() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let bucketSheet = ss.getSheetByName('Bucket');
    
    if (!bucketSheet) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó Bucket ‡πÉ‡∏´‡∏°‡πà
      bucketSheet = ss.insertSheet('Bucket');
      console.log('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó Bucket ‡πÉ‡∏´‡∏°‡πà');
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå MAX_NAME_LENGTH ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const lastColumn = bucketSheet.getLastColumn();
    if (lastColumn === 0) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å
      bucketSheet.getRange(1, 1).setValue('MAX_NAME_LENGTH');
      bucketSheet.getRange(1, 1).setBackground('#fef3c7');
      bucketSheet.getRange(1, 1).setFontWeight('bold');
      console.log('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå MAX_NAME_LENGTH ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Bucket');
    } else {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå MAX_NAME_LENGTH ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const headerRow = bucketSheet.getRange(1, 1, 1, lastColumn).getValues()[0];
      const maxNameLengthCol = headerRow.findIndex(cell => cell === 'MAX_NAME_LENGTH');
      
      if (maxNameLengthCol === -1) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå MAX_NAME_LENGTH ‡πÉ‡∏´‡∏°‡πà
        const newCol = lastColumn + 1;
        bucketSheet.getRange(1, newCol).setValue('MAX_NAME_LENGTH');
        bucketSheet.getRange(1, newCol).setBackground('#fef3c7');
        bucketSheet.getRange(1, newCol).setFontWeight('bold');
        console.log(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå MAX_NAME_LENGTH ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ${newCol}`);
      }
    }
    
    return bucketSheet;
    
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó Bucket:', error);
    return null;
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Standing ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß‡πÜ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï) - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÅ‡∏ó‡∏ô‡πÅ‡∏™‡∏î‡∏á alert
function quickCheckStandings() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const standingSheet = ss.getSheetByName('Standing');
    const pairingSheet = ss.getSheetByName('Pairing');
    
    if (!standingSheet || !pairingSheet) {
      return { isValid: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Standing ‡∏´‡∏£‡∏∑‡∏≠ Pairing' };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Standing ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const lastStandingRow = standingSheet.getLastRow();
    if (lastStandingRow <= 1) {
      return { isValid: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Standing' };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Pairing ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const lastPairingRow = pairingSheet.getLastRow();
    if (lastPairingRow <= 1) {
      return { isValid: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Pairing' };
    }
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standing (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
    const standingData = standingSheet.getRange(2, 1, lastStandingRow - 1, 8).getValues(); // RANK, PLAYER ID, NAME, TR_ID, WINS, DRAWS, LOSSES, POINTS
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Pairing (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
    const pairingData = pairingSheet.getRange(2, 1, lastPairingRow - 1, 3).getValues(); // ROUND, TABLE, P1_ID
    
    // ‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ
    const rounds = pairingData.map(row => row[0]).filter(r => r && r !== '');
    const uniqueRounds = [...new Set(rounds)];
    const totalRounds = uniqueRounds.length;
    
    if (totalRounds === 0) {
      return { isValid: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÉ‡∏ô Pairing' };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà drop
    const activePlayers = standingData.filter(row => {
      const playerId = row[1]; // PLAYER ID
      const wins = row[4] || 0; // WINS
      const draws = row[5] || 0; // DRAWS
      const losses = row[6] || 0; // LOSSES
      const totalGames = wins + draws + losses;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      return playerId && totalGames === totalRounds;
    });
    
    if (activePlayers.length === 0) {
      return { 
        isValid: false, 
        message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏£‡∏ö ${totalRounds} ‡∏£‡∏≠‡∏ö\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standing ‡∏Å‡πà‡∏≠‡∏ô` 
      };
    }
    
    return { 
      isValid: true, 
      message: `‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ${activePlayers.length} ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏£‡∏ö ${totalRounds} ‡∏£‡∏≠‡∏ö\n‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ`,
      activePlayers: activePlayers.length,
      totalRounds: totalRounds
    };
    
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Standing:', error);
    return { isValid: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Standing' };
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Status ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô PENDING ‡πÄ‡∏õ‡πá‡∏ô OK)
function forceUpdateAllStatus() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const pairingSheet = ss.getSheetByName('Pairing');
    
    if (!pairingSheet) {
      SpreadsheetApp.getUi().alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Pairing');
      return;
    }
    
    const lastRow = pairingSheet.getLastRow();
    if (lastRow <= 1) {
      SpreadsheetApp.getUi().alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing');
      return;
    }
    
    // ‡∏î‡∏∂‡∏á headers
    const headers = pairingSheet.getRange(1, 1, 1, pairingSheet.getLastColumn()).getValues()[0];
    const statusCol = headers.indexOf("STATUS") + 1;
    
    if (statusCol === 0) {
      SpreadsheetApp.getUi().alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå STATUS');
      return;
    }
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const data = pairingSheet.getRange(2, 1, lastRow - 1, pairingSheet.getLastColumn()).getValues();
    
    let updatedCount = 0;
    let pendingCount = 0;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
    for (let i = 0; i < data.length; i++) {
      const row = i + 2; // ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ
      const status = data[i][statusCol - 1];
      
      if (status === "PENDING") {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ result ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const result = data[i][headers.indexOf("RESULT")];
        if (result && result !== "") {
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standing
          updateStandings();
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Standing ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const standingCheck = quickCheckStandings();
          if (standingCheck.isValid) {
            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Status ‡πÄ‡∏õ‡πá‡∏ô OK
            pairingSheet.getRange(row, statusCol).setValue("OK");
            updatedCount++;
            console.log(`Updated row ${row} status to OK`);
          } else {
            pendingCount++;
            console.log(`Row ${row} remains PENDING - Standing update failed`);
          }
        }
      }
    }
    
    SpreadsheetApp.getUi().alert(
      '‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Status ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${updatedCount} ‡πÅ‡∏ñ‡∏ß\n‡∏¢‡∏±‡∏á‡∏Ñ‡∏á PENDING: ${pendingCount} ‡πÅ‡∏ñ‡∏ß`,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    
    console.log(`Force update status: ${updatedCount} updated, ${pendingCount} pending`);
    
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Status:', error);
    SpreadsheetApp.getUi().alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Status');
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Standing (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π)
function showStandingCheckResult() {
  try {
    const result = quickCheckStandings();
    
    if (result.isValid) {
      SpreadsheetApp.getUi().alert(
        '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Standing ‡∏ú‡πà‡∏≤‡∏ô',
        result.message,
        SpreadsheetApp.getUi().ButtonSet.OK
      );
    } else {
      SpreadsheetApp.getUi().alert(
        '‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Standing ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô',
        result.message,
        SpreadsheetApp.getUi().ButtonSet.OK
      );
    }
    
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Standing:', error);
    SpreadsheetApp.getUi().alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Standing');
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L (H2H) ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
function forceResizeH2HColumn() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const standingSheet = ss.getSheetByName('Standing');
    
    if (!standingSheet) {
      SpreadsheetApp.getUi().alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Standing');
      return;
    }
    
    const lastRow = standingSheet.getLastRow();
    if (lastRow <= 1) {
      SpreadsheetApp.getUi().alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Standing');
      return;
    }
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L (H2H) ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const h2hData = standingSheet.getRange(2, 12, lastRow - 1, 1).getValues();
    
    // ‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    let maxH2HLength = 0;
    h2hData.forEach(row => {
      const h2hName = row[0] ? row[0].toString() : '';
      if (h2hName.length > maxH2HLength) maxH2HLength = h2hName.length;
    });
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    const minWidth = 120;
    const maxWidth = 500; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    const h2hWidth = Math.max(minWidth, Math.min(maxWidth, maxH2HLength * 8 + 30));
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L
    standingSheet.setColumnWidth(12, h2hWidth);
    
    SpreadsheetApp.getUi().alert(
      '‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L (H2H) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      `‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà: ${h2hWidth}px\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${maxH2HLength} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£`,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    
    console.log(`‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L: ${h2hWidth}px (‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ${maxH2HLength} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)`);
    
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L:', error);
    SpreadsheetApp.getUi().alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L');
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏µ‡∏ó Bucket
function clearBucketData() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const bucketSheet = ss.getSheetByName('Bucket');
    
    if (!bucketSheet) {
      SpreadsheetApp.getUi().alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Bucket');
      return;
    }
    
    const response = SpreadsheetApp.getUi().alert(
      'üßπ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bucket',
      '‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Bucket\n\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (MAX_NAME_LENGTH)\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cache ‡∏≠‡∏∑‡πà‡∏ô‡πÜ\n' +
      '‚Ä¢ Format ‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n\n' +
      '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      SpreadsheetApp.getUi().ButtonSet.YES_NO
    );
    
    if (response === SpreadsheetApp.getUi().Button.YES) {
      bucketSheet.clearContents();
      bucketSheet.clearFormats();
      
      SpreadsheetApp.getUi().alert(
        '‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bucket ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
        '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Bucket ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß\n\n' +
        '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î\n' +
        '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cache ‡∏≠‡∏∑‡πà‡∏ô‡πÜ\n' +
        '‚Ä¢ Format ‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n\n' +
        '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Player ID ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ',
        SpreadsheetApp.getUi().ButtonSet.OK
      );
      
      console.log('‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Bucket ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    }
    
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Bucket:', error);
    SpreadsheetApp.getUi().alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Bucket');
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó Bucket (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
function getMaxNameLengthFromBucket() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const bucketSheet = ss.getSheetByName('Bucket');
    
    if (!bucketSheet) {
      console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Bucket');
      return 200; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏µ‡∏ó Bucket ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const lastColumn = bucketSheet.getLastColumn();
    if (lastColumn === 0) {
      console.log('‡∏ä‡∏µ‡∏ó Bucket ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤');
      return 200; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    }
    
    // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå MAX_NAME_LENGTH
    const headerRow = bucketSheet.getRange(1, 1, 1, lastColumn).getValues()[0];
    const maxNameLengthCol = headerRow.findIndex(cell => cell === 'MAX_NAME_LENGTH') + 1;
    
    if (maxNameLengthCol === 0) {
      console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå MAX_NAME_LENGTH ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Bucket');
      return 200; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    const maxNameLength = bucketSheet.getRange(1, maxNameLengthCol + 1).getValue();
    
    if (maxNameLength && typeof maxNameLength === 'number') {
      console.log(`‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Bucket: ${maxNameLength} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£`);
      return maxNameLength;
    } else {
      console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô Bucket');
      return 200; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    }
    
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å Bucket:', error);
    return 200; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ß)
function setupColumnWidthsOnce() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const pairingSheet = ss.getSheetByName('Pairing');
    
    if (!pairingSheet) {
      console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Pairing');
      return;
    }
    
    // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å Bucket (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å)
    const maxNameLength = getMaxNameLengthFromBucket();
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    const minWidth = 200; // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    const maxWidth = 400; // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    const playerNameWidth = Math.max(minWidth, Math.min(maxWidth, maxNameLength * 8 + 20));
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    const columnWidths = {
      1: 80,   // ROUND
      2: 80,   // TABLE
      3: 100,  // P1_ID
      4: playerNameWidth,  // PLAYER 1 (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Bucket)
      5: 60,   // WIN_P1
      6: 60,   // DRAW
      7: 60,   // WIN_P2
      8: 60,   // Double Loss
      9: 100,  // P2_ID
      10: playerNameWidth, // PLAYER 2 (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Bucket)
      11: 80,  // RESULT
      12: 100  // STATUS
    };
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    Object.keys(columnWidths).forEach(col => {
      pairingSheet.setColumnWidth(parseInt(col), columnWidths[col]);
    });
    
    console.log(`‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Bucket: ${maxNameLength} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ = ${playerNameWidth}px)`);
    
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:', error);
  }
}

// üìè ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏ö‡∏ö Smart (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
function smartResizeAllSheets() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // ‡πÉ‡∏ä‡πâ setupColumnWidthsOnce ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å
    const pairingSheet = ss.getSheetByName('Pairing');
    if (pairingSheet && pairingSheet.getLastRow() > 1) {
      setupColumnWidthsOnce();
      console.log('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Pairing (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Bucket)');
    }
    
    // ‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Standing ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    const standingSheet = ss.getSheetByName('Standing');
    if (standingSheet && standingSheet.getLastRow() > 1) {
      setupStandingColumnWidthsOnce();
      console.log('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Standing (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Bucket)');
    }
    
    SpreadsheetApp.getUi().alert('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Bucket)');
    
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:', error);
    SpreadsheetApp.getUi().alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå');
  }
}

// ‚ö° ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô smartResizeAllSheetsSilent ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô - ‡πÉ‡∏ä‡πâ formatPairingComplete ‡πÅ‡∏ó‡∏ô
// function smartResizeAllSheetsSilent() {
//   // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö formatPairingComplete
// }

// üìè ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Standing

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Standing ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
function setupStandingColumnWidthsOnce() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const standingSheet = ss.getSheetByName('Standing');
    
    if (!standingSheet) {
      console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Standing');
      return;
    }
    
    // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å Bucket ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Player Name (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C)
    const maxPlayerNameLength = getMaxNameLengthFromBucket();
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Player Name (C) ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    const minNameWidth = 150; // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    const maxNameWidth = 300; // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    const nameWidth = Math.max(minNameWidth, Math.min(maxNameWidth, maxPlayerNameLength * 8 + 20));

    // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö H2H (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
    const h2hWidth = 350; // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ß
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Standing ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    const standingColumnWidths = {
      1: 60,   // RANK
      2: 80,   // PLAYER ID
      3: nameWidth,  // PLAYER NAME (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Bucket)
      4: 100,  // TR_ID
      5: 60,   // WINS
      6: 60,   // DRAWS
      7: 60,   // LOSSES
      8: 60,   // POINTS
      9: 80,   // WIN RATE
      10: 80,  // OW%
      11: 80,  // H2H
      12: h2hWidth  // H2H (‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà)
    };
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    Object.keys(standingColumnWidths).forEach(col => {
      standingSheet.setColumnWidth(parseInt(col), standingColumnWidths[col]);
    });
    
    console.log(`‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Standing ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß: C ‡πÄ‡∏õ‡πá‡∏ô ${nameWidth}px, L ‡πÄ‡∏õ‡πá‡∏ô ${h2hWidth}px (‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà)`);
    
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Standing:', error);
  }
}

// üìè ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Standing (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤ - ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß)
// function resizeStandingColumns(standingSheet) {
//   // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö setupStandingColumnWidthsOnce
// }

// üéØ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£ (‡∏£‡∏ß‡∏°‡∏™‡∏µ, ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå, ‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏£‡∏≠‡∏ö) - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
function completePairingFormat() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const pairingSheet = ss.getSheetByName('Pairing');
    
    if (!pairingSheet || pairingSheet.getLastRow() <= 1) {
      console.log('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing');
      return;
    }
    
    console.log('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£...');
    
    // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£ format ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
    formatPairingComplete(pairingSheet);
    
    console.log('‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
  } catch (error) {
    console.log('Error in completePairingFormat:', error);
  }
}

// üé® ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£ format ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô) - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ß
function formatPairingComplete(pairingSheet) {
  try {
    if (!pairingSheet || pairingSheet.getLastRow() <= 1) {
      console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing');
      return;
    }
    
    const lastRow = pairingSheet.getLastRow();
    const data = pairingSheet.getRange(2, 1, lastRow - 1, pairingSheet.getLastColumn()).getValues();
    
    // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å Bucket (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å)
    const maxNameLength = getMaxNameLengthFromBucket();
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    const minWidth = 200; // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    const maxWidth = 400; // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    const playerNameWidth = Math.max(minWidth, Math.min(maxWidth, maxNameLength * 8 + 20));
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    const columnWidths = {
      1: 80,   // ROUND
      2: 80,   // TABLE
      3: 100,  // P1_ID
      4: playerNameWidth,  // PLAYER 1 (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Bucket)
      5: 60,   // WIN_P1
      6: 60,   // DRAW
      7: 60,   // WIN_P2
      8: 60,   // Double Loss
      9: 100,  // P2_ID
      10: playerNameWidth, // PLAYER 2 (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Bucket)
      11: 80,  // RESULT
      12: 100  // STATUS
    };
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    Object.keys(columnWidths).forEach(col => {
      pairingSheet.setColumnWidth(parseInt(col), columnWidths[col]);
    });
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    for (let i = 2; i <= lastRow; i++) {
      pairingSheet.setRowHeight(i, 35);
    }
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    const headerRange = pairingSheet.getRange(1, 1, 1, pairingSheet.getLastColumn());
    headerRange.setBackground('#1f2937');
    headerRange.setFontColor('#ffffff');
    headerRange.setFontWeight('bold');
    headerRange.setHorizontalAlignment('center');
    headerRange.setBorder(true, true, true, true, true, true, '#374151', SpreadsheetApp.BorderStyle.SOLID);
    
    // ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö
    const roundColors = [
      '#e3f2fd', '#f3e5f5', '#e8f5e8', '#fff3e0', '#fce4ec',
      '#e0f2f1', '#f1f8e9', '#fff8e1', '#e8eaf6', '#ffebee'
    ];
    
    // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    let currentRound = null;
    let colorIndex = 0;
    let roundStart = 0;
    
    for (let i = 0; i <= data.length; i++) {
      const round = i < data.length ? data[i][0] : null;
      
      if (round !== currentRound) {
        // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
        if (currentRound !== null && i > roundStart) {
          const rowCount = i - roundStart;
          const roundRange = pairingSheet.getRange(roundStart + 2, 1, rowCount, pairingSheet.getLastColumn());
          
          // ‡πÉ‡∏™‡πà‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
          roundRange.setBackground(roundColors[colorIndex]);
          
          // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
          roundRange.setFontWeight('normal');
          roundRange.setHorizontalAlignment('center');
          roundRange.setBorder(true, true, true, true, true, true, '#d1d5db', SpreadsheetApp.BorderStyle.SOLID);
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
          if (roundStart > 0) {
            const borderRange = pairingSheet.getRange(roundStart + 2, 1, 1, pairingSheet.getLastColumn());
            borderRange.setBorder(true, null, null, null, null, null, '#374151', SpreadsheetApp.BorderStyle.SOLID_THICK);
          }
          
          // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢
          const p1NameRange = pairingSheet.getRange(roundStart + 2, 4, rowCount, 1);
          const p2NameRange = pairingSheet.getRange(roundStart + 2, 10, rowCount, 1);
          p1NameRange.setHorizontalAlignment('left');
          p2NameRange.setHorizontalAlignment('left');
          
          console.log(`‡∏£‡∏≠‡∏ö ${currentRound}: ‡πÅ‡∏ñ‡∏ß ${roundStart + 2}-${roundStart + 1 + rowCount} ‡πÉ‡∏ä‡πâ‡∏™‡∏µ ${roundColors[colorIndex]}`);
        }
        
        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
        if (round !== null && round !== '') {
          currentRound = round;
          colorIndex = (round - 1) % roundColors.length;
          roundStart = i;
        }
      }
    }
    
    // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Standing - ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
    // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å resizeStandingColumns ‡∏≠‡∏≠‡∏Å
    
    console.log(`‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Bucket: ${maxNameLength} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ = ${playerNameWidth}px)`);
    
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£:', error);
  }
}

// ‚ö° ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô separateRoundsVisually ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô - ‡πÉ‡∏ä‡πâ formatPairingComplete ‡πÅ‡∏ó‡∏ô
// function separateRoundsVisually() {
//   // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö formatPairingComplete
// }

// üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô onEdit - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏µ‡∏ó

// üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô onEdit - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏µ‡∏ó (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
function onEdit(e) {
  try {
    const sheet = e.source.getActiveSheet();
    const sheetName = sheet.getName();
    const range = e.range;
    const row = range.getRow();
    const col = range.getColumn();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing ‡∏´‡∏£‡∏∑‡∏≠ Round Robin
    if (sheetName === 'Pairing' || sheetName === 'Round Robin') {
      console.log(`onEdit triggered: ${sheetName}, Row: ${row}, Col: ${col}`);
      
      // ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å (header)
      if (row === 1) return;
      
      // ‡∏î‡∏∂‡∏á headers
      const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
      
      // ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
      const winP1Col = headers.indexOf("WIN_P1") + 1;
      const drawCol = headers.indexOf("DRAW") + 1;
      const winP2Col = headers.indexOf("WIN_P2") + 1;
      const doubleLossCol = headers.indexOf("Double Loss") + 1;
      const resultCol = headers.indexOf("RESULT") + 1;
      const statusCol = headers.indexOf("STATUS") + 1;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå checkbox ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (col === winP1Col || col === drawCol || col === winP2Col || col === doubleLossCol) {
        console.log(`Checkbox changed at row ${row}, col ${col}`);
        
        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡πä‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô Double Loss)
        const currentValue = sheet.getRange(row, col).getValue() === true;
        
        if (currentValue && col !== doubleLossCol) {
          // ‡∏•‡∏ö checkbox ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡πä‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          if (col !== winP1Col) sheet.getRange(row, winP1Col).setValue(false);
          if (col !== drawCol) sheet.getRange(row, drawCol).setValue(false);
          if (col !== winP2Col) sheet.getRange(row, winP2Col).setValue(false);
          if (col !== doubleLossCol) sheet.getRange(row, doubleLossCol).setValue(false);
        }
        
        // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ checkbox ‡∏ó‡∏±‡πâ‡∏á 4 ‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
        const winP1 = sheet.getRange(row, winP1Col).getValue() === true;
        const draw = sheet.getRange(row, drawCol).getValue() === true;
        const winP2 = sheet.getRange(row, winP2Col).getValue() === true;
        const doubleLoss = sheet.getRange(row, doubleLossCol).getValue() === true;
        
        let result = "";
        let status = "";
        
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î result ‡πÅ‡∏•‡∏∞ status ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡πä‡∏Å checkbox
        if (doubleLoss) {
          result = "0:0";
          status = "Double Loss";
          // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å checkbox ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡πä‡∏Å Double Loss
          if (winP1) sheet.getRange(row, winP1Col).setValue(false);
          if (draw) sheet.getRange(row, drawCol).setValue(false);
          if (winP2) sheet.getRange(row, winP2Col).setValue(false);
        } else if (winP1) {
          result = "1:0";
          status = "PENDING";
        } else if (draw) {
          result = "1:1";
          status = "PENDING";
        } else if (winP2) {
          result = "0:1";
          status = "PENDING";
        } else {
          result = "";
          status = "";
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï RESULT ‡πÅ‡∏•‡∏∞ STATUS
        if (resultCol > 0) {
          sheet.getRange(row, resultCol).setValue(result);
        }
        if (statusCol > 0) {
          sheet.getRange(row, statusCol).setValue(status);
        }
        
        console.log(`Updated Row ${row}: Result="${result}", Status="${status}"`);
        
        // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö debouncing ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
        if (result && result !== "") {
          console.log(`Result updated for row ${row}: ${result}`);
          
          // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Status ‡πÄ‡∏õ‡πá‡∏ô OK ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
          if (statusCol > 0) {
            sheet.getRange(row, statusCol).setValue("OK");
          }
          
          // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö debouncing ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
          scheduleStandingsUpdate();
        }
      }
    }
    
  } catch (error) {
    console.log('Error in onEdit:', error);
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
function checkIfShouldAutoUpdateStandings() {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö rate limiting - ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    const now = Date.now();
    if (globalLastStandingsCheck && (now - globalLastStandingsCheck) < 5000) { // 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      console.log('‚è≥ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Standings ‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ - ‡∏Ç‡πâ‡∏≤‡∏°');
      return false;
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    globalLastStandingsCheck = now;
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const pairingSheet = ss.getSheetByName('Pairing');
    
    if (!pairingSheet) return false;
    
    const data = pairingSheet.getDataRange().getValues();
    if (data.length <= 1) return false; // ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà header
    
    const headers = data[0];
    const roundCol = headers.indexOf("ROUND") + 1;
    const resultCol = headers.indexOf("RESULT") + 1;
    const statusCol = headers.indexOf("STATUS") + 1;
    
    if (roundCol === 0 || resultCol === 0 || statusCol === 0) return false;
    
    // ‡∏´‡∏≤‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const rounds = data.slice(1).map(row => row[roundCol - 1]).filter(r => r && r !== '');
    if (rounds.length === 0) return false;
    
    const lastRound = Math.max(...rounds);
    console.log(`‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${lastRound}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÇ‡∏ï‡πä‡∏∞‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const lastRoundRows = data.slice(1).filter(row => row[roundCol - 1] === lastRound);
    console.log(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${lastRoundRows.length}`);
    
    if (lastRoundRows.length === 0) return false;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÇ‡∏ï‡πä‡∏∞‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const completedMatches = lastRoundRows.filter(row => {
      const result = row[resultCol - 1];
      const status = row[statusCol - 1];
      return result && result !== '' && status === 'OK';
    });
    
    console.log(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: ${completedMatches.length}/${lastRoundRows.length}`);
    
    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÇ‡∏ï‡πä‡∏∞‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings
    if (completedMatches.length === lastRoundRows.length) {
      console.log('‚úÖ ‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÇ‡∏ï‡πä‡∏∞‡πÅ‡∏•‡πâ‡∏ß - ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings');
      return true;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const completionRate = completedMatches.length / lastRoundRows.length;
    
    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà 1: ‡∏Ñ‡∏£‡∏ö 80% ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞
    if (completionRate >= 0.8) {
      console.log(`üîÑ ‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ${Math.round(completionRate * 100)}% - ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings`);
      return true;
    }
    
    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà 2: ‡∏£‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö 50% ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
    const allRounds = [...new Set(rounds)];
    const isLastRound = lastRound === Math.max(...allRounds);
    
    if (isLastRound && completionRate >= 0.5) {
      console.log(`üèÅ ‡∏£‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ${Math.round(completionRate * 100)}% - ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings (‡∏£‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)`);
      return true;
    }
    
    console.log(`‚è≥ ‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ${Math.round(completionRate * 100)}% - ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings`);
    return false;
    
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings:', error);
    return false;
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
function updateStandingsInBackground() {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö rate limiting - ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    const now = Date.now();
    if (globalLastStandingsUpdate && (now - globalLastStandingsUpdate) < 10000) { // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      console.log('‚è≥ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ - ‡∏Ç‡πâ‡∏≤‡∏°');
      return;
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    globalLastStandingsUpdate = now;
    
    console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á...');
    
    // ‡πÉ‡∏ä‡πâ try-catch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    try {
      updateStandings();
      console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings:', error);
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    }
    
  } catch (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô updateStandingsInBackground:', error);
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏£‡∏∞‡∏ö‡∏ö debouncing ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings
function scheduleStandingsUpdate() {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (globalStandingsUpdateScheduled) {
      console.log('‚è≥ ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß - ‡∏Ç‡πâ‡∏≤‡∏°');
      return;
    }
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    globalStandingsUpdateScheduled = true;
    
    console.log('‚è∞ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÉ‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...');
    
    // ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏î checkbox
    Utilities.sleep(3000);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const shouldAutoUpdate = checkIfShouldAutoUpdateStandings();
    if (shouldAutoUpdate) {
      console.log('üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï...');
      try {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
        updateStandingsInBackground();
        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } catch (error) {
        console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings:', error);
      }
    } else {
      console.log('‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings - ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô');
    }
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    globalStandingsUpdateScheduled = false;
    
  } catch (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô scheduleStandingsUpdate:', error);
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    globalStandingsUpdateScheduled = false;
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
function checkRoundCompletion() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const pairingSheet = ss.getSheetByName('Pairing');
    
    if (!pairingSheet) {
      SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Pairing');
      return;
    }
    
    const data = pairingSheet.getDataRange().getValues();
    if (data.length <= 1) {
      SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô');
      return;
    }
    
    const headers = data[0];
    const roundCol = headers.indexOf("ROUND") + 1;
    const resultCol = headers.indexOf("RESULT") + 1;
    const statusCol = headers.indexOf("STATUS") + 1;
    
    if (roundCol === 0 || resultCol === 0 || statusCol === 0) {
      SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ROUND, RESULT ‡∏´‡∏£‡∏∑‡∏≠ STATUS');
      return;
    }
    
    // ‡∏´‡∏≤‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const rounds = data.slice(1).map(row => row[roundCol - 1]).filter(r => r && r !== '');
    if (rounds.length === 0) {
      SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô');
      return;
    }
    
    const lastRound = Math.max(...rounds);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const lastRoundRows = data.slice(1).filter(row => row[roundCol - 1] === lastRound);
    const completedMatches = lastRoundRows.filter(row => {
      const result = row[resultCol - 1];
      const status = row[statusCol - 1];
      return result && result !== '' && status === 'OK';
    });
    
    const completionRate = completedMatches.length / lastRoundRows.length;
    const pendingMatches = lastRoundRows.length - completedMatches.length;
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    let message = `üìä ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${lastRound}\n\n`;
    message += `üìã ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${lastRoundRows.length}\n`;
    message += `‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: ${completedMatches.length}\n`;
    message += `‚è≥ ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${pendingMatches}\n`;
    message += `üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: ${Math.round(completionRate * 100)}%\n\n`;
    
    if (completionRate === 1) {
      message += 'üéâ ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß!\n';
      message += 'üí° ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î';
      
      const response = SpreadsheetApp.getUi().alert(
        '‚úÖ ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
        message,
        SpreadsheetApp.getUi().ButtonSet.YES_NO
      );
      
      if (response === SpreadsheetApp.getUi().Button.YES) {
        updateStandings();
      }
    } else if (completionRate >= 0.8) {
      message += 'üîÑ ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß (80%+)\n';
      message += 'üí° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß';
      
      const response = SpreadsheetApp.getUi().alert(
        'üîÑ ‡∏£‡∏≠‡∏ö‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß',
        message,
        SpreadsheetApp.getUi().ButtonSet.YES_NO
      );
      
      if (response === SpreadsheetApp.getUi().Button.YES) {
        updateStandings();
      }
    } else {
      message += '‚è≥ ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö\n';
      message += 'üí° ‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings';
      
      SpreadsheetApp.getUi().alert(
        '‚è≥ ‡∏£‡∏≠‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö',
        message,
        SpreadsheetApp.getUi().ButtonSet.OK
      );
    }
    
    console.log(`‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${lastRound}: ${Math.round(completionRate * 100)}%`);
    
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö:', error);
    SpreadsheetApp.getUi().alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error.message, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings
function resetStandingsUpdateFlags() {
  try {
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    globalStandingsUpdateScheduled = false;
    globalLastStandingsCheck = 0;
    globalLastStandingsUpdate = 0;
    
    console.log('‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
    SpreadsheetApp.getUi().alert(
      '‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß\n\n' +
      '‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:', error);
    SpreadsheetApp.getUi().alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error.message, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

// üß™ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö Player ID
function testPlayerIdSorting() {
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const testPlayers = [
      { id: 'PO1', name: 'Player 1', display: 'PO1 - Player 1' },
      { id: 'PO10', name: 'Player 10', display: 'PO10 - Player 10' },
      { id: 'PO2', name: 'Player 2', display: 'PO2 - Player 2' },
      { id: 'PO20', name: 'Player 20', display: 'PO20 - Player 20' },
      { id: 'PO3', name: 'Player 3', display: 'PO3 - Player 3' },
      { id: 'PO30', name: 'Player 30', display: 'PO30 - Player 30' },
      { id: 'PO4', name: 'Player 4', display: 'PO4 - Player 4' },
      { id: 'PO5', name: 'Player 5', display: 'PO5 - Player 5' },
      { id: 'PO6', name: 'Player 6', display: 'PO6 - Player 6' },
      { id: 'PO7', name: 'Player 7', display: 'PO7 - Player 7' },
      { id: 'PO8', name: 'Player 8', display: 'PO8 - Player 8' },
      { id: 'PO9', name: 'Player 9', display: 'PO9 - Player 9' }
    ];
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
    const sortedPlayers = sortPlayerIds(testPlayers);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    let message = 'üß™ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö Player ID:\n\n';
    message += 'üìã ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö (‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°):\n';
    testPlayers.forEach((player, index) => {
      message += `${index + 1}. ${player.display}\n`;
    });
    
    message += '\n‚úÖ ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö (‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà):\n';
    sortedPlayers.forEach((player, index) => {
      message += `${index + 1}. ${player}\n`;
    });
    
    message += '\nüí° ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    
    SpreadsheetApp.getUi().alert(
      'üß™ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
      message,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    
    console.log('‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö Player ID ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
    SpreadsheetApp.getUi().alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error.message, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö Player ID ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
function sortPlayerIds(playersList) {
  try {
    return playersList
      .map(player => ({ id: player.id, name: player.name, display: player.display }))
      .sort((a, b) => {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        const aNum = parseInt(a.id.replace(/[^0-9]/g, '')) || 0;
        const bNum = parseInt(b.id.replace(/[^0-9]/g, '')) || 0;
        return aNum - bNum;
      })
      .map(player => player.display);
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö Player ID:', error);
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
    return playersList.map(player => player.display).sort();
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Status ‡πÄ‡∏õ‡πá‡∏ô OK ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
function updatePendingStatusToOK() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const pairingSheet = ss.getSheetByName('Pairing');
    
    if (!pairingSheet) {
      SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Pairing');
      return;
    }
    
    const data = pairingSheet.getDataRange().getValues();
    const headers = data[0];
    
    // ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    const resultCol = headers.indexOf("RESULT") + 1;
    const statusCol = headers.indexOf("STATUS") + 1;
    
    if (resultCol === 0 || statusCol === 0) {
      SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå RESULT ‡∏´‡∏£‡∏∑‡∏≠ STATUS');
      return;
    }
    
    let updatedCount = 0;
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Status ‡πÄ‡∏õ‡πá‡∏ô OK ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ RESULT ‡πÅ‡∏ï‡πà STATUS ‡∏¢‡∏±‡∏á PENDING
    for (let i = 1; i < data.length; i++) {
      const result = data[i][resultCol - 1];
      const status = data[i][statusCol - 1];
      
      if (result && result !== '' && status === 'PENDING') {
        pairingSheet.getRange(i + 1, statusCol).setValue('OK');
        updatedCount++;
      }
    }
    
    SpreadsheetApp.getUi().alert(
      '‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Status ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Status ‡πÄ‡∏õ‡πá‡∏ô OK ‡πÅ‡∏•‡πâ‡∏ß ${updatedCount} ‡πÅ‡∏ñ‡∏ß\n\n` +
      '‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î "üîÅ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏î‡πâ',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    
    console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Status ‡πÄ‡∏õ‡πá‡∏ô OK ‡πÅ‡∏•‡πâ‡∏ß ${updatedCount} ‡πÅ‡∏ñ‡∏ß`);
    
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Status:', error);
    SpreadsheetApp.getUi().alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error.message, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

  
  // üö´ Drop ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠)
function dropPlayerFromList() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const pairingSheet = ss.getSheetByName('Pairing');
    const bucketSheet = ss.getSheetByName('Bucket');
    
    // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÉ‡∏ä‡πâ Bucket cache ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    let activePlayersList = [];
    
    if (bucketSheet && bucketSheet.getLastRow() > 1) {
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Bucket
      const bucketData = bucketSheet.getRange(2, 1, bucketSheet.getLastRow() - 1, 6).getValues();
      const bucketPlayers = bucketData
        .filter(row => row[4] === 'ACTIVE') // Status = ACTIVE
        .map(row => ({ id: row[0], name: row[1], display: `${row[0]} - ${row[1]}` }));
      
      activePlayersList = sortPlayerIds(bucketPlayers);
    } else {
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Players sheet (‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
      const playersSheet = ss.getSheetByName('Players');
      if (!playersSheet || playersSheet.getLastRow() <= 1) {
        SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô');
        return;
      }
      
      const playersData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 4).getValues();
      const currentDropList = pairingSheet.getRange('M2:M').getValues().flat().filter(name => name);
      const dropSet = new Set(currentDropList.map(x => x.trim()));
  
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ dropSet ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (!dropSet || !(dropSet instanceof Set)) {
        console.log('‚ö†Ô∏è dropSet ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà');
        dropSet = new Set(currentDropList.map(x => x.trim()));
      }
      
      const playersList = playersData
        .filter(row => row[0] && row[1] && !dropSet.has(row[0]) && !dropSet.has(row[1]))
        .map(row => ({ id: row[0], name: row[1], display: `${row[0]} - ${row[1]}` }));
      
      activePlayersList = sortPlayerIds(playersList);
    }
    
    if (activePlayersList.length === 0) {
      SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ drop ‡πÑ‡∏î‡πâ');
      return;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á dialog ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    const ui = SpreadsheetApp.getUi();
    const response = ui.prompt(
      'üö´ Drop ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô',
      `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ drop:\n\n${activePlayersList.map((player, index) => `${index + 1}. ${player}`).join('\n')}\n\n‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç (1-${activePlayersList.length}):`,
      ui.ButtonSet.OK_CANCEL
    );
    
    if (response.getSelectedButton() === ui.Button.OK) {
      const selectedIndex = parseInt(response.getResponseText().trim()) - 1;
      
      if (selectedIndex >= 0 && selectedIndex < activePlayersList.length) {
        const selectedPlayer = activePlayersList[selectedIndex];
        const playerId = selectedPlayer.split(' - ')[0];
        const playerName = selectedPlayer.split(' - ')[1];
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏•‡∏á‡πÉ‡∏ô drop list (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå M)
        const dropColumn = pairingSheet.getRange('M:M');
        const dropValues = dropColumn.getValues();
        
        // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå M
        let emptyRow = 2; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß 2
        for (let i = 1; i < dropValues.length; i++) {
          if (!dropValues[i][0] || dropValues[i][0] === '') {
            emptyRow = i + 1;
            break;
          }
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Drop
        pairingSheet.getRange(emptyRow, 13).setValue(playerName); // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå M = 13
        
        // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if (bucketSheet) {
          const bucketData = bucketSheet.getRange('A:F').getValues();
          for (let i = 1; i < bucketData.length; i++) {
            if (bucketData[i][0] === playerId || bucketData[i][1] === playerName) {
              bucketSheet.getRange(i + 1, 4).setValue('DROP'); // Rank
              bucketSheet.getRange(i + 1, 5).setValue('DROPPED'); // Status
              bucketSheet.getRange(i + 1, 6).setValue(new Date()); // Last_Updated
              break;
            }
          }
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà drop ‡πÄ‡∏õ‡πá‡∏ô 'DROP'
        updateStandings();
        
        SpreadsheetApp.getUi().alert(
          '‚úÖ Drop ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          `‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô "${playerName}" ‡∏ñ‡∏π‡∏Å drop ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n\n` +
          `‚Ä¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô "DROP" ‡πÉ‡∏ô Standing\n` +
          `‚Ä¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ\n` +
          `‚Ä¢ Bucket cache ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß\n` +
          `‚Ä¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å drop ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Drop ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô"`,
          SpreadsheetApp.getUi().ButtonSet.OK
        );
        
      } else {
        SpreadsheetApp.getUi().alert('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }
    }
    
  } catch (error) {
    console.log('Error in dropPlayerFromList:', error);
    SpreadsheetApp.getUi().alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ drop ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ' + error.toString());
  }
}

// ‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Drop ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
function cancelPlayerDrop() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const pairingSheet = ss.getSheetByName('Pairing');
    
    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà drop ‡πÅ‡∏•‡πâ‡∏ß
    const dropList = pairingSheet.getRange('M2:M').getValues().flat().filter(name => name);
    
    if (dropList.length === 0) {
      SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å drop');
      return;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á dialog ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å drop
    const ui = SpreadsheetApp.getUi();
    const response = ui.prompt(
      '‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Drop ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô',
      `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å drop:\n\n${dropList.map((player, index) => `${index + 1}. ${player}`).join('\n')}\n\n‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç (1-${dropList.length}):`,
      ui.ButtonSet.OK_CANCEL
    );
    
    if (response.getSelectedButton() === ui.Button.OK) {
      const selectedIndex = parseInt(response.getResponseText().trim()) - 1;
      
      if (selectedIndex >= 0 && selectedIndex < dropList.length) {
        const playerToRestore = dropList[selectedIndex];
        
        // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå M ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
        const dropColumn = pairingSheet.getRange('M:M');
        const dropValues = dropColumn.getValues();
        
        for (let i = 1; i < dropValues.length; i++) {
          if (dropValues[i][0] === playerToRestore) {
            pairingSheet.getRange(i + 1, 13).clearContent(); // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå M = 13
            break;
          }
        }
        
        // ‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        const bucketSheet = ss.getSheetByName('Bucket');
        if (bucketSheet) {
          const bucketData = bucketSheet.getRange('A:F').getValues();
          for (let i = 1; i < bucketData.length; i++) {
            if (bucketData[i][1] === playerToRestore) {
              bucketSheet.getRange(i + 1, 4).setValue('ACTIVE'); // Rank
              bucketSheet.getRange(i + 1, 5).setValue('ACTIVE'); // Status
              bucketSheet.getRange(i + 1, 6).setValue(new Date()); // Last_Updated
              break;
            }
          }
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings
        updateStandings();
        
        // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏ó‡∏≥‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô drop ‡πÅ‡∏•‡πâ‡∏ß)
        
        SpreadsheetApp.getUi().alert(
          '‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Drop ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          `‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô "${playerToRestore}" ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n\n` +
          `‚Ä¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ô Standing\n` +
          `‚Ä¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ`,
          SpreadsheetApp.getUi().ButtonSet.OK
        );
        
      } else {
        SpreadsheetApp.getUi().alert('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }
    }
    
  } catch (error) {
    console.log('Error in cancelPlayerDrop:', error);
    SpreadsheetApp.getUi().alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å drop ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ' + error.toString());
  }
}

// üìû ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡∏°‡∏µ 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
function fixPhoneNumbers() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const playersSheet = ss.getSheetByName('Players');
    
    if (!playersSheet || playersSheet.getLastRow() <= 1) {
      SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô');
      return;
    }
    
    const lastRow = playersSheet.getLastRow();
    const telRange = playersSheet.getRange(2, 4, lastRow - 1, 1); // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå D (Tel)
    const telValues = telRange.getValues();
    
    let fixedCount = 0;
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô text format ‡∏Å‡πà‡∏≠‡∏ô
    telRange.setNumberFormat('@');
    
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á
    for (let i = 0; i < telValues.length; i++) {
      const currentTel = telValues[i][0];
      if (currentTel && currentTel !== '') {
        let formattedTel = currentTel.toString().trim();
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0 ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
        if (!formattedTel.startsWith('0') && formattedTel.length >= 9) {
          formattedTel = '0' + formattedTel;
          
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
          const cell = playersSheet.getRange(i + 2, 4);
          cell.setNumberFormat('@'); // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô text format
          cell.setValue(formattedTel);
          
          fixedCount++;
          console.log(`Fixed phone: ${currentTel} ‚Üí ${formattedTel}`);
        }
      }
    }
    
    SpreadsheetApp.getUi().alert(
      '‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${fixedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n` +
      `‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏° 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ\n` +
      `‚Ä¢ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô text format ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤ 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤\n` +
      `‚Ä¢ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 936106031 ‚Üí 0936106031`,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    
  } catch (error) {
    console.log('Error in fixPhoneNumbers:', error);
    SpreadsheetApp.getUi().alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ' + error.toString());
  }
}

// üìÑ Export ‡πÄ‡∏õ‡πá‡∏ô CSV
function exportToCSV() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const standingSheet = ss.getSheetByName('Standing');
  const playersSheet = ss.getSheetByName('Players');
  
  const currentDate = new Date().toLocaleDateString('th-TH');
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV
  let csvContent = `Pokemon TCG Tournament Report - ${currentDate}\n\n`;
  
  // 1. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  csvContent += '=== ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ===\n';
  csvContent += 'Player ID,Name,TR ID,Tel\n';
  const playersData = playersSheet.getRange(2, 1, playersSheet.getLastRow()-1, 4).getValues();
  playersData.forEach(row => {
    if (row[0]) {
      const name = row[1] || '';
      const trId = row[2] || '';
      const tel = row[3] || '';
      csvContent += `${row[0]},${name},${trId},${tel}\n`;
    }
  });
  
  // 2. ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö
  csvContent += '\n=== ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà ===\n';
  csvContent += 'Round,Table,Player 1,Player 2,Result,Date\n';
  const pairingData = pairingSheet.getRange(2, 1, pairingSheet.getLastRow()-1, 11).getValues();
  pairingData.forEach(row => {
    if (row[0] && row[3] && row[9]) { // ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö, ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô1, ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô2
      const round = row[0];
      const table = row[2] || '';
      const player1 = row[3];
      const player2 = row[9];
      const result = row[10] || '';
      csvContent += `${round},${table},${player1},${player2},${result},${currentDate}\n`;
    }
  });
  
  // 3. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (Standings)
  csvContent += '\n=== ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ===\n';
  csvContent += 'Rank,Player ID,Name,TR ID,Played,Wins,Draws,Losses,Points,Win Rate,OW%\n';
  const standingsData = standingSheet.getRange(2, 1, standingSheet.getLastRow()-1, 11).getValues();
  standingsData.forEach(row => {
    if (row[0] && row[1]) {
      csvContent += `${row[0]},${row[1]},${row[2]},${row[3]},${row[4]},${row[5]},${row[6]},${row[7]},${row[8]},${row[9]},${row[10]}\n`;
    }
  });
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSV
  const fileName = `Pokemon_TCG_Tournament_Report_${new Date().toISOString().split('T')[0]}.csv`;
  const blob = Utilities.newBlob(csvContent, 'text/csv', fileName);
  
  // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
  const file = DriveApp.createFile(blob);
  const url = file.getDownloadUrl();
  
  SpreadsheetApp.getUi().alert(`‚úÖ Export CSV ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n\n‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: ${fileName}\n\n‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î:\n${url}`);
}

// üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó Report ‡πÉ‡∏´‡∏°‡πà
function createReportSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡∏µ‡∏ó Report ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  let reportSheet = ss.getSheetByName('Tournament Report');
  if (reportSheet) {
    const response = SpreadsheetApp.getUi().alert(
      '‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
      '‡∏°‡∏µ‡∏ä‡∏µ‡∏ó Tournament Report ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      SpreadsheetApp.getUi().ButtonSet.YES_NO
    );
    if (response === SpreadsheetApp.getUi().Button.NO) return;
    ss.deleteSheet(reportSheet);
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó‡πÉ‡∏´‡∏°‡πà
  reportSheet = ss.insertSheet('Tournament Report');
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ Report
  createReportContent(reportSheet);
  
  SpreadsheetApp.getUi().alert('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó Report ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n\n‡∏ä‡∏µ‡∏ó Tournament Report ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß');
}

// üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ Report
function createReportContent(sheet) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const standingSheet = ss.getSheetByName('Standing');
  const playersSheet = ss.getSheetByName('Players');
  
  const currentDate = new Date().toLocaleDateString('th-TH');
  
  // Header
  sheet.getRange('A1').setValue('üèÜ POKEMON TCG TOURNAMENT REPORT');
  sheet.getRange('A1:F1').merge();
  sheet.getRange('A1').setFontSize(18).setFontWeight('bold').setHorizontalAlignment('center');
  sheet.getRange('A1').setBackground('#4285f4').setFontColor('white');
  
  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
  sheet.getRange('A2').setValue(`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${currentDate}`);
  sheet.getRange('A2:F2').merge();
  sheet.getRange('A2').setFontSize(12).setHorizontalAlignment('center');
  
  // ‡∏™‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  const totalPlayers = playersSheet.getLastRow() - 1;
  const totalRounds = Math.max(...pairingSheet.getRange('A2:A').getValues().flat().filter(r => r)) || 0;
  const completedMatches = pairingSheet.getRange('K2:K').getValues().flat().filter(r => r).length;
  
  sheet.getRange('A4').setValue('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô');
  sheet.getRange('A4').setFontWeight('bold').setFontSize(14);
  sheet.getRange('A4').setBackground('#f1f3f4');
  
  sheet.getRange('A5').setValue('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô:');
  sheet.getRange('B5').setValue(totalPlayers);
  sheet.getRange('A6').setValue('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö:');
  sheet.getRange('B6').setValue(totalRounds);
  sheet.getRange('A7').setValue('‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô:');
  sheet.getRange('B7').setValue(completedMatches);
  
  // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Top 10
  sheet.getRange('A9').setValue('üèÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Top 10');
  sheet.getRange('A9').setFontWeight('bold').setFontSize(14);
  sheet.getRange('A9').setBackground('#f1f3f4');
  
  const headers = ['Rank', 'Player ID', 'Name', 'TR ID', 'Played', 'Wins', 'Draws', 'Losses', 'Points', 'Win Rate', 'OW%'];
  
  sheet.getRange(10, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(10, 1, 1, headers.length).setFontWeight('bold').setBackground('#4285f4').setFontColor('white');
  
  const standingsData = standingSheet.getRange(2, 1, Math.min(11, standingSheet.getLastRow()-1), 11).getValues();
  standingsData.forEach((row, index) => {
    if (row[0] && row[1]) {
      sheet.getRange(11 + index, 1, 1, row.length).setValues([row]);
    }
  });
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
  sheet.getRange(10, 1, standingsData.length + 1, headers.length).setBorder(true, true, true, true, true, true);
  
  // ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
  sheet.getRange('A' + (13 + standingsData.length)).setValue('üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà');
  sheet.getRange('A' + (13 + standingsData.length)).setFontWeight('bold').setFontSize(14);
  sheet.getRange('A' + (13 + standingsData.length)).setBackground('#f1f3f4');
  
  const pairingHeaders = ['Round', 'Table', 'Player 1', 'Player 2', 'Result'];
  const startRow = 14 + standingsData.length;
  
  sheet.getRange(startRow, 1, 1, pairingHeaders.length).setValues([pairingHeaders]);
  sheet.getRange(startRow, 1, 1, pairingHeaders.length).setFontWeight('bold').setBackground('#34a853').setFontColor('white');
  
  const pairingData = pairingSheet.getRange(2, 1, pairingSheet.getLastRow()-1, 11).getValues();
  let pairingRow = startRow + 1;
  
  pairingData.forEach(row => {
    if (row[0] && row[3] && row[9]) {
      const pairingRowData = [row[0], row[2] || '', row[3], row[9], row[10] || ''];
      sheet.getRange(pairingRow, 1, 1, pairingRowData.length).setValues([pairingRowData]);
      pairingRow++;
    }
  });
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
  if (pairingRow > startRow + 1) {
    sheet.getRange(startRow, 1, pairingRow - startRow, pairingHeaders.length).setBorder(true, true, true, true, true, true);
  }
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
  sheet.autoResizeColumns(1, Math.max(headers.length, pairingHeaders.length));
}

// üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PDF
function createPDFReport() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const standingSheet = ss.getSheetByName('Standing');
  const playersSheet = ss.getSheetByName('Players');
  
  const currentDate = new Date().toLocaleDateString('th-TH');
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF
  let htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>Pokemon TCG Tournament Report</title>
      <style>
        body { font-family: 'Sarabun', Arial, sans-serif; margin: 20px; }
        .header { text-align: center; background: #4285f4; color: white; padding: 20px; border-radius: 10px; }
        .section { margin: 20px 0; }
        .section-title { background: #f1f3f4; padding: 10px; border-radius: 5px; font-weight: bold; font-size: 16px; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background: #4285f4; color: white; }
        .stats { display: flex; justify-content: space-around; margin: 20px 0; }
        .stat-box { background: #f8f9fa; padding: 15px; border-radius: 5px; text-align: center; border: 1px solid #ddd; }
        .stat-number { font-size: 24px; font-weight: bold; color: #4285f4; }
        .stat-label { font-size: 14px; color: #666; }
        .top3 { background: #ffd700; }
        .top3-2 { background: #c0c0c0; }
        .top3-3 { background: #cd7f32; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>üèÜ POKEMON TCG TOURNAMENT REPORT</h1>
        <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${currentDate}</p>
      </div>
  `;
  
  // ‡∏™‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  const totalPlayers = playersSheet.getLastRow() - 1;
  const totalRounds = Math.max(...pairingSheet.getRange('A2:A').getValues().flat().filter(r => r)) || 0;
  const completedMatches = pairingSheet.getRange('K2:K').getValues().flat().filter(r => r).length;
  
  htmlContent += `
      <div class="section">
        <div class="section-title">üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</div>
        <div class="stats">
          <div class="stat-box">
            <div class="stat-number">${totalPlayers}</div>
            <div class="stat-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô</div>
          </div>
          <div class="stat-box">
            <div class="stat-number">${totalRounds}</div>
            <div class="stat-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö</div>
          </div>
          <div class="stat-box">
            <div class="stat-number">${completedMatches}</div>
            <div class="stat-label">‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</div>
          </div>
        </div>
      </div>
  `;
  
  // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Top 10
  htmlContent += `
      <div class="section">
        <div class="section-title">üèÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Top 10</div>
        <table>
          <thead>
            <tr>
              <th>‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö</th>
              <th>Player ID</th>
              <th>‡∏ä‡∏∑‡πà‡∏≠</th>
              <th>TR ID</th>
              <th>‡πÅ‡∏Ç‡πà‡∏á</th>
              <th>‡∏ä‡∏ô‡∏∞</th>
              <th>‡πÄ‡∏™‡∏°‡∏≠</th>
              <th>‡πÅ‡∏û‡πâ</th>
              <th>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</th>
              <th>%‡∏ä‡∏ô‡∏∞</th>
              <th>%OW</th>
            </tr>
          </thead>
          <tbody>
  `;
  
  const standingsData = standingSheet.getRange(2, 1, Math.min(11, standingSheet.getLastRow()-1), 11).getValues();
  standingsData.forEach((row, index) => {
    if (row[0] && row[1]) {
      const rankClass = index === 0 ? 'top3' : index === 1 ? 'top3-2' : index === 2 ? 'top3-3' : '';
      htmlContent += `
        <tr class="${rankClass}">
          <td>${row[0]}</td>
          <td>${row[1]}</td>
          <td>${row[2]}</td>
          <td>${row[3] || ''}</td>
          <td>${row[4]}</td>
          <td>${row[5]}</td>
          <td>${row[6]}</td>
          <td>${row[7]}</td>
          <td>${row[8]}</td>
          <td>${row[9]}</td>
          <td>${row[10]}</td>
        </tr>
      `;
    }
  });
  
  htmlContent += `
          </tbody>
        </table>
      </div>
  `;
  
  // ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
  htmlContent += `
      <div class="section">
        <div class="section-title">üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà (20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)</div>
        <table>
          <thead>
            <tr>
              <th>‡∏£‡∏≠‡∏ö</th>
              <th>‡πÇ‡∏ï‡πä‡∏∞</th>
              <th>‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 1</th>
              <th>‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 2</th>
              <th>‡∏ú‡∏•</th>
            </tr>
          </thead>
          <tbody>
  `;
  
  const pairingData = pairingSheet.getRange(2, 1, pairingSheet.getLastRow()-1, 11).getValues();
  const recentMatches = pairingData.filter(row => row[0] && row[3] && row[9]).slice(-20);
  
  recentMatches.forEach(row => {
    const round = row[0];
    const table = row[2] || '';
    const player1 = row[3];
    const player2 = row[9];
    const result = row[10] || '';
    
    htmlContent += `
      <tr>
        <td>${round}</td>
        <td>${table}</td>
        <td>${player1}</td>
        <td>${player2}</td>
        <td>${result}</td>
      </tr>
    `;
  });
  
  htmlContent += `
          </tbody>
        </table>
      </div>
      
      <div style="text-align: center; margin-top: 30px; color: #666; font-size: 12px;">
        <p>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö Pokemon TCG Tournament Manager</p>
        <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: ${currentDate}</p>
      </div>
    </body>
    </html>
  `;
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PDF
  const fileName = `Pokemon_TCG_Tournament_Report_${new Date().toISOString().split('T')[0]}.pdf`;
  
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå HTML ‡∏Å‡πà‡∏≠‡∏ô
    const htmlBlob = Utilities.newBlob(htmlContent, 'text/html', 'report.html');
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô PDF (‡πÉ‡∏ä‡πâ Google Drive API)
    const file = DriveApp.createFile(htmlBlob);
    const pdfFile = file.getAs('application/pdf');
    pdfFile.setName(fileName);
    
    // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå HTML ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    DriveApp.getFileById(file.getId()).setTrashed(true);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏ô Drive
    const pdfBlob = Utilities.newBlob(pdfFile.getBytes(), 'application/pdf', fileName);
    const finalFile = DriveApp.createFile(pdfBlob);
    const url = finalFile.getDownloadUrl();
    
    SpreadsheetApp.getUi().alert(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n\n‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: ${fileName}\n\n‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î:\n${url}`);
    
  } catch (error) {
    console.error('Error creating PDF:', error);
    SpreadsheetApp.getUi().alert(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡πÑ‡∏î‡πâ\n\n‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ CSV Export ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó Report ‡πÅ‡∏ó‡∏ô`);
  }
}

// üèãÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á Gym Standing for fill
function createGymStandingForFill() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const standingSheet = ss.getSheetByName('Standing');
  const playersSheet = ss.getSheetByName('Players');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡∏µ‡∏ó Gym Standing for fill ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  let gymSheet = ss.getSheetByName('Gym Standing for fill');
  if (gymSheet) {
    const response = SpreadsheetApp.getUi().alert(
      '‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
      '‡∏°‡∏µ‡∏ä‡∏µ‡∏ó Gym Standing for fill ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      SpreadsheetApp.getUi().ButtonSet.YES_NO
    );
    if (response === SpreadsheetApp.getUi().Button.NO) return;
    ss.deleteSheet(gymSheet);
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó‡πÉ‡∏´‡∏°‡πà
  gymSheet = ss.insertSheet('Gym Standing for fill');
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡∏Å‡πà‡∏≠‡∏ô
  updateStandings();
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó Standing ‡πÅ‡∏•‡∏∞ Players
  const standingsData = standingSheet.getRange(2, 1, standingSheet.getLastRow()-1, 12).getValues();
  const playersData = playersSheet.getRange(2, 1, playersSheet.getLastRow()-1, 4).getValues();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏Ç‡∏≠‡∏á Player ID ‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
  const playerPhoneMap = {};
  playersData.forEach(row => {
    if (row[0] && row[3]) { // Player ID ‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
      let phone = row[3];
      const originalPhone = phone;
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
      phone = phone.toString().trim();
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡πâ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0 ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 9 ‡∏´‡∏•‡∏±‡∏Å
      if (phone && phone.length === 9 && !phone.startsWith('0')) {
        phone = '0' + phone;
      }
      
      playerPhoneMap[row[0]] = phone;
      
      // ‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
      console.log(`Player ${row[1]}: Original phone = "${originalPhone}", Formatted phone = "${phone}"`);
    }
  });
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ
  const headers = [
    'Player Name',
    'Player Phone', 
    'Codename',
    '# Rank',
    'Points',
    'matches_played',
    'matches_won',
    'matches_lost',
    'winrate (%)',
    'opp_winrate (%)',
    'note'
  ];
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  gymSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  const headerRange = gymSheet.getRange(1, 1, 1, headers.length);
  headerRange.setBackground('#4a5568'); // ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡πâ‡∏°
  headerRange.setFontColor('#ffffff'); // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
  headerRange.setFontWeight('bold');
  headerRange.setFontSize(12);
  headerRange.setHorizontalAlignment('center');
  headerRange.setVerticalAlignment('middle');
  headerRange.setBorder(true, true, true, true, true, true, '#2d3748', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  let rowIndex = 2;
  standingsData.forEach((row, index) => {
    if (row[0] && row[1] && row[2]) { // ‡∏°‡∏µ Rank, Player ID, ‡πÅ‡∏•‡∏∞ Player Name
      const rank = row[0];
      const playerId = row[1];
      let playerName = row[2];
      const points = row[8] || 0;
      const played = row[4] || 0;
      const wins = row[5] || 0;
      const losses = row[7] || 0;
      const winrate = row[9] ? parseInt(row[9]) : 0;
      const oppWinrate = row[10] ? parseInt(row[10]) : 0;
      const phone = playerPhoneMap[playerId] || '';
      
      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô - ‡∏•‡∏ö "th..." ‡πÅ‡∏•‡∏∞ "_" ‡∏≠‡∏≠‡∏Å ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏ï‡πà‡∏ä‡∏∑‡πà‡∏≠
      if (playerName && typeof playerName === 'string') {
        // ‡∏•‡∏ö "th" + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç + "_" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠
        playerName = playerName.replace(/^th\d+_/, '');
      }
      
      // ‡∏•‡πá‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      console.log(`Creating row for ${playerName}: Phone = "${phone}", Player ID = "${playerId}"`);
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì winrate ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      let calculatedWinrate = 0;
      if (played > 0) {
        calculatedWinrate = Math.round((wins / played) * 100);
      }
      
      const rowData = [
        playerName,           // Player Name
        phone,               // Player Phone
        '',                  // Codename (‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å)
        rank,                // # Rank
        points,              // Points
        played,              // matches_played
        wins,                // matches_won
        losses,              // matches_lost
        calculatedWinrate,   // winrate (%)
        oppWinrate,          // opp_winrate (%)
        ''                   // note (‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å)
      ];
      
      gymSheet.getRange(rowIndex, 1, 1, rowData.length).setValues([rowData]);
      rowIndex++;
    }
  });
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  if (rowIndex > 2) {
    const dataRange = gymSheet.getRange(2, 1, rowIndex - 2, headers.length);
    dataRange.setHorizontalAlignment('center');
    dataRange.setVerticalAlignment('middle');
    dataRange.setFontSize(11);
    dataRange.setBorder(true, true, true, true, true, true, '#e2e8f0', SpreadsheetApp.BorderStyle.SOLID);
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢
    gymSheet.getRange(2, 1, rowIndex - 2, 1).setHorizontalAlignment('left');
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢
    gymSheet.getRange(2, 2, rowIndex - 2, 1).setHorizontalAlignment('left');
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Codename ‡πÅ‡∏•‡∏∞ Note ‡πÉ‡∏´‡πâ‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢
    gymSheet.getRange(2, 3, rowIndex - 2, 1).setHorizontalAlignment('left');
    gymSheet.getRange(2, 11, rowIndex - 2, 1).setHorizontalAlignment('left');
    
    // ‡∏™‡∏µ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß
    for (let i = 0; i < rowIndex - 2; i++) {
      const rowRange = gymSheet.getRange(2 + i, 1, 1, headers.length);
      if (i % 2 === 0) {
        rowRange.setBackground('#f7fafc'); // ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
      } else {
        rowRange.setBackground('#edf2f7'); // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô
      }
    }
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    gymSheet.getRange(2, 4, rowIndex - 2, 1).setNumberFormat('0'); // # Rank
    gymSheet.getRange(2, 5, rowIndex - 2, 1).setNumberFormat('0'); // Points
    gymSheet.getRange(2, 6, rowIndex - 2, 1).setNumberFormat('0'); // matches_played
    gymSheet.getRange(2, 7, rowIndex - 2, 1).setNumberFormat('0'); // matches_won
    gymSheet.getRange(2, 8, rowIndex - 2, 1).setNumberFormat('0'); // matches_lost
    gymSheet.getRange(2, 9, rowIndex - 2, 1).setNumberFormat('0'); // winrate (%)
    gymSheet.getRange(2, 10, rowIndex - 2, 1).setNumberFormat('0'); // opp_winrate (%)
  }
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
  gymSheet.setColumnWidth(1, 150);  // Player Name
  gymSheet.setColumnWidth(2, 120);  // Player Phone
  gymSheet.setColumnWidth(3, 100);  // Codename
  gymSheet.setColumnWidth(4, 80);   // # Rank
  gymSheet.setColumnWidth(5, 80);   // Points
  gymSheet.setColumnWidth(6, 120);  // matches_played
  gymSheet.setColumnWidth(7, 100);  // matches_won
  gymSheet.setColumnWidth(8, 100);  // matches_lost
  gymSheet.setColumnWidth(9, 100);  // winrate (%)
  gymSheet.setColumnWidth(10, 120); // opp_winrate (%)
  gymSheet.setColumnWidth(11, 100); // note
  
  SpreadsheetApp.getUi().alert('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó Gym Standing for fill ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n\n‡∏ä‡∏µ‡∏ó‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å Codename ‡πÅ‡∏•‡∏∞ Note ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô rePairLastRound() ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß - ‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö pairNextRound()

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô exportTournamentReport() ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß - ‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π Export & Reports

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì standings ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
function calculateStandingsFast(allPairingData, playersData) {
  try {
    const standings = {};
    const opponentHistory = {};
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• input
    if (!Array.isArray(allPairingData) || !Array.isArray(playersData)) {
      console.log('‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• input ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏™‡∏£‡πâ‡∏≤‡∏á standings ‡πÄ‡∏õ‡∏•‡πà‡∏≤');
      return [];
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á player lookup map
    const playerMap = {};
    playersData.forEach(row => {
      if (row && Array.isArray(row) && row[0] && row[1]) {
        playerMap[row[0]] = row[1];
      }
    });
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì stats ‡∏à‡∏≤‡∏Å pairing data
    allPairingData.slice(1).forEach(row => {
      if (!row || !Array.isArray(row) || row.length < 11) return;
      
      const p1_id = row[2];
      const p2_id = row[8];
      const p1_name = row[3];
      const p2_name = row[9];
      const result = row[10];
      
      if (p1_id && p2_id && result) {
        if (!standings[p1_id]) standings[p1_id] = { name: p1_name, played: 0, win: 0, draw: 0, loss: 0 };
        if (!opponentHistory[p1_id]) opponentHistory[p1_id] = [];
        
        if (p2_id === 'BYE') {
          standings[p1_id].played++;
          standings[p1_id].win++;
        } else {
          if (!standings[p2_id]) standings[p2_id] = { name: p2_name, played: 0, win: 0, draw: 0, loss: 0 };
          if (!opponentHistory[p2_id]) opponentHistory[p2_id] = [];
          
          opponentHistory[p1_id].push(p2_id);
          opponentHistory[p2_id].push(p1_id);
          
          standings[p1_id].played++;
          standings[p2_id].played++;

          if (result === '1:0') {
            standings[p1_id].win++;
            standings[p2_id].loss++;
          } else if (result === '0:1') {
            standings[p1_id].loss++;
            standings[p2_id].win++;
          } else if (result === '1:1') {
            standings[p1_id].draw++;
            standings[p2_id].draw++;
          }
        }
      }
    });
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞ OW%
    const result = Object.keys(standings).map(playerId => {
      const stats = standings[playerId];
      const points = stats.win * 3 + stats.draw;
      let ow = 0;
      
      try {
        ow = calculateOWFast(playerId, opponentHistory, standings);
      } catch (error) {
        console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OW ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö', playerId, ':', error);
        ow = 0;
      }
      
      return {
        id: playerId,
        name: stats.name,
        played: stats.played,
        win: stats.win,
        draw: stats.draw,
        loss: stats.loss,
        points: points,
        ow: ow,
        rank: 'ACTIVE'
      };
    });
    
    return result.sort((a, b) => {
      if (b.points !== a.points) return b.points - a.points;
      if (b.ow !== a.ow) return b.ow - a.ow;
      return a.id.localeCompare(b.id);
    });
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô calculateStandingsFast:', error);
    return [];
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OW% ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
function calculateOWFast(playerId, opponentHistory, standings) {
  try {
    if (!playerId || !opponentHistory || !standings) {
      console.log('‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• input ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÉ‡∏ô calculateOWFast');
      return 0;
    }
    
    const opponents = opponentHistory[playerId] || [];
    if (opponents.length === 0) return 0;
    
    let totalOpponentWins = 0;
    let totalOpponentGames = 0;

    opponents.forEach(opponentId => {
      if (opponentId && standings[opponentId]) {
        const opponentStats = standings[opponentId];
        if (opponentStats && typeof opponentStats.win === 'number' && typeof opponentStats.played === 'number') {
          totalOpponentWins += opponentStats.win;
          totalOpponentGames += opponentStats.played;
        }
      }
    });
    
    if (totalOpponentGames > 0) {
      return Math.min(100, Math.round((totalOpponentWins / totalOpponentGames) * 100));
    }
    return 0;
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô calculateOWFast:', error);
    return 0;
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache
function updateBucketCache(mergedStandings, dropSet, playerTrIdMap) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const bucketSheet = ss.getSheetByName('Bucket');
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Bucket Sheet ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
  if (!bucketSheet) {
    const newBucketSheet = ss.insertSheet('Bucket');
    newBucketSheet.getRange('A1:F1').setValues([['Player_ID', 'Player_Name', 'Points', 'Rank', 'Status', 'Last_Updated']]);
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ dropSet ‡πÄ‡∏õ‡πá‡∏ô Set ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
  if (!dropSet || !(dropSet instanceof Set)) {
    console.log('‚ö†Ô∏è dropSet ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà');
    dropSet = new Set();
  }
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Bucket
  const bucketData = Object.entries(mergedStandings).map(([playerId, stats]) => {
    const points = stats.win * 3 + stats.draw;
    const isDropped = dropSet.has(playerId) || dropSet.has(stats.name);
    
    return [
      playerId,
      stats.name,
      isDropped ? 0 : points,
      isDropped ? 'DROP' : 'ACTIVE',
      isDropped ? 'DROPPED' : 'ACTIVE',
      new Date()
    ];
  });
  
  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Bucket
  if (bucketData.length > 0) {
    bucketSheet.getRange(2, 1, bucketData.length, 6).setValues(bucketData);
  }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket Cache ‡πÅ‡∏ö‡∏ö Manual
function updateBucketCacheManual() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const playersSheet = ss.getSheetByName('Players');
  
  if (!pairingSheet || !playersSheet) {
    SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Pairing ‡∏´‡∏£‡∏∑‡∏≠ Players');
    return;
  }
  
  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const allPairingData = pairingSheet.getDataRange().getValues();
  const playersData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 4).getValues();
  const dropList = pairingSheet.getRange('M2:M').getValues().flat().filter(name => name);
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì standings
  const standings = calculateStandingsFast(allPairingData, playersData);
  const dropSet = new Set(dropList.map(x => x.trim()));
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á mergedStandings
  const mergedStandings = {};
  playersData.forEach(row => {
    if (row[0] && row[1]) {
      mergedStandings[row[0]] = { name: row[1], trId: row[2] || '', played: 0, win: 0, draw: 0, loss: 0 };
    }
  });
  
  standings.forEach(player => {
    mergedStandings[player.id] = {
      name: player.name,
      trId: '',
      played: player.played,
      win: player.win,
      draw: player.draw,
      loss: player.loss
    };
  });
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket
  try {
    updateBucketCache(mergedStandings, dropSet, {});
  } catch (error) {
    console.log('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket cache:', error);
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á dropSet ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    const newDropSet = new Set(dropList.map(x => x.trim()));
    updateBucketCache(mergedStandings, newDropSet, {});
  }
  
  SpreadsheetApp.getUi().alert('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket Cache ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏™‡∏£‡πâ‡∏≤‡∏á Bucket Sheet ‡πÉ‡∏´‡∏°‡πà
function createBucketSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const existingBucket = ss.getSheetByName('Bucket');
  
  if (existingBucket) {
    const response = SpreadsheetApp.getUi().alert(
      '‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
      '‡∏ä‡∏µ‡∏ó Bucket ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      SpreadsheetApp.getUi().ButtonSet.YES_NO
    );
    
    if (response === SpreadsheetApp.getUi().Button.NO) {
      return;
    }
    
    ss.deleteSheet(existingBucket);
  }
  
  const newBucketSheet = ss.insertSheet('Bucket');
  newBucketSheet.getRange('A1:F1').setValues([['Player_ID', 'Player_Name', 'Points', 'Rank', 'Status', 'Last_Updated']]);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  newBucketSheet.getRange('A1:F1').setFontWeight('bold');
  newBucketSheet.getRange('A1:F1').setBackground('#4285f4');
  newBucketSheet.getRange('A1:F1').setFontColor('white');
  
  SpreadsheetApp.getUi().alert('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Bucket Sheet ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket Cache" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
}

// üóëÔ∏è Clear Pairing - ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
function clearPairingData() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const pairingSheet = ss.getSheetByName('Pairing');
    const standingSheet = ss.getSheetByName('Standing');
    const bucketSheet = ss.getSheetByName('Bucket');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡∏µ‡∏ó Pairing ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!pairingSheet) {
      SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Pairing');
      return;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á dialog ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
    const ui = SpreadsheetApp.getUi();
    const response = ui.alert(
      'üóëÔ∏è Clear Pairing',
      '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n' +
      '‚ö†Ô∏è ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö:\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡∏•‡∏á‡πÑ‡∏õ\n' +
      '‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standings ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bucket Cache\n' +
      '‚Ä¢ Format, ‡∏™‡∏µ, ‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n\n' +
      '‚úÖ ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà:\n' +
      '‚Ä¢ ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1)\n' +
      '‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Players\n' +
      '‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà Drop (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå M)\n\n' +
      '‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ!',
      ui.ButtonSet.YES_NO
    );
    
    if (response !== ui.Button.YES) {
      return;
    }
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Drop List ‡πÑ‡∏ß‡πâ
    const dropList = pairingSheet.getRange('M2:M').getValues().flat().filter(name => name);
    
    // ‡∏•‡∏ö format ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Drop (‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ)
    try {
      const dropRange = pairingSheet.getRange('M2:M');
      dropRange.clearFormat(); // ‡∏•‡∏ö format ‡πÅ‡∏•‡∏∞‡∏™‡∏µ ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ
    } catch (e) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ format ‡∏Å‡πá‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£
    }
    
    // === ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Pairing (‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö clearAllData) ===
    const lastRow = pairingSheet.getLastRow();
    if (lastRow > 1) {
      const dataRange = pairingSheet.getRange(2, 1, lastRow - 1, pairingSheet.getLastColumn());
      dataRange.clearContent();
      dataRange.clearFormat(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏™‡∏µ
      dataRange.removeCheckboxes(); // ‡∏•‡∏ö checkbox
    }
    
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) - ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö clearAllData
    pairingSheet.getRange(2, 1, pairingSheet.getMaxRows() - 1, pairingSheet.getMaxColumns()).clearContent();
    pairingSheet.getRange(2, 1, pairingSheet.getMaxRows() - 1, pairingSheet.getMaxColumns()).clearFormat();
    pairingSheet.getRange(2, 1, pairingSheet.getMaxRows() - 1, pairingSheet.getMaxColumns()).removeCheckboxes();
    
    // === ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Standing (‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö clearAllData) ===
    if (standingSheet) {
      standingSheet.clearContents();
      standingSheet.clearFormats(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏™‡∏µ (‡πÉ‡∏ä‡πâ clearFormats ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sheet object)
    }
    
    // === ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Bucket (‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö clearAllData) ===
    if (bucketSheet) {
      const bucketLastRow = bucketSheet.getLastRow();
      if (bucketLastRow > 1) {
        const bucketDataRange = bucketSheet.getRange(2, 1, bucketLastRow - 1, bucketSheet.getLastColumn());
        bucketDataRange.clearContent();
        bucketDataRange.clearFormat(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏™‡∏µ
      }
      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      bucketSheet.getRange(2, 1, bucketSheet.getMaxRows() - 1, bucketSheet.getMaxColumns()).clearContent();
      bucketSheet.getRange(2, 1, bucketSheet.getMaxRows() - 1, bucketSheet.getMaxColumns()).clearFormat();
    }
    
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö checkboxes ‡πÅ‡∏•‡∏∞ controls ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö clearAllData ‡πÅ‡∏•‡πâ‡∏ß
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bucket Cache ‡πÉ‡∏´‡∏°‡πà (‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô ACTIVE)
    if (bucketSheet) {
      const playersSheet = ss.getSheetByName('Players');
      if (playersSheet && playersSheet.getLastRow() > 1) {
        const playersData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 4).getValues();
        const bucketData = playersData.map(row => {
          const playerId = row[0];
          const playerName = row[1];
          const isDropped = dropList.includes(playerId) || dropList.includes(playerName);
          
          return [
            playerId,
            playerName,
            0, // Points = 0
            isDropped ? 'DROP' : 'ACTIVE',
            isDropped ? 'DROPPED' : 'ACTIVE',
            new Date()
          ];
        });
        
        if (bucketData.length > 0) {
          bucketSheet.getRange(2, 1, bucketData.length, 6).setValues(bucketData);
        }
      }
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const dropCount = dropList.length;
    const message = '‚úÖ Clear Pairing ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n' +
      'üóëÔ∏è ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö:\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡∏•‡∏á‡πÑ‡∏õ\n' +
      '‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standings\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bucket Cache\n' +
      '‚Ä¢ Format, ‡∏™‡∏µ, ‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n\n' +
      '‚úÖ ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà:\n' +
      '‚Ä¢ ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1)\n' +
      '‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n' +
      `‚Ä¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà Drop: ${dropCount} ‡∏Ñ‡∏ô\n\n` +
      'üéØ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà!';
    
    ui.alert('üóëÔ∏è Clear Pairing ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', message, ui.ButtonSet.OK);
    
  } catch (error) {
    console.log('Error in clearPairingData:', error);
    SpreadsheetApp.getUi().alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Clear Pairing: ' + error.toString());
  }
}
