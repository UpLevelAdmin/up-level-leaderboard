// ===== ฟังก์ชันแจ้งเตือน Telegram =====

// แก้ไขข้อมูลเหล่านี้
const BOT_TOKEN = "8284717743:AAGfu8Z-r6SI_TeAslai9vA600nNagjzH5k";
const CHAT_ID = "-4911555842"; // Group Chat ID

const TELEGRAM_API_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;

/**
 * ฟังก์ชันที่ทำงานเมื่อมีการส่งฟอร์ม
 */
function onFormSubmit(e) {
  try {
    // ดึงข้อมูลจากฟอร์ม
    const responses = e.values;
    const timestamp = responses[0];
    const nickname = responses[1] || responses[2] || responses[3]; // ลองหลาย column
    const phone = responses[4] || responses[5] || responses[6]; // ลองหลาย column
    
    // นับจำนวนคนที่สมัคร
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Form Responses 1");
    let totalCount = 0;
    
    if (sheet) {
      const data = sheet.getDataRange().getValues();
      totalCount = data.length - 1; // ลบ header row
    }
    
    // สร้างข้อความแจ้งเตือน
    const message = `🌙 *มีคนสมัคร Midnight Party ใหม่!*

👤 *ชื่อเล่น:* ${nickname}
📱 *เบอร์โทร:* ${phone}
⏰ *เวลาที่สมัคร:* ${timestamp}

📊 *รวมผู้สมัคร Midnight Party: ${totalCount} คน*

---
📊 [ตรวจสอบรายชื่อทั้งหมด](https://uplevelguild.netlify.app/midnight-party)`;
    
    // ส่งไปยัง Telegram
    const payload = {
      chat_id: CHAT_ID,
      text: message,
      parse_mode: "Markdown",
      disable_web_page_preview: true
    };
    
    UrlFetchApp.fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify(payload)
    });
    
    console.log("✅ ส่งการแจ้งเตือน Midnight Party ไปยัง Telegram สำเร็จ");
    
  } catch (error) {
    console.error("❌ เกิดข้อผิดพลาด:", error);
  }
}

/**
 * ฟังก์ชันทดสอบการส่งไปยัง Telegram
 */
function testTelegramNotification() {
  const testData = {
    values: [
      new Date().toLocaleString('th-TH'),
      "ผู้ทดสอบ Midnight Party",
      "",
      "",
      "0812345678",
      "",
      ""
    ]
  };
  
  onFormSubmit(testData);
  console.log("🧪 ส่งการทดสอบ Midnight Party ไปยัง Telegram แล้ว");
}

function doGet() {
  try {
    console.log('doGet function called');
    
    // ตรวจสอบว่า spreadsheet มีอยู่หรือไม่
    var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    if (!spreadsheet) {
      console.log('No active spreadsheet found');
      return createResponse({ 
        participants: [],
        error: "No active spreadsheet found"
      });
    }
    
    console.log('Spreadsheet ID:', spreadsheet.getId());
    console.log('Spreadsheet name:', spreadsheet.getName());
    
    // ลองหา sheet ที่มีอยู่
    var sheets = spreadsheet.getSheets();
    console.log('Available sheets:', sheets.map(s => s.getName()));
    
    // ลองหา sheet ที่มีข้อมูล
    var targetSheet = null;
    var sheetNames = ['Form Responses 1', 'Form Responses', 'Responses', 'Sheet1'];
    
    for (var i = 0; i < sheetNames.length; i++) {
      var sheet = spreadsheet.getSheetByName(sheetNames[i]);
      if (sheet) {
        targetSheet = sheet;
        console.log('Found sheet:', sheetNames[i]);
        break;
      }
    }
    
    if (!targetSheet) {
      console.log('No suitable sheet found');
      return createResponse({ 
        participants: [],
        error: "No suitable sheet found. Available sheets: " + sheets.map(s => s.getName()).join(', ')
      });
    }
    
    var data = targetSheet.getDataRange().getValues();
    console.log('Data rows found:', data.length);
    
    if (data.length <= 1) {
      console.log('No data rows found');
      return createResponse({ 
        participants: [],
        error: "No data rows found in sheet: " + targetSheet.getName()
      });
    }
    
    var headers = data[0];
    console.log('Headers:', headers);
    
    var participants = [];
    
    // สร้างข้อมูลผู้ใช้ในรูปแบบเดียวกับ GBL
    for (var i = 1; i < data.length; i++) {
      var row = data[i];
      var participant = {};
      
      // สร้าง object โดยใช้ชื่อ column เป็น key (เหมือน GBL)
      for (var j = 0; j < headers.length; j++) {
        participant[headers[j]] = row[j] || '';
      }
      
      participants.push(participant);
      console.log('Participant', i, ':', participant);
    }
    
    var result = {
      participants: participants,
      debug: {
        sheetName: targetSheet.getName(),
        headers: headers,
        message: "Data loaded successfully from sheet"
      }
    };
    
    console.log('Final result:', result);
    return createResponse(result);
    
  } catch (error) {
    console.error('Error in doGet:', error);
    return createResponse({
      participants: [],
      error: error.toString(),
      debug: {
        message: "Error occurred while processing data"
      }
    });
  }
}

function createResponse(data) {
  var response = ContentService.createTextOutput(JSON.stringify(data));
  response.setMimeType(ContentService.MimeType.JSON);
  return response;
}

function doPost(e) {
  return doGet();
}

// ฟังก์ชันทดสอบ
function testFunction() {
  console.log('Test function called');
  return 'Test successful';
}
