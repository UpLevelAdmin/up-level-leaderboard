// ‚úÖ Up Level Guild System - ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£

function onOpen() {
  const ui = SpreadsheetApp.getUi();
  
  // üéâ ‡πÄ‡∏°‡∏ô‡∏π‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ
  const partyMenu = ui.createMenu("üéâ ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ")
    .addItem("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "showPartySummary")
    .addItem("‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "createParty")
    .addItem("‚ûï ‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "addMemberToParty")
    .addItem("‚ùå ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "removeFromParty")
    .addItem("üîÅ ‡∏¢‡πâ‡∏≤‡∏¢‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "moveToAnotherParty")
    .addItem("üí• ‡∏¢‡∏∏‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "disbandParty");

  // ‚öîÔ∏è ‡πÄ‡∏°‡∏ô‡∏π EXP & ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
  const expMenu = ui.createMenu("‚öîÔ∏è EXP & ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")
    .addItem("üì• ‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (1 ‡∏Ñ‡∏ô)", "addExpFromActivity")
    .addItem("üì• ‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô)", "addExpFromActivityBulk")
    .addItem("üü¢ ‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡πÅ‡∏ö‡∏ö Manual", "manualAddExp")
    .addItem("üß© ‡πÄ‡∏û‡∏¥‡πà‡∏° Party Point", "manualAddPartyPoint")
    .addItem("üéÅ ‡πÅ‡∏•‡∏Å‡πÅ‡∏ï‡πâ‡∏° Party Point", "redeemPartyPoint")
    .addItem("‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏ß‡∏™", "approveQuestByPhone")
    .addItem("‚Ü©Ô∏è ‡∏¢‡πâ‡∏≠‡∏ô EXP (1 ‡∏Ñ‡∏ô)", "undoLastExpSingle")
    .addItem("‚Ü©Ô∏è ‡∏¢‡πâ‡∏≠‡∏ô EXP (‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô)", "undoLastExpBulk");

  // üèÜ ‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
  const challengeMenu = ui.createMenu("üèÜ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô")
    .addItem("‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤", "approveChallenge")
    .addItem("‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Party vs Party", "approvePartyChallenge")
    .addItem("üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡πâ‡∏≤‡πÅ‡∏Ç‡πà‡∏á", "recordChallengeResult")
    .addItem("üèÜ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏• Party vs Party", "recordPartyChallengeResult");

  // üîÑ ‡πÄ‡∏°‡∏ô‡∏π Rebirth
  const rebirthMenu = ui.createMenu("üîÑ Rebirth")
    .addItem("üîÑ ‡∏à‡∏∏‡∏ï‡∏¥ (Legend ‚Üí Rookie II)", "performRebirth")
    .addItem("üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥", "showRebirthStats")
    .addItem("üìä ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Rank Up", "showRankUpTable")
    .addItem("üéØ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank (Multiplier)", "updateRanksWithMultiplier")
    .addItem("üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏∞‡∏ö‡∏ö", "checkAndFixRebirthSystem")
    .addItem("üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Rank", "checkAndFixRanks")
    .addItem("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö", "testRebirthSystem")
    .addItem("üé® ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πÄ‡∏Å‡∏•‡∏™‡∏µ", "testRebirthColors")
    .addItem("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", "testRebirthResults")
    .addItem("üßÆ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏£‡∏á‡∏Ñ‡πå", "testRankCalculation")
    .addItem("üßÆ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏£‡∏¥‡∏á", "testActualRankCalculation")
    .addItem("üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î", "fixIncorrectRanks")
    .addItem("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á", "checkActualData")
    .addItem("üîß ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Multiplier", "updateCorrectMultipliers");

  // üõ†Ô∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏£‡∏∞‡∏ö‡∏ö
  const systemMenu = ui.createMenu("üõ†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö")
    .addItem("üéØ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank (‡∏õ‡∏Å‡∏ï‡∏¥)", "updateRanks")
    .addItem("üèÜ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Leaderboard", "updateLeaderboard")
    .addItem("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°", "checkAndFixFormDataSync")
    .addItem("üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥", "clearDuplicateEntriesDebug")
    .addItem("‚ùå ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", "removeMember")
    .addItem("üîë ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "addAdminEmail")
    .addItem("üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", "changeMemberPhoneNumber")
    .addSeparator()
    .addItem("üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", "setupSheetSelectionTrigger")
    .addSeparator()
    .addItem("üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Triggers", "checkTriggerStatus")
    .addItem("‚è∞ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Missing Members Trigger", "setupMissingMembersTrigger");

  // üé® ‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÅ‡∏£‡∏á‡∏Ñ‡πå
  const highlightMenu = ui.createMenu("üé® ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÅ‡∏£‡∏á‡∏Ñ‡πå")
    .addItem("üé® ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", "highlightCurrentRanks")
    .addItem("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Å‡∏≤‡∏£‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå", "refreshRankHighlighting")
    .addItem("üìä ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏£‡∏á‡∏Ñ‡πå", "showCurrentRankStats")
    .addSeparator()
    .addItem("üö® ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÇ‡∏û‡∏™‡∏ï‡πå", "highlightMembersNeedingPosts")
    .addItem("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå", "resetMemberHighlighting");

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
  ui.createMenu("‚¨ÜÔ∏è Up Level Guild")
    .addSubMenu(partyMenu)
    .addSubMenu(expMenu)
    .addSubMenu(challengeMenu)
    .addSubMenu(rebirthMenu)
    .addSubMenu(systemMenu)
    .addSubMenu(highlightMenu)
    .addToUi();
}

/**
 * Checks if the given email belongs to an admin.
 * Admins are defined in the 'Admin Settings' sheet.
 * Uses CacheService to reduce sheet reads.
 * @param {string} email The email to check.
 * @returns {boolean} True if the user is an admin.
 */
function isAdmin(email) {
  if (!email) {
    return false;
  }
  
  const cache = CacheService.getScriptCache();
  const CACHE_KEY = 'admin_emails';
  let cachedAdmins = cache.get(CACHE_KEY);
  
  if (cachedAdmins) {
    const adminList = JSON.parse(cachedAdmins);
    return adminList.includes(email.toLowerCase());
  }

  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Admin Settings");
    if (!sheet) {
      console.log("Admin Settings sheet not found. No users will be considered admins.");
      return false;
    }
    const adminEmails = sheet.getRange("A:A").getValues()
                          .flat()
                          .map(e => String(e).trim().toLowerCase())
                          .filter(e => e); 

    if (adminEmails.length > 0) {
      // Cache for 1 hour
      cache.put(CACHE_KEY, JSON.stringify(adminEmails), 3600);
    }
    
    return adminEmails.includes(email.toLowerCase());

  } catch (e) {
    console.error("Error checking admin status: " + e.toString());
    return false;
  }
}

/**
 * Adds a new email to the admin list.
 * Only an existing admin can perform this action.
 */
function addAdminEmail() {
  const ui = SpreadsheetApp.getUi();
  
  // 1. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();
  if (!admin) {
    ui.alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ", ui.ButtonSet.OK);
    return;
  }
  
  const prompt = ui.prompt("‚ûï Add New Admin", "Enter the email address of the new admin:", ui.ButtonSet.OK_CANCEL);
  
  if (prompt.getSelectedButton() === ui.Button.OK) {
    const newAdminEmail = prompt.getResponseText().trim().toLowerCase();
    
    if (!newAdminEmail || !/^\S+@\S+\.\S+$/.test(newAdminEmail)) {
      ui.alert("‚ùå Invalid Email", "Please enter a valid email address.", ui.ButtonSet.OK);
      return;
    }
    
    try {
      const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Admin Settings");
      if (!sheet) {
        ui.alert("‚ùå Error", "The 'Admin Settings' sheet could not be found.", ui.ButtonSet.OK);
        return;
      }
      
      const existingAdmins = sheet.getRange("A:A").getValues().flat().map(e => String(e).trim().toLowerCase());
      if (existingAdmins.includes(newAdminEmail)) {
        ui.alert("‚ÑπÔ∏è Already Exists", "This email is already an admin.", ui.ButtonSet.OK);
        return;
      }
      
      sheet.appendRow([newAdminEmail]);
      
      CacheService.getScriptCache().remove('admin_emails');
      
      ui.alert("‚úÖ Success", `Successfully added ${newAdminEmail} as a new admin.`, ui.ButtonSet.OK);
      
    } catch (e) {
      ui.alert("‚ùå Error", "An error occurred: " + e.message, ui.ButtonSet.OK);
      console.error("addAdminEmail Error: " + e.toString());
    }
  }
}

function logAdminAction(functionName, details = "", admin = "Unknown") {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Admin Log");
  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");
  sheet.appendRow([now, admin, functionName, details]);
}



// ‚úÖ normalizePhone() ‚Äî ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
function normalizePhone(input) {
  const phone = String(input).replace(/[^\d]/g, "").trim();
  if (phone.length === 9 && phone[0] !== "0") return "0" + phone;
  if (phone.length === 10 && phone.startsWith("0")) return phone;
  return "";
}

// ‚úÖ validatePhoneOrAlert() ‚Äî ‡πÄ‡∏ä‡πá‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå
function validatePhoneOrAlert(phone, ui) {
  if (!phone || phone.length !== 10 || !phone.startsWith("0")) {
    ui.alert("‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ 10 ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0)");
    return false;
  }
  return true;
}

// ‚úÖ safeGetPhoneFromPrompt() ‚Äî ‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏à‡∏≤‡∏Å prompt ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
function safeGetPhoneFromPrompt(promptResponse) {
  if (!promptResponse) return null;
  const phoneInput = promptResponse.getResponseText();
  if (!phoneInput || typeof phoneInput !== 'string') return null;
  return normalizePhone(phoneInput.trim());
}

// üîÑ getEligiblePlayersForRebirth() ‚Äî ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏∏‡∏ï‡∏¥‡πÑ‡∏î‡πâ
function getEligiblePlayersForRebirth() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  
  if (!dashSheet) return [];
  
  const dashData = dashSheet.getDataRange().getValues();
  const eligiblePlayers = [];
  
  for (let i = 1; i < dashData.length; i++) {
    const row = dashData[i];
    const nickname = row[0];
    const phone = normalizePhone(row[1]);
    const codename = row[2];
    const rank = row[3];
    const exp = Number(row[4]) || 0;
    const party = row[5] || "";
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Legend ‡∏´‡∏£‡∏∑‡∏≠ Legend II+ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isLegendRank = rank === "Legend" || (rank && rank.toString().startsWith("Legend "));
    
    if (isLegendRank && phone && nickname && codename) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö EXP ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥
      const currentRebirthCount = getRebirthCount(phone);
      const requiredExp = 200 * (currentRebirthCount + 1);
      
      if (exp >= requiredExp) {
        eligiblePlayers.push({
          nickname: nickname,
          phone: phone,
          codename: codename,
          rank: rank,
          exp: exp,
          party: party,
          rebirthCount: currentRebirthCount,
          requiredExp: requiredExp
        });
      }
    }
  }
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° EXP ‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
  eligiblePlayers.sort((a, b) => b.exp - a.exp);
  
  return eligiblePlayers;
}

// ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Form
function onFormSubmit(e) {
  try {
    Logger.log("üì• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏° - onFormSubmit");
    Logger.log("Event data: " + JSON.stringify(e));
    
    const values = e.values;
    const fullName = values[1];
    const nickname = values[2];
    const rawPhone = values[3];
    const phone = normalizePhone(rawPhone);
    const codename = values[4].trim();
    const memberType = values[5];
    const referrer = normalizePhone(values[6] || "");

    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const dbSheet = ss.getSheetByName("Member Database");
    const dashSheet = ss.getSheetByName("Member Dashboard");

    if (!dbSheet || !dashSheet) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Member Database ‡∏´‡∏£‡∏∑‡∏≠ Member Dashboard");
    }

    const rowNum = dbSheet.getLastRow();
    const lastCol = dbSheet.getLastColumn();

    const phonesInDash = dashSheet.getRange(2, 2, Math.max(dashSheet.getLastRow() - 1, 1)).getValues()
      .flat().map(p => normalizePhone(p));
    const codenamesInDash = dashSheet.getRange(2, 3, Math.max(dashSheet.getLastRow() - 1, 1)).getValues()
      .flat().map(c => String(c).toLowerCase().trim());

    Logger.log("üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°");
    Logger.log("üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå: " + phone);
    Logger.log("üßë Codename: " + codename);

    let foundPhoneDup = phonesInDash.includes(phone);
    let foundCodenameDup = codenamesInDash.includes(codename.toLowerCase());

    if (foundPhoneDup) {
      dbSheet.getRange(rowNum, 4).setValue(`${phone} (DUPLICATE)`);
      dbSheet.getRange(rowNum, 4).setNumberFormat("@");
      Logger.log("‚ö†Ô∏è ‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥!");
    }

    if (foundCodenameDup) {
      dbSheet.getRange(rowNum, 5).setValue(`${codename} (DUPLICATE)`);
      Logger.log("‚ö†Ô∏è ‡∏û‡∏ö Codename ‡∏ã‡πâ‡∏≥!");
    }

    if (foundPhoneDup || foundCodenameDup) {
      if (rowNum >= 2 && lastCol >= 1) {
        dbSheet.getRange(rowNum, 1, 1, lastCol).setBackground("#f28b82");
      }
      Logger.log("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥");
      return;
    }

  // --- ‡∏õ‡∏£‡∏±‡∏ö logic ‡∏Å‡∏≤‡∏£‡∏ö‡∏ß‡∏Å EXP ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ---
  let initialExp = 0;
  if (memberType.includes("Premium")) {
    initialExp = 3;
    if (referrer && phonesInDash.includes(referrer)) {
      initialExp += 1; // ‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° 1
      addExpToPhone(referrer, 2); // referrer ‡πÑ‡∏î‡πâ 2 EXP ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      logExp(referrer, "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Premium (+2 EXP)", 2);
    }
  }

  // ‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ Member Dashboard ‡πÇ‡∏î‡∏¢ setValues + ‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå
  const newRow = [nickname, phone, codename, "Rookie", initialExp, ""];
  const newRowIndex = dashSheet.getLastRow() + 1;
  dashSheet.getRange(newRowIndex, 1, 1, newRow.length).setValues([newRow]);
  dashSheet.getRange(newRowIndex, 2).setNumberFormat("@");

  // ‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏ô Member Database ‡∏î‡πâ‡∏ß‡∏¢
  dbSheet.getRange(rowNum, 4).setNumberFormat("@");

  logExp(phone, "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", initialExp);

  // --- ‡∏•‡∏ö logic ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà referrer ‡πÑ‡∏î‡πâ 1 EXP ‡∏ó‡∏∏‡∏Å 2 ‡∏Ñ‡∏ô ---

  updateRanks();
  updateLeaderboard();
  
  Logger.log("‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - onFormSubmit");
  
  } catch (error) {
    Logger.log("‚ùå onFormSubmit Error: " + error.toString());
    Logger.log("Event data: " + JSON.stringify(e));
    
    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    try {
      const adminEmail = Session.getActiveUser().getEmail();
      MailApp.sendEmail({
        to: adminEmail,
        subject: "‚ö†Ô∏è Form Submit Error - Up Level Guild",
        body: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°:\n\n${error.toString()}\n\nEvent: ${JSON.stringify(e)}\n\n‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}`
      });
      Logger.log("‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
    } catch (emailError) {
      Logger.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ: " + emailError.toString());
    }
  }
}




// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö EXP ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
function logExp(phone, activity, amount) {
  const normalized = normalizePhone(phone);
  const dashSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const dashData = dashSheet.getDataRange().getValues();
  const member = dashData.find(row => normalizePhone(row[1]) === normalized);
  const codename = member ? member[2] : "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠";

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("EXP Log");
  const row = sheet.getLastRow() + 1;
  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");

  sheet.getRange(row, 1, 1, 5).setValues([[normalized, codename, now, activity, amount]]);
  sheet.getRange(row, 1).setNumberFormat("@");

  updateRanks();
  updateLeaderboard();
}




// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå
function addExpToPhone(phone, amount) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = sheet.getDataRange().getValues();
  const normalized = normalizePhone(phone);

  for (let i = 1; i < data.length; i++) {
    if (normalizePhone(data[i][1]) === normalized) {
      const current = Number(data[i][4]);
      sheet.getRange(i + 1, 5).setValue(current + amount);
      logExp(phone, "‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö", amount);
      return;
    }
  }
}

// ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Rank ‡∏à‡∏≤‡∏Å EXP ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Rebirth)
function updateRanks() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = sheet.getDataRange().getValues();
  
  for (let i = 1; i < data.length; i++) {
    const rawExp = data[i][4];
    const exp = Number(rawExp) || 0;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Rebirth ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const rebirthCount = Number(data[i][6]) || 0; // Rebirth Count (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 7)
    const multiplier = Number(data[i][7]) || 1; // EXP Multiplier (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 8)
    
    let rank;
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Rebirth ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
    if (rebirthCount > 0 || multiplier > 1) {
      rank = calculateCorrectRank(exp, rebirthCount, multiplier);
    } else {
      // ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏à‡∏∏‡∏ï‡∏¥
      rank = "Rookie";
      if (exp >= 200) rank = "Legend";
      else if (exp >= 120) rank = "Grandmaster";
      else if (exp >= 75) rank = "Diamond";
      else if (exp >= 50) rank = "Platinum";
      else if (exp >= 30) rank = "Gold";
      else if (exp >= 15) rank = "Silver";
      else if (exp >= 5) rank = "Bronze";
    }

    sheet.getRange(i + 1, 4).setValue(rank);
  }
}


// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á Leaderboard ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á Rank
function updateLeaderboard() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dash = ss.getSheetByName("Member Dashboard");
  const lb = ss.getSheetByName("Leaderboard");
  const data = dash.getRange(2, 1, dash.getLastRow() - 1, 8).getValues(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Rebirth Count ‡πÅ‡∏•‡∏∞ EXP Multiplier
  const result = [["‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", "Phone", "Codename", "Rank", "EXP", "Party", "Rebirth Count", "EXP Multiplier"]];
  
  for (let i = 0; i < data.length; i++) {
    // --- Normalize ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string 10 ‡∏´‡∏•‡∏±‡∏Å ---
    let phone = String(data[i][1]).trim();
    if (phone.length === 9 && phone[0] !== "0") phone = "0" + phone;
    if (phone.length !== 10) phone = ""; // ‡∏Å‡∏±‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ú‡∏¥‡∏î
    
    const rebirthCount = Number(data[i][6]) || 0; // Rebirth Count
    const multiplier = Number(data[i][7]) || 1; // EXP Multiplier
    
    result.push([
      data[i][0], // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô
      phone, // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
      data[i][2], // Codename
      data[i][3], // Rank
      data[i][4], // EXP
      data[i][5] || "", // Party
      rebirthCount, // Rebirth Count
      multiplier // EXP Multiplier
    ]);
  }
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á Rank ‡πÅ‡∏•‡∏∞ EXP ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤
  result.sort((a, b) => {
    const rankA = a[3]; // Rank ‡∏Ç‡∏≠‡∏á A
    const rankB = b[3]; // Rank ‡∏Ç‡∏≠‡∏á B
    const expA = Number(a[4]); // EXP ‡∏Ç‡∏≠‡∏á A
    const expB = Number(b[4]); // EXP ‡∏Ç‡∏≠‡∏á B
    const multiplierA = Number(a[7]) || 1; // Multiplier ‡∏Ç‡∏≠‡∏á A
    const multiplierB = Number(b[7]) || 1; // Multiplier ‡∏Ç‡∏≠‡∏á B
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EXP ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ (‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ Multiplier)
    const equivalentExpA = expA / multiplierA;
    const equivalentExpB = expB / multiplierB;
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° EXP ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ (‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
    if (equivalentExpA !== equivalentExpB) {
      return equivalentExpB - equivalentExpA;
    }
    
    // ‡∏ñ‡πâ‡∏≤ EXP ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° Multiplier (‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å)
    // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Multiplier ‡∏ô‡πâ‡∏≠‡∏¢ = ‡∏à‡∏∏‡∏ï‡∏¥‡∏ô‡πâ‡∏≠‡∏¢ = ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤
    if (multiplierA !== multiplierB) {
      return multiplierA - multiplierB;
    }
    
    // ‡∏ñ‡πâ‡∏≤ Multiplier ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
    return a[0].localeCompare(b[0]);
  });
  
  lb.clearContents();
  lb.getRange(1, 1, result.length, result[0].length).setValues(result);
}



// ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Web App ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó Leaderboard
function getLeaderboardData() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Leaderboard");
  if (!sheet) return [];
  return sheet.getRange(2, 1, sheet.getLastRow() - 1, 5).getValues();
}



// ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function showPartySummary() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Party");
  const data = sheet.getDataRange().getValues();
  const ui = SpreadsheetApp.getUi();
  let msg = "üéâ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î";

  for (let i = 1; i < data.length; i++) {
    msg += `\n${data[i][0]} - ‡πÅ‡∏ï‡πâ‡∏°: ${data[i][2]}`;
  }
  ui.alert(msg);
}

// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
function logPartyActivity(partyName, codename, activity, note = "") {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Party Log");
  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");
  sheet.appendRow([
    now,
    partyName,
    codename,
    activity,
    "",  // Party Point
    note
  ]);
}

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Rank Gold+ ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ)
function createParty() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const partySheet = ss.getSheetByName("Party");
  const trackerSheet = ss.getSheetByName("Party Tracker");
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  // ‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
  const phonePrompt = ui.prompt("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = safeGetPhoneFromPrompt(phonePrompt);

  const dashData = dashSheet.getDataRange().getValues();
  const member = dashData.find(row => normalizePhone(row[1]) === phone);
  if (!member) return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");

  const nickname = member[0];
  const codename = member[2];
  const rank = member[3];
  const currentParty = member[5];

  const allowedRanks = ["Gold", "Platinum", "Diamond", "Grandmaster", "Legend"];
  if (!allowedRanks.includes(rank)) return ui.alert("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Rank ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ Gold ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ");

  if (currentParty && currentParty !== "") return ui.alert("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß");

  // ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà
  const namePrompt = ui.prompt("‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà", "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≤‡∏°‡∏ã‡πâ‡∏≥", ui.ButtonSet.OK_CANCEL);
  if (namePrompt.getSelectedButton() !== ui.Button.OK) return;
  const partyName = namePrompt.getResponseText().trim();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
  const partyNames = partySheet.getLastRow() > 1
    ? partySheet.getRange(2, 1, partySheet.getLastRow() - 1).getValues().flat()
    : [];
  if (partyNames.includes(partyName)) return ui.alert("‚ùå ‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß");

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Party sheet ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡πá‡∏≠‡∏Å format ‡πÄ‡∏ö‡∏≠‡∏£‡πå
  const partyRow = partySheet.getLastRow() + 1;
  partySheet.getRange(partyRow, 1, 1, 3).setValues([[partyName, phone, 0]]);
  partySheet.getRange(partyRow, 2).setNumberFormat("@");

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Party Tracker ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡πá‡∏≠‡∏Å format ‡πÄ‡∏ö‡∏≠‡∏£‡πå
  const trackerRow = trackerSheet.getLastRow() + 1;
  trackerSheet.getRange(trackerRow, 1, 1, 5).setValues([[partyName, codename, phone, "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", new Date()]]);
  trackerSheet.getRange(trackerRow, 3).setNumberFormat("@");

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Dashboard
  const memberRow = dashData.findIndex(row => normalizePhone(row[1]) === phone);
  dashSheet.getRange(memberRow + 1, 6).setValue(partyName);

  updateLeaderboard();
  ui.alert(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ${partyName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß`);
  logAdminAction("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", `${codename} (${phone}) ‚Üí ${partyName}`, admin);
  sortAndHighlightPartyTracker();
}





// ‚úÖ ‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ‡∏û‡∏£‡πâ‡∏≠‡∏° log ‡∏•‡∏á Party Tracker ‡πÅ‡∏•‡∏∞ Party Log
function addMemberToParty() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const partySheet = ss.getSheetByName("Party");
  const trackerSheet = ss.getSheetByName("Party Tracker");
  const partyLogSheet = ss.getSheetByName("Party Log");

  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK || !adminPrompt.getResponseText().trim()) return;
  const admin = adminPrompt.getResponseText().trim();

  const phonePrompt = ui.prompt("‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = safeGetPhoneFromPrompt(phonePrompt);
  if (!validatePhoneOrAlert(phone, ui)) return;

  const dashData = dashSheet.getDataRange().getValues();
  const memberIndex = dashData.findIndex(row => normalizePhone(row[1]) === phone);
  if (memberIndex === -1) return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");

  const codename = dashData[memberIndex][2];
  const currentParty = dashData[memberIndex][5];
  if (currentParty && currentParty !== "") return ui.alert("‚ùå ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß");

  const partyList = partySheet.getRange(2, 1, partySheet.getLastRow() - 1).getValues().flat();
  if (partyList.length === 0) return ui.alert("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å");

  const partyPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", `‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:\n\n${partyList.join("\n")}`, ui.ButtonSet.OK_CANCEL);
  if (partyPrompt.getSelectedButton() !== ui.Button.OK) return;
  const selectedParty = partyPrompt.getResponseText().trim();

  if (!partyList.includes(selectedParty)) return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ô‡∏µ‡πâ");

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏ô Dashboard
  dashSheet.getRange(memberIndex + 1, 6).setValue(selectedParty);

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Party Tracker
  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");
  const trackerRow = trackerSheet.getLastRow() + 1;
  trackerSheet.getRange(trackerRow, 1, 1, 5).setValues([
    [selectedParty, codename, `'${phone}`, "‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", now]
  ]);

  // ‚úÖ Log ‡∏•‡∏á Party Log ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ
  logPartyActivity(selectedParty, codename, `‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ${selectedParty}`, "‡πÄ‡∏ä‡∏¥‡∏ç‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏°‡∏ô‡∏π");
  logAdminAction("‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", `${codename} (${phone}) ‚Üí ${selectedParty}`, admin);

  updateLeaderboard();
  sortAndHighlightPartyTracker();
  ui.alert(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° ${codename} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ${selectedParty} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß`);
}



function removeMember() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();

  // ‚úÖ ‡∏Ç‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  const dbSheet = ss.getSheetByName("Member Database");
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const lbSheet = ss.getSheetByName("Leaderboard");
  const partySheet = ss.getSheetByName("Party");
  const trackerSheet = ss.getSheetByName("Party Tracker");

  const phonePrompt = ui.prompt("‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = safeGetPhoneFromPrompt(phonePrompt);

  // ‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
  const confirm = ui.alert("‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", `‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone}?\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô Member Database`, ui.ButtonSet.YES_NO);
  if (confirm !== ui.Button.YES) return;

  // 1. ‚úÖ ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡πÅ‡∏î‡∏á‡πÉ‡∏ô Member Database
  const dbData = dbSheet.getDataRange().getValues();
  for (let i = 1; i < dbData.length; i++) {
    if (normalizePhone(dbData[i][3]) === phone) {
      dbSheet.getRange(i + 1, 1, 1, dbData[0].length).setBackground("#FFCCCC");
    }
  }

  // 2. ‚úÖ ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Member Dashboard
  const dashData = dashSheet.getDataRange().getValues();
  for (let i = dashData.length - 1; i >= 1; i--) {
    if (normalizePhone(dashData[i][1]) === phone) {
      dashSheet.deleteRow(i + 1);
    }
  }

  // 3. ‚úÖ ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Leaderboard
  const lbData = lbSheet.getDataRange().getValues();
  for (let i = lbData.length - 1; i >= 1; i--) {
    if (normalizePhone(lbData[i][1]) === phone) {
      lbSheet.deleteRow(i + 1);
    }
  }

  // 4. ‚úÖ ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Party (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤)
  const partyData = partySheet.getDataRange().getValues();
  for (let i = partyData.length - 1; i >= 1; i--) {
    if (normalizePhone(partyData[i][1]) === phone) {
      partySheet.deleteRow(i + 1);
    }
  }

  // 5. ‚úÖ ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Party Tracker (‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ)
  const trackerData = trackerSheet.getDataRange().getValues();
  for (let i = trackerData.length - 1; i >= 1; i--) {
    if (normalizePhone(trackerData[i][2]) === phone) {
      trackerSheet.deleteRow(i + 1);
    }
  }

  updateLeaderboard();
  ui.alert("‚úÖ ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");

  // ‚úÖ Log Admin
  logAdminAction("‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", `‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${phone}`, admin);
}



// ‚úÖ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ
function removeFromParty() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const trackerSheet = ss.getSheetByName("Party Tracker");
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();


  const phonePrompt = ui.prompt("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = safeGetPhoneFromPrompt(phonePrompt);
  if (!validatePhoneOrAlert(phone, ui)) return;

  const trackerData = trackerSheet.getDataRange().getValues();
  let found = false;

  for (let i = trackerData.length - 1; i >= 1; i--) {
    if (normalizePhone(trackerData[i][2]) === phone) {
      trackerSheet.deleteRow(i + 1);
      found = true;
      break;
    }
  }

  const dashData = dashSheet.getDataRange().getValues();
  let codename = "", partyName = "";

  for (let i = 1; i < dashData.length; i++) {
    if (normalizePhone(dashData[i][1]) === phone) {
      codename = dashData[i][2];
      partyName = dashData[i][5];
      dashSheet.getRange(i + 1, 6).setValue("");
      break;
    }
  }

  if (partyName && codename) {
    logPartyActivity(partyName, codename, "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ");
  }

  updateLeaderboard();
  ui.alert(found ? `‚úÖ ‡∏•‡∏ö ${codename} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß` : `‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏î‡πÄ‡∏•‡∏¢`);
  logAdminAction("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", `${codename} (${phone}) ‚Üê ${partyName}`, admin);
  sortAndHighlightPartyTracker();
}

// ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏õ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£)
function moveToAnotherParty() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const trackerSheet = ss.getSheetByName("Party Tracker");
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const partySheet = ss.getSheetByName("Party");
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();


  const phone = normalizePhone(ui.prompt("‡∏¢‡πâ‡∏≤‡∏¢‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢", ui.ButtonSet.OK_CANCEL)
    .getResponseText().trim());

  const dashData = dashSheet.getDataRange().getValues();
  let codename = "", oldParty = "", dashRow = -1;

  for (let i = 1; i < dashData.length; i++) {
    if (normalizePhone(dashData[i][1]) === phone) {
      codename = dashData[i][2];
      oldParty = dashData[i][5];
      dashRow = i + 1;
      break;
    }
  }

  if (!codename) return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Member Dashboard");

  const newParty = ui.prompt("‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤", ui.ButtonSet.OK_CANCEL)
    .getResponseText().trim();

  const existingParties = partySheet.getRange(2, 1, partySheet.getLastRow() - 1).getValues().flat();
  if (!existingParties.includes(newParty)) return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");

  const trackerData = trackerSheet.getDataRange().getValues();
  const partyMembers = trackerData.filter(row => row[0] === newParty);
  if (partyMembers.length >= 5) return ui.alert("‚ùå ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏£‡∏ö 5 ‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß");

  for (let i = trackerData.length - 1; i >= 1; i--) {
    if (normalizePhone(trackerData[i][2]) === phone) {
      trackerSheet.deleteRow(i + 1);
      break;
    }
  }

  const row = trackerSheet.getLastRow() + 1;
  trackerSheet.getRange(row, 1, 1, 5).setValues([[newParty, codename, phone, "‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", new Date()]]);
  trackerSheet.getRange(row, 3).setNumberFormat("@");

  dashSheet.getRange(dashRow, 6).setValue(newParty);
  updateLeaderboard();

  // ‚úÖ Log ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏ô activity
  if (oldParty) {
    logPartyActivity(oldParty, codename, "‡∏¢‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", `‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${newParty}`);
  }
  logPartyActivity(newParty, codename, `‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ${newParty}`, `‡∏à‡∏≤‡∏Å ${oldParty}`);

  ui.alert(`‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢ ${codename} ‡πÑ‡∏õ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ${newParty} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
  logAdminAction("‡∏¢‡πâ‡∏≤‡∏¢‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", `${codename} (${phone}): ${oldParty} ‚Üí ${newParty}`, admin);
  sortAndHighlightPartyTracker();
}




// ‚úÖ ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á Party Tracker ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡πâ‡∏ô‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ
function sortAndHighlightPartyTracker() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Party Tracker");
  const range = sheet.getDataRange();
  const values = range.getValues();
  if (values.length <= 1) return;

  const headers = values[0];
  const data = values.slice(1);
  data.sort((a, b) => a[0].localeCompare(b[0]));
  sheet.getRange(2, 1, data.length, data[0].length).setValues(data);
  sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).setBackground(null);

  let currentParty = "";
  let currentColor = "";
  for (let i = 0; i < data.length; i++) {
    const partyName = data[i][0];
    if (partyName !== currentParty) {
      currentParty = partyName;
      currentColor = getRandomPastelHex();
    }
    sheet.getRange(i + 2, 1, 1, data[0].length).setBackground(currentColor);
  }
}

function getRandomPastelHex() {
  const r = Math.floor((Math.random() * 127) + 127);
  const g = Math.floor((Math.random() * 127) + 127);
  const b = Math.floor((Math.random() * 127) + 127);
  return rgbToHex(r, g, b);
}

function rgbToHex(r, g, b) {
  return "#" + [r, g, b].map(x => {
    const hex = x.toString(16);
    return hex.length === 1 ? "0" + hex : hex;
  }).join("");
}

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£)
function addExpFromActivity() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const activitySheet = ss.getSheetByName("Activity List");
  const partySheet = ss.getSheetByName("Party");
  const partyLogSheet = ss.getSheetByName("Party Log");
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  const activityData = activitySheet.getRange(2, 1, activitySheet.getLastRow() - 1, 3).getValues();
  const activityList = activityData.map((row, i) => `${i + 1}. ${row[0]} (${row[1]} EXP)`).join("\n");
  const activityPrompt = ui.prompt("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç)", `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:\n\n${activityList}`, ui.ButtonSet.OK_CANCEL);
  if (activityPrompt.getSelectedButton() !== ui.Button.OK) return;
  const activityIndex = Number(activityPrompt.getResponseText().trim()) - 1;
  if (isNaN(activityIndex) || activityIndex < 0 || activityIndex >= activityData.length) {
    ui.alert("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return;
  }
  const [activityName, exp, pointsConfig] = activityData[activityIndex];

  const phonePrompt = ui.prompt("‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = safeGetPhoneFromPrompt(phonePrompt);
  if (!validatePhoneOrAlert(phone, ui)) return;

  const dashData = dashSheet.getDataRange().getValues();
  let codename = "";
  let rowIndex = -1;
  for (let i = 1; i < dashData.length; i++) {
    const dashPhone = normalizePhone(dashData[i][1]);
    if (dashPhone === phone) {
      codename = dashData[i][2];
      rowIndex = i + 1;
      break;
    }
  }

  if (!codename) {
    ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
    return;
  }

  // --- ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ---
  let summary = `‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:\n\n- ‡∏ä‡∏∑‡πà‡∏≠: ${codename}\n- ‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${phone}\n- ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${activityName}\n- EXP: ${exp}`;
  if (pointsConfig && String(pointsConfig).trim() !== "") {
    summary += `\n- Party Point: ${pointsConfig}`;
  }
  const confirm = ui.alert("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° EXP", summary + "\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", ui.ButtonSet.YES_NO);
  if (confirm !== ui.Button.YES) return;

  const currentExp = Number(dashSheet.getRange(rowIndex, 5).getValue());
  dashSheet.getRange(rowIndex, 5).setValue(currentExp + Number(exp));
  logExp(phone, activityName, exp);

  let partyPointMessage = "";
  // üÜï ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡πÉ‡∏´‡∏°‡πà: ‡πÉ‡∏´‡πâ Party Point ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô Activity List
  if (pointsConfig && String(pointsConfig).trim() !== "") {
    const partyName = dashSheet.getRange(rowIndex, 6).getValue();
    if (partyName) {
      let pointAmount = 0;
      if (String(pointsConfig).trim().toLowerCase() === "‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å") {
        const trackerSheet = ss.getSheetByName("Party Tracker");
        const trackerData = trackerSheet.getDataRange().getValues();
        pointAmount = trackerData.filter(row => row[0] === partyName).length;
      } else {
        pointAmount = Number(pointsConfig);
      }

      if (!isNaN(pointAmount) && pointAmount > 0) {
        const partyData = partySheet.getDataRange().getValues();
        const partyIndex = partyData.findIndex(row => row[0] === partyName);

        if (partyIndex !== -1) {
          const currentPoint = Number(partyData[partyIndex][2]);
          partySheet.getRange(partyIndex + 1, 3).setValue(currentPoint + pointAmount);
          partyLogSheet.appendRow([new Date(), partyName, codename, activityName, pointAmount, `‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° EXP`]);
          partyPointMessage = `\n\n‚úÖ ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° ${pointAmount} ‡πÅ‡∏ï‡πâ‡∏°‡πÉ‡∏´‡πâ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ '${partyName}'`;
        }
      }
    }
  }

  ui.alert(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° ${exp} EXP ‡πÉ‡∏´‡πâ ${codename} (${phone}) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß` + partyPointMessage);
  logAdminAction("‡πÄ‡∏û‡∏¥‡πà‡∏° EXP & Party Point", `‡πÉ‡∏´‡πâ ${codename} (${phone}) | ${activityName} +${exp}`, admin);
  updateRanks();
  updateLeaderboard();
}

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£)
function addExpFromActivityBulk() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const activitySheet = ss.getSheetByName("Activity List");
  const expLogSheet = ss.getSheetByName("EXP Log");
  const partySheet = ss.getSheetByName("Party");
  const partyLogSheet = ss.getSheetByName("Party Log");
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();


  const activityData = activitySheet.getRange(2, 1, activitySheet.getLastRow() - 1, 3).getValues();
  const activityList = activityData.map((row, i) => `${i + 1}. ${row[0]} (${row[1]} EXP)`).join("\n");

  const activityPrompt = ui.prompt("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç)", `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n\n${activityList}`, ui.ButtonSet.OK_CANCEL);
  if (activityPrompt.getSelectedButton() !== ui.Button.OK) return;
  const activityIndex = Number(activityPrompt.getResponseText().trim()) - 1;
  if (isNaN(activityIndex) || activityIndex < 0 || activityIndex >= activityData.length) {
    ui.alert("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return;
  }

  const [activityName, exp, pointsConfig] = activityData[activityIndex];

  const phonePrompt = ui.prompt("‡πÄ‡∏û‡∏¥‡πà‡∏° EXP", "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ , ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà)", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phoneInput = phonePrompt.getResponseText();
  if (!phoneInput || typeof phoneInput !== 'string') {
    ui.alert("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", ui.ButtonSet.OK);
    return;
  }
  const phonesRaw = phoneInput.trim();
  const rawPhones = phonesRaw.split(/\s|,|\n/).map(p => p.trim()).filter(p => p);
  const phones = rawPhones.map(normalizePhone);

  const dashData = dashSheet.getDataRange().getValues();
  const updated = [];
  const partyPointsGiven = new Set(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πâ‡∏°‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
  let summaryList = [];

  for (let phone of phones) {
    for (let i = 1; i < dashData.length; i++) {
      const dashPhone = normalizePhone(dashData[i][1]);
      if (dashPhone === phone) {
        const codename = dashData[i][2];
        summaryList.push(`- ${codename} (${phone})`);
        break;
      }
    }
  }

  // --- ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ---
  let summary = `‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö:\n\n${summaryList.join("\n")}\n\n‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${activityName}\nEXP: ${exp}`;
  if (pointsConfig && String(pointsConfig).trim() !== "") {
    summary += `\nParty Point: ${pointsConfig}`;
  }
  const confirm = ui.alert("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° EXP (‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô)", summary + "\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", ui.ButtonSet.YES_NO);
  if (confirm !== ui.Button.YES) return;

  for (let phone of phones) {
    for (let i = 1; i < dashData.length; i++) {
      const dashPhone = normalizePhone(dashData[i][1]);
      if (dashPhone === phone) {
        const codename = dashData[i][2];
        const currentExp = Number(dashData[i][4]);
        dashSheet.getRange(i + 1, 5).setValue(currentExp + Number(exp));
        
        // ‚úÖ Log EXP ‡∏î‡πâ‡∏ß‡∏¢ format ‡πÄ‡∏ö‡∏≠‡∏£‡πå
        const logRow = expLogSheet.getLastRow() + 1;
        expLogSheet.getRange(logRow, 1, 1, 5).setValues([[phone, codename, new Date(), activityName, exp]]);
        expLogSheet.getRange(logRow, 1).setNumberFormat("@");

        updated.push(codename);

        const partyName = dashData[i][5];
        // üÜï ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡πÉ‡∏´‡∏°‡πà: ‡πÉ‡∏´‡πâ Party Point ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô Activity List
        if (partyName && pointsConfig && String(pointsConfig).trim() !== "" && !partyPointsGiven.has(partyName)) {
            let pointAmount = 0;
            if (String(pointsConfig).trim().toLowerCase() === "‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å") {
              const trackerSheet = ss.getSheetByName("Party Tracker");
              const trackerData = trackerSheet.getDataRange().getValues();
              pointAmount = trackerData.filter(row => row[0] === partyName).length;
            } else {
              pointAmount = Number(pointsConfig);
            }

            if (!isNaN(pointAmount) && pointAmount > 0) {
              const partyData = partySheet.getDataRange().getValues();
              const partyIndex = partyData.findIndex(row => row[0] === partyName);

              if (partyIndex !== -1) {
                const currentPoint = Number(partyData[partyIndex][2]);
                partySheet.getRange(partyIndex + 1, 3).setValue(currentPoint + pointAmount);
                partyLogSheet.appendRow([
                  new Date(), partyName, codename, activityName, pointAmount,
                  `‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° EXP (Bulk)`
                ]);
                partyPointsGiven.add(partyName); // Mark party as having received points
              }
            }
        }
        break;
      }
    }
  }

  ui.alert(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö: \n${updated.join("\n")}`);
  logAdminAction("‡πÄ‡∏û‡∏¥‡πà‡∏° EXP & Party Point (‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô)", `${phones.length} ‡∏Ñ‡∏ô | ${activityName} +${exp}`, admin);
  updateRanks();
  updateLeaderboard();
}


// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡πÅ‡∏ö‡∏ö manual (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£)
function manualAddExp() {
  
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const logSheet = ss.getSheetByName("EXP Log");
  
  // 1. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();
  
  // 2. ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
  const phonePrompt = ui.prompt("‡πÄ‡∏û‡∏¥‡πà‡∏° EXP", "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = safeGetPhoneFromPrompt(phonePrompt);

  const dashData = dashSheet.getDataRange().getValues();
  const memberIndex = dashData.findIndex(row => normalizePhone(row[1]) === phone);
  if (memberIndex === -1) return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");

  const codename = dashData[memberIndex][2];

  // 3. ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô EXP
  const expPrompt = ui.prompt("‡πÄ‡∏û‡∏¥‡πà‡∏° EXP", `‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô EXP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${codename}`, ui.ButtonSet.OK_CANCEL);
  if (expPrompt.getSelectedButton() !== ui.Button.OK) return;
  const exp = Number(expPrompt.getResponseText().trim());
  if (isNaN(exp)) return ui.alert("‚ùå ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô EXP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");

  // 4. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
  const activityPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", `‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${codename}`, ui.ButtonSet.OK_CANCEL);
  if (activityPrompt.getSelectedButton() !== ui.Button.OK) return;
  const activity = activityPrompt.getResponseText().trim();
  if (!activity) return ui.alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°");

  // --- ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ---
  let summary = `‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° EXP ‡πÅ‡∏ö‡∏ö manual ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö:\n\n- ${codename} (${phone})\n- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô EXP: ${exp}\n- ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${activity}`;
  const confirm = ui.alert("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° EXP (Manual)", summary + "\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", ui.ButtonSet.YES_NO);
  if (confirm !== ui.Button.YES) return;

  // 5. ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° EXP
  const currentExp = Number(dashData[memberIndex][4]);
  dashSheet.getRange(memberIndex + 1, 5).setValue(currentExp + exp);

  // 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
  const row = logSheet.getLastRow() + 1;
  logSheet.getRange(row, 1, 1, 5).setValues([[phone, codename, new Date(), activity, exp]]);
  logSheet.getRange(row, 1).setNumberFormat("@");

  ui.alert(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° ${exp} EXP ‡πÉ‡∏´‡πâ ${codename} ‡πÅ‡∏•‡πâ‡∏ß\n‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${activity}`);
  logAdminAction("‡πÄ‡∏û‡∏¥‡πà‡∏° EXP (Manual)", `‡πÉ‡∏´‡πâ ${codename} (${phone}) +${exp} | ${activity}`, admin);
  updateRanks();
  updateLeaderboard();
}


// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Party Point ‡πÅ‡∏ö‡∏ö manual (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£)
function manualAddPartyPoint() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const partySheet = ss.getSheetByName("Party");
  const partyLogSheet = ss.getSheetByName("Party Log");
  
  // 1. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  // 2. ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
  const phonePrompt = ui.prompt("‡πÄ‡∏û‡∏¥‡πà‡∏° Party Point", "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = safeGetPhoneFromPrompt(phonePrompt);

  const dashData = dashSheet.getDataRange().getValues();
  const memberIndex = dashData.findIndex(row => normalizePhone(row[1]) === phone);
  if (memberIndex === -1) return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");

  const codename = dashData[memberIndex][2];
  const partyName = dashData[memberIndex][5];
  if (!partyName) return ui.alert("‚ùå ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ");

  // 3. ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Party Point
  const pointPrompt = ui.prompt("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Party Point", `‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ${partyName} ‡∏Å‡∏µ‡πà‡πÅ‡∏ï‡πâ‡∏°?`, ui.ButtonSet.OK_CANCEL);
  if (pointPrompt.getSelectedButton() !== ui.Button.OK) return;
  const point = Number(pointPrompt.getResponseText().trim());
  if (isNaN(point)) return ui.alert("‚ùå ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πâ‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");

  // 4. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
  const activityPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", `‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ${partyName}`, ui.ButtonSet.OK_CANCEL);
  if (activityPrompt.getSelectedButton() !== ui.Button.OK) return;
  const activity = activityPrompt.getResponseText().trim();
  if (!activity) return ui.alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°");

  // --- ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ---
  let summary = `‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Party Point ‡πÅ‡∏ö‡∏ö manual ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö:\n\n- ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ: ${partyName}\n- ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${codename} (${phone})\n- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${point}\n- ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${activity}`;
  const confirm = ui.alert("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° Party Point (Manual)", summary + "\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", ui.ButtonSet.YES_NO);
  if (confirm !== ui.Button.YES) return;

  // 5. ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° Party Point
  const partyData = partySheet.getDataRange().getValues();
  const partyIndex = partyData.findIndex(row => row[0] === partyName);
  if (partyIndex === -1) return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");

  const currentPoint = Number(partyData[partyIndex][2]);
  partySheet.getRange(partyIndex + 1, 3).setValue(currentPoint + point);

  // 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
  const row = partyLogSheet.getLastRow() + 1;
  partyLogSheet.getRange(row, 1, 1, 6).setValues([
    [new Date(), partyName, codename, activity, point, "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á"]
  ]);
  partyLogSheet.getRange(row, 3).setNumberFormat("@");

  logAdminAction("‡πÄ‡∏û‡∏¥‡πà‡∏° Party Point", `‡πÉ‡∏´‡πâ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ${partyName} +${point} (${codename}) | ${activity}`, admin);
  ui.alert(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Party Point ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ${partyName}\n‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${activity}`);
}





function disbandParty() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const partySheet = ss.getSheetByName("Party");
  const trackerSheet = ss.getSheetByName("Party Tracker");
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const partyLogSheet = ss.getSheetByName("Party Log");
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();


  // üîΩ ‡∏™‡∏£‡πâ‡∏≤‡∏á Dropdown ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ
  const partyNames = partySheet.getRange(2, 1, partySheet.getLastRow() - 1).getValues().flat();
  if (partyNames.length === 0) {
    ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏¢‡∏∏‡∏ö");
    return;
  }

  const list = partyNames.map((p, i) => `${i + 1}. ${p}`).join("\n");
  const prompt = ui.prompt("‡∏¢‡∏∏‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç:\n\n${list}`, ui.ButtonSet.OK_CANCEL);
  if (prompt.getSelectedButton() !== ui.Button.OK) return;

  const index = Number(prompt.getResponseText().trim()) - 1;
  if (isNaN(index) || index < 0 || index >= partyNames.length) {
    ui.alert("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return;
  }

  const partyName = partyNames[index];

  // ‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏∏‡∏ö
  const trackerData_pre = trackerSheet.getDataRange().getValues();
  const members = trackerData_pre.filter(row => row[0] === partyName).map(r => r[1]);
  const confirm = ui.alert("‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∏‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", `‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∏‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ "${partyName}"?\n\n‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (${members.length} ‡∏Ñ‡∏ô): ${members.join(", ")}\n\n‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ô‡∏µ‡πâ`, ui.ButtonSet.YES_NO);
  if (confirm !== ui.Button.YES) return;

  // ‚úÖ ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó Party
  const partyData = partySheet.getDataRange().getValues();
  for (let i = 1; i < partyData.length; i++) {
    if (partyData[i][0] === partyName) {
      partySheet.deleteRow(i + 1);
      break;
    }
  }

  // ‚úÖ ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Party Tracker (‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô)
  const trackerData_post = trackerSheet.getDataRange().getValues();
  for (let i = trackerData_post.length - 1; i >= 1; i--) {
    if (trackerData_post[i][0] === partyName) {
      trackerSheet.deleteRow(i + 1);
    }
  }

  // ‚úÖ ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Member Dashboard
  const dashData = dashSheet.getDataRange().getValues();
  for (let i = 1; i < dashData.length; i++) {
    if (dashData[i][5] === partyName) {
      dashSheet.getRange(i + 1, 6).setValue(""); // ‡∏•‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏≠‡∏≠‡∏Å
    }
  }

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log: ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏∏‡∏ö
  partyLogSheet.appendRow([
    new Date(),
    partyName,
    "System",
    "‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏∏‡∏ö",
    "",
    "‡∏•‡∏ö‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏°‡∏ô‡∏π"
  ]);

  updateLeaderboard();
  sortAndHighlightPartyTracker();
  logAdminAction("‡∏¢‡∏∏‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", `‡∏ä‡∏∑‡πà‡∏≠: ${partyName}`, admin);
  ui.alert(`‚úÖ ‡∏¢‡∏∏‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ "${partyName}" ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
}


function undoLastExpSingle() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  const dash = ss.getSheetByName("Member Dashboard");
  const log = ss.getSheetByName("EXP Log");

  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  const phonePrompt = ui.prompt("‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° EXP", "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = safeGetPhoneFromPrompt(phonePrompt);

  const logData = log.getDataRange().getValues();
  for (let i = logData.length - 1; i >= 1; i--) {
    if (normalizePhone(logData[i][0]) === phone) {
      const codename = logData[i][1];
      const activity = logData[i][3];
      const exp = Number(logData[i][4]);
      if (isNaN(exp)) {
        ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EXP ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î");
        return;
      }

      const dashData = dash.getDataRange().getValues();
      for (let j = 1; j < dashData.length; j++) {
        if (normalizePhone(dashData[j][1]) === phone) {
          const currentExp = Number(dashData[j][4]);
          dash.getRange(j + 1, 5).setValue(currentExp - exp);

          const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");

          // ‚úÖ log ‡πÅ‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å format ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
          const rowIndex = log.getLastRow() + 1;
          log.getRange(rowIndex, 1).setNumberFormat("@"); // format ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô
          log.getRange(rowIndex, 1, 1, 5).setValues([[phone, codename, now, `UNDO: ${activity}`, -exp]]);

          ui.alert(`‚Ü©Ô∏è ‡∏¢‡πâ‡∏≠‡∏ô ${exp} EXP ‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° "${activity}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
          logAdminAction("UNDO EXP ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (1 ‡∏Ñ‡∏ô)", `‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${phone} | -${exp} (${activity})`, admin);
          updateRanks();
          updateLeaderboard();
          return;
        }
      }
    }
  }

  ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EXP ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ");
}




function undoLastExpBulk() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  const dash = ss.getSheetByName("Member Dashboard");
  const log = ss.getSheetByName("EXP Log");
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  const phonePrompt = ui.prompt("‡∏¢‡πâ‡∏≠‡∏ô EXP (‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô)", "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ , ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà)", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phoneInput2 = phonePrompt.getResponseText();
  if (!phoneInput2 || typeof phoneInput2 !== 'string') {
    ui.alert("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", ui.ButtonSet.OK);
    return;
  }
  const phonesRaw = phoneInput2.trim();
  const rawPhones = phonesRaw.split(/\s|,|\n/).map(p => p.trim()).filter(p => p);
  const phones = rawPhones.map(normalizePhone);

  const logData = log.getDataRange().getValues();
  const dashData = dash.getDataRange().getValues();
  let count = 0;

  for (let phone of phones) {
    for (let i = logData.length - 1; i >= 1; i--) {
      if (normalizePhone(logData[i][0]) === phone) {
        const codename = logData[i][1];
        const activity = logData[i][3];
        const exp = Number(logData[i][4]);
        if (isNaN(exp)) break;

        for (let j = 1; j < dashData.length; j++) {
          if (normalizePhone(dashData[j][1]) === phone) {
            const currentExp = Number(dashData[j][4]);
            dash.getRange(j + 1, 5).setValue(currentExp - exp);

            const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");
            log.appendRow([phone, codename, now, `UNDO: ${activity}`, -exp]);
            log.getRange(log.getLastRow(), 1).setNumberFormat("@");

            count++;
            break;
          }
        }
        break;
      }
    }
  }

  if (count > 0) {
    ui.alert(`‚Ü©Ô∏è ‡∏¢‡πâ‡∏≠‡∏ô EXP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ ${count} ‡∏Ñ‡∏ô`);
    logAdminAction("UNDO EXP ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô)", `${count} ‡∏Ñ‡∏ô`, admin);
    updateRanks();
    updateLeaderboard();
  } else {
    ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EXP ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤");
  }
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Web App - ‡∏™‡πà‡∏á Quest List ‡πÄ‡∏õ‡πá‡∏ô JSON
function getQuestList() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Quest List");
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const quests = [];

  for (let i = 1; i < data.length; i++) {
     // ‡πÅ‡∏Å‡πâ getQuestList() ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      if (data[i][7] !== true) continue; // index 7 = ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå H (checkbox)
    const quest = {};
    headers.forEach((key, index) => {
      quest[key] = data[i][index];
    });
    quests.push(quest);
  }
  return ContentService.createTextOutput(JSON.stringify(quests)).setMimeType(ContentService.MimeType.JSON);
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô submitQuest(phone, questId)
function submitQuest(e) {
  const phone = normalizePhone(e.parameter.phone);
  const questId = e.parameter.questId;
  const codename = getCodenameFromPhone(phone);

  const questSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Quest List");
  const logSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Quest Log");
  const questData = questSheet.getDataRange().getValues();
  let questName = "";

  for (let i = 1; i < questData.length; i++) {
    if (questData[i][0] === questId) {
      questName = questData[i][1];
      break;
    }
  }

  if (!questName) {
    return ContentService.createTextOutput("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ô‡∏µ‡πâ");
  }

  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm");
  logSheet.appendRow([now, phone, codename, questId, questName, "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à", "", "Web"]);
  return ContentService.createTextOutput("‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
}

// ‚úÖ helper: ‡∏´‡∏≤ codename ‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå
function getCodenameFromPhone(phone) {
  const dashSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = dashSheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (normalizePhone(data[i][1]) === normalizePhone(phone)) {
      return data[i][2];
    }
  }
  return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠";
}

function doGet(e) {
  // Route for the admin panel
  if (e.parameter.page === 'admin') {
    return showAdminPage();
  }
  if (e.parameter.page === 'profile') {
    return HtmlService.createHtmlOutputFromFile('profile.html').setTitle("Member Profile");
  }
  if (e.parameter.page === 'leaderboard') {
    return HtmlService.createHtmlOutputFromFile('leaderboard.html').setTitle("Leaderboard");
  }
  if (e.parameter.page === 'quests') {
    return HtmlService.createHtmlOutputFromFile('quests.html').setTitle("Quest Board");
  }
  if (e.parameter.page === 'challenge') {
    return HtmlService.createHtmlOutputFromFile('challenge.html').setTitle("Challenge");
  }
  if (e.parameter.page === 'sync-status') {
    return HtmlService.createHtmlOutputFromFile('sync-status.html').setTitle("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
  }

  const func = e?.parameter?.func;
  if (func === "getLeaderboard") return getLeaderboardData();
  if (func === "getQuestList") return getQuestList();
  if (func === "submitQuest") return submitQuest(e);
  if (func === "getFeaturedQuestsRandom") return getFeaturedQuestsRandom();
  if (func === "getQuestActivityLog") return getQuestActivityLog();
  if (func === "submitQuestToLog") return submitQuestToLog(e);
  if (func === "getCodename") return getCodename(e);
  if (func === "getCodenameList") return getCodenameList();
  if (func === "getChallengeList") return getChallengeList();
  if (func === "getPartyByPhone") return getPartyByPhone(e); // Added for completeness
  if (func === "getMemberProfile") return getMemberProfile(e.parameter.phone);
  if (func === "getPartyMembers") return getPartyMembers(e.parameter.partyName);
  if (func === "getPartyList") return getPartyList();
  if (func === "submitPartyChallenge") return submitPartyChallenge(e);
  if (func === "verifyPartyLeader") return verifyPartyLeader(e);
  if (func === "partyChallengeListPublic") return partyChallengeListPublic();
  if (func === "acceptPartyChallenge") return acceptPartyChallenge(e); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
  if (func === "getMemberDashboardData") return getMemberDashboardData();
  if (func === "getGymStandingData") return getGymStandingData();
  if (func === "getSyncStatusData") return getSyncStatusData();
  return HtmlService.createHtmlOutput("<p>‚úÖ Up Level Guild System Web App</p>");
}

function doPost(e) {
  logToDebugSheet('doPost: raw e', e);
  const func = e?.parameter?.func;
  if (func === "submitQuest") return submitQuest(e);
  if (func === "submitChallengeRequest") return submitChallengeRequest(e);
  if (func === "acceptChallenge") return acceptChallenge(e);
  if (func === "updateChallengeStatus") return updateChallengeStatus(e);
  if (func === "submitPartyChallenge") return submitPartyChallenge(e);
  if (func === "verifyPartyLeader") return verifyPartyLeader(e);
  if (func === "acceptPartyChallenge") return acceptPartyChallenge(e);
  if (func === "addMissingEntries") return addMissingEntriesFromWeb(e);
  return ContentService.createTextOutput("‚ùå Invalid Request").setMimeType(ContentService.MimeType.TEXT);
}


function getLeaderboardData() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Leaderboard");
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const result = data.slice(1).map(row => {
    const obj = {};
    headers.forEach((h, i) => obj[h] = row[i]);
    return obj;
  });

  return ContentService.createTextOutput(JSON.stringify(result))
    .setMimeType(ContentService.MimeType.JSON);
}


function getFeaturedQuestsRandom() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("Quest List");
    
    if (!sheet) {
      console.error("Error: Sheet 'Quest List' not found.");
      return ContentService.createTextOutput(JSON.stringify([])).setMimeType(ContentService.MimeType.JSON);
    }

    const data = sheet.getDataRange().getValues();
    if (data.length < 2) {
      return ContentService.createTextOutput(JSON.stringify([])).setMimeType(ContentService.MimeType.JSON);
    }
    
    const headers = data[0];
    const activeQuests = [];

    // --- ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡πÄ‡∏ä‡πá‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 8 (index 7) ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Checkbox ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô true ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    for (let i = 1; i < data.length; i++) {
      if (data[i][7] === true) { // ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå H 'Is Active' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const quest = {};
        headers.forEach((key, index) => {
          if (key) { quest[key] = data[i][index]; }
        });
        activeQuests.push(quest);
      }
    }

    // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏Ñ‡∏ß‡∏™‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤ 3 ‡∏≠‡∏±‡∏ô
    const shuffled = activeQuests.sort(() => 0.5 - Math.random());
    const selected = shuffled.slice(0, 3);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏ï‡∏£‡∏á‡πÜ
    return ContentService.createTextOutput(JSON.stringify(selected))
           .setMimeType(ContentService.MimeType.JSON);
           
  } catch (e) {
    console.error("getFeaturedQuestsRandom Error: " + e.toString());
    return ContentService.createTextOutput(JSON.stringify([])).setMimeType(ContentService.MimeType.JSON);
  }
}

function getQuestActivityLog() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("EXP Log");
  const data = sheet.getDataRange().getValues();
  const result = [];

  for (let i = data.length - 1; i > 0 && result.length < 5; i--) {
    const activity = data[i][3];
    if (typeof activity === 'string' && activity.startsWith("‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏ß‡∏™")) {
      const codename = data[i][1];
      const questName = activity.replace("‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏ß‡∏™: ", "").trim();
      result.push({ Codename: codename, QuestName: questName });
    }
  }

  return ContentService.createTextOutput(JSON.stringify(result))
    .setMimeType(ContentService.MimeType.JSON);
}


function submitQuestToLog(e) {
  const phone = normalizePhone(e.parameter.phone);
  const questId = e.parameter.questId;
  const codename = getCodenameFromPhone(phone);

  const questSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Quest List");
  const questData = questSheet.getDataRange().getValues();
  let questName = "";

  for (let i = 1; i < questData.length; i++) {
    if (questData[i][0] === questId) {
      questName = questData[i][1];
        break;
      }
    }

  if (!questName) {
    return ContentService.createTextOutput("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Quest ‡∏ô‡∏µ‡πâ").setMimeType(ContentService.MimeType.TEXT);
  }

  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm");
  const logSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Quest Log");

  const newRow = [now, "", codename, questId, questName, "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à", "", "Web"];
  const rowIndex = logSheet.getLastRow() + 1;
  logSheet.getRange(rowIndex, 1, 1, newRow.length).setValues([newRow]);

  // ‚úÖ ‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÅ‡∏¢‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï
  logSheet.getRange(rowIndex, 2).setValue(phone);
  logSheet.getRange(rowIndex, 2).setNumberFormat("@");

  return ContentService.createTextOutput("‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß").setMimeType(ContentService.MimeType.TEXT);
}




function approveQuestByPhone() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const logSheet = ss.getSheetByName("Quest Log");
  const questSheet = ss.getSheetByName("Quest List");
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const expLogSheet = ss.getSheetByName("EXP Log");

  const adminPrompt = ui.prompt("‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏ß‡∏™", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô:", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  const phonePrompt = ui.prompt("‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå", "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏ß‡∏™", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = safeGetPhoneFromPrompt(phonePrompt);

  const dashData = dashSheet.getDataRange().getValues();
  const dashRow = dashData.find(row => normalizePhone(row[1]) === phone);
  const codename = dashRow ? dashRow[2] : "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠";

  const logData = logSheet.getDataRange().getValues();
  const pendingQuests = [];
  for (let i = 1; i < logData.length; i++) {
    if (normalizePhone(logData[i][1]) === phone && logData[i][5] === "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à") {
      pendingQuests.push({ row: i + 1, name: logData[i][4], id: logData[i][3] });
    }
  }

  if (pendingQuests.length === 0) {
    ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ");
    return;
  }

  let listText = pendingQuests.map((q, i) => `${i + 1}. ${q.name}`).join("\n");
  const pickPrompt = ui.prompt("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏ß‡∏™", `‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤:\n\n${listText}\n\n‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥`, ui.ButtonSet.OK_CANCEL);
  if (pickPrompt.getSelectedButton() !== ui.Button.OK) return;
  const index = Number(pickPrompt.getResponseText().trim()) - 1;
  if (isNaN(index) || index < 0 || index >= pendingQuests.length) {
    ui.alert("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return;
  }

  const selectedQuest = pendingQuests[index];

  const questData = questSheet.getDataRange().getValues();
  const questInfo = questData.find(row => row[0] === selectedQuest.id);
  if (!questInfo) {
    ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏ß‡∏™‡πÉ‡∏ô Quest List");
    return;
  }

  const exp = Number(questInfo[3]) || 0;
  const pp = Number(questInfo[4]) || 0;

  for (let i = 1; i < dashData.length; i++) {
    if (normalizePhone(dashData[i][1]) === phone) {
      const currentExp = Number(dashData[i][4]);
      dashSheet.getRange(i + 1, 5).setValue(currentExp + exp);
        break;
      }
    }

  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");
  expLogSheet.appendRow([phone, codename, now, `‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏ß‡∏™: ${selectedQuest.name}`, exp]);
  expLogSheet.getRange(expLogSheet.getLastRow(), 1).setNumberFormat("@");

  logAdminAction("‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏ß‡∏™", `${codename} (${phone}) ‚Üí ${selectedQuest.name} +${exp}`, admin);

  logSheet.getRange(selectedQuest.row, 6).setValue("‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô");
  logSheet.getRange(selectedQuest.row, 8).setValue(admin);

  ui.alert(`‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏ß‡∏™ "${selectedQuest.name}" ‡πÉ‡∏´‡πâ ${codename} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
  updateRanks();
  updateLeaderboard();
}


function getCodenameFromPhone(phone) {
  const dashSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = dashSheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (normalizePhone(data[i][1]) === normalizePhone(phone)) {
      return data[i][2]; // codename ‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 3
    }
  }
  return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠";
}

function getCodename(e) {
  const phone = normalizePhone(e.parameter.phone);
  return ContentService.createTextOutput(getCodenameFromPhone(phone)).setMimeType(ContentService.MimeType.TEXT);
}

function getCodenameList() {
      const dashSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = dashSheet.getDataRange().getValues();
  const codenames = data.slice(1).map(row => row[2]).filter(name => name);
  return ContentService.createTextOutput(JSON.stringify(codenames)).setMimeType(ContentService.MimeType.JSON);
}

function submitChallengeRequest(e) {
  const logSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Challenge Log");
  const challengeSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Challenge");
  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");

  if (!e || !e.postData) {
    logSheet.appendRow([now, "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ postData", "", "", ""]);
    return ContentService.createTextOutput("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤");
  }

  const data = JSON.parse(e.postData.contents);
  const phoneRaw = data.phone;
  const phone = normalizePhone(phoneRaw);
  const codename = getCodenameFromPhone(phone);
  const { type, target, mode, wager, title } = data;
  const challengeTitle = title && title.trim() ? title.trim() : generateRandomChallengeTitle(codename);

  const uuid = new Date().getTime().toString(); // üÜï ‡πÉ‡∏ä‡πâ timestamp ‡πÄ‡∏õ‡πá‡∏ô ID

  const values = [
    Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm"),
    phone,
    codename,
    type,
    target,
    mode,
    wager,
    challengeTitle,
    "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
    uuid  // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  ];

  try {
    const newRow = challengeSheet.getLastRow() + 1;
    challengeSheet.getRange(newRow, 1, 1, values.length).setValues([values]);
    challengeSheet.getRange(newRow, 2).setNumberFormat("@");

    logSheet.appendRow([now, "‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", phone, codename, challengeTitle]);

    return ContentService.createTextOutput("‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥")
      .setMimeType(ContentService.MimeType.TEXT);
  } catch (err) {
    logSheet.appendRow([now, "‚ùå ERROR", phone, codename, err.message]);
    return ContentService.createTextOutput("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤: " + err.message)
      .setMimeType(ContentService.MimeType.TEXT);
  }
}






function fixChallengePhoneColumn() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Challenge");
  const phones = sheet.getRange(2, 2, sheet.getLastRow() - 1).getValues();
  for (let i = 0; i < phones.length; i++) {
    const raw = String(phones[i][0]).trim();
    if (raw.length === 9 && !raw.startsWith("0")) {
      sheet.getRange(i + 2, 2).setNumberFormat("@");
      sheet.getRange(i + 2, 2).setValue("0" + raw);
    }
  }
}




function generateRandomChallengeTitle(codename) {
  const formats = [
    "‡∏®‡∏∂‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏î‡∏Ç‡∏≠‡∏á " + codename,
    "‡∏ó‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏£‡∏á‡πÉ‡∏à!",
    "‡∏Ç‡∏≠‡πÅ‡∏Ñ‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏Ç‡πà‡∏á!",
    "‡∏ù‡∏∂‡∏Å‡∏ù‡∏µ‡∏°‡∏∑‡∏≠‡∏Å‡∏±‡∏ö‡πÉ‡∏Ñ‡∏£‡∏™‡∏±‡∏Å‡∏Ñ‡∏ô",
    "‡πÄ‡∏ß‡∏ó‡∏µ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏¢‡∏®!",
    "‡πÉ‡∏Ñ‡∏£‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏Ñ‡∏£‡∏à‡∏∞‡πÑ‡∏õ"
  ];
  return formats[Math.floor(Math.random() * formats.length)];
}





function getChallengeList() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Challenge");
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const results = [];

  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏ß‡∏•"
    if (row[headers.indexOf("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤")] === "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" || 
        row[headers.indexOf("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤")] === "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏ß‡∏•") {
      const item = {};
      headers.forEach((key, index) => item[key] = row[index]);
      results.push(item);
    }
  }

  return ContentService.createTextOutput(JSON.stringify(results))
    .setMimeType(ContentService.MimeType.JSON);
}

function approveChallenge() {
  const ui = SpreadsheetApp.getUi();
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Challenge");
  const data = sheet.getDataRange().getValues();

  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK || !adminPrompt.getResponseText().trim()) return;
  const admin = adminPrompt.getResponseText().trim();

  const pending = [];
  for (let i = 1; i < data.length; i++) {
    if (data[i][8] === "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥") {
      pending.push({ index: i + 1, title: data[i][7], codename: data[i][2] });
    }
  }

  if (pending.length === 0) {
    ui.alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥");
    return;
  }

  const list = pending.map((p, i) => `${i + 1}. ${p.codename} - ${p.title}`).join("\n");
  const prompt = ui.prompt("‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤", `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç:\n\n${list}`, ui.ButtonSet.OK_CANCEL);
  if (prompt.getSelectedButton() !== ui.Button.OK) return;
  const choice = Number(prompt.getResponseText().trim()) - 1;
  if (isNaN(choice) || choice < 0 || choice >= pending.length) {
    ui.alert("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return;
  }

  const row = pending[choice].index;
  const challengeTitle = pending[choice].title;
  const codename = pending[choice].codename;
  sheet.getRange(row, 9).setValue("‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥");

  logAdminAction("‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤", `‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡∏Ç‡∏≠‡∏á ${codename}: "${challengeTitle}"`, admin);
  ui.alert(`‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡∏Ç‡∏≠‡∏á ${codename} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
}


function acceptChallenge(e) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("Challenge");
  const data = sheet.getDataRange().getValues();
  const headers = data[0];

  const idCol = headers.indexOf("ID");
  const typeCol = headers.indexOf("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó");
  const targetCol = headers.indexOf("‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏ó‡πâ‡∏≤");
  const acceptCol = headers.indexOf("‡∏ú‡∏π‡πâ‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö");
  const statusCol = headers.indexOf("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤");

  const { phone, fullname, id, type, target } = JSON.parse(e.postData.contents);
  const codename = getCodenameByPhone(phone);
  const realname = getFullNameByPhone(phone);

  if (!codename || !realname || realname.trim() !== fullname.trim()) {
    return ContentService.createTextOutput("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô");
  }

  const rowIndex = data.findIndex(r => r[idCol] == id);
  if (rowIndex === -1) return ContentService.createTextOutput("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏");

  const row = data[rowIndex];
  if (row[acceptCol]) return ContentService.createTextOutput("‚ùå ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß");

  if (row[typeCol] === "direct" && row[targetCol] !== codename) {
    return ContentService.createTextOutput("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏ó‡πâ‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡∏ô‡∏µ‡πâ");
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö
  sheet.getRange(rowIndex + 1, acceptCol + 1).setValue(codename);

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô open ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏ó‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏¢
  if (row[typeCol] === "open") {
    sheet.getRange(rowIndex + 1, targetCol + 1).setValue(codename);
  }

  // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏ß‡∏•" ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  if (statusCol !== -1) {
    sheet.getRange(rowIndex + 1, statusCol + 1).setValue("‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏ß‡∏•");
  }

  return ContentService.createTextOutput("‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏ß‡∏• !!");
}



function recordChallengeResult() {
  const ui = SpreadsheetApp.getUi();
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Challenge");
  const partySheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Party");
  const data = sheet.getDataRange().getValues();
  const headers = data[0];

  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK || !adminPrompt.getResponseText().trim()) return;
  const admin = adminPrompt.getResponseText().trim();

  const idIndex = headers.indexOf("ID");
  const phoneIndex = headers.indexOf("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£");
  const codenameIndex = headers.indexOf("Codename");
  const targetIndex = headers.indexOf("‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏ó‡πâ‡∏≤");
  const acceptIndex = headers.indexOf("‡∏ú‡∏π‡πâ‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö");
  const statusIndex = headers.indexOf("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤");

  // üîç ‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
  const approvedRows = data.slice(1).filter(r => r[statusIndex] === "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥");
  if (approvedRows.length === 0) return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥");

  const challengeOptions = approvedRows.map(r => `${r[idIndex]} | ${r[codenameIndex]} vs ${r[acceptIndex]}`);
  const choicePrompt = ui.prompt(
    "üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•",
    challengeOptions.join("\n") + "\n\n‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç):",
    ui.ButtonSet.OK_CANCEL
  );
  if (choicePrompt.getSelectedButton() !== ui.Button.OK) return;
  const selectedId = choicePrompt.getResponseText().trim();

  const rowIndex = data.findIndex(r => r[idIndex] == selectedId);
  if (rowIndex === -1) return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ID ‡∏ô‡∏µ‡πâ");

  const row = data[rowIndex];
  const creatorPhone = normalizePhone(row[phoneIndex]);
  const creatorCodename = row[codenameIndex];
  const acceptorCodename = row[acceptIndex];
  const targetCodename = row[targetIndex];

  if (!acceptorCodename) return ui.alert("‚ùå ‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö");

  // üîΩ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
  const winnerPrompt = ui.prompt(
    "üèÜ ‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞",
    `1. ${creatorCodename}\n2. ${acceptorCodename}\n\n‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ Codename ‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏∞`,
    ui.ButtonSet.OK_CANCEL
  );
  if (winnerPrompt.getSelectedButton() !== ui.Button.OK) return;
  const winnerCodename = winnerPrompt.getResponseText().trim();

  const winnerPhone = getPhoneByCodename(winnerCodename);
  const loserPhone = (winnerCodename === creatorCodename)
    ? getPhoneByCodename(acceptorCodename)
    : creatorPhone;

  // üéÅ ‡∏Å‡∏£‡∏≠‡∏Å EXP ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô (optional)
  const wagerPrompt = ui.prompt(
    "üéÅ EXP ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)",
    "‡πÄ‡∏ä‡πà‡∏ô 3 ‡∏´‡∏£‡∏∑‡∏≠ -2 (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô)", ui.ButtonSet.OK_CANCEL
  );
  if (wagerPrompt.getSelectedButton() !== ui.Button.OK) return; // Allow empty response to proceed
  const expText = wagerPrompt.getResponseText().trim();
  const expAmount = expText ? parseInt(expText) : 0;

  // üÜï ‡∏Å‡∏£‡∏≠‡∏Å Party Point ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô (optional)
  const partyWagerPrompt = ui.prompt(
    "üéÅ Party Point ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)",
    "‡πÄ‡∏ä‡πà‡∏ô 5 (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô)", ui.ButtonSet.OK_CANCEL
  );
  if (partyWagerPrompt.getSelectedButton() !== ui.Button.OK) return;
  const partyWager = partyWagerPrompt.getResponseText().trim() ? Number(partyWagerPrompt.getResponseText().trim()) : 0;

  // üõ† ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  sheet.getRange(rowIndex + 1, statusIndex + 1).setValue("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß");

  // ‚úÖ ‡πÉ‡∏´‡πâ EXP & Party ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà
  giveExpAndParty(creatorPhone, "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡πâ‡∏≤‡πÅ‡∏Ç‡πà‡∏á", 1);
  giveExpAndParty(getPhoneByCodename(acceptorCodename), "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡πâ‡∏≤‡πÅ‡∏Ç‡πà‡∏á", 1);

  // ‚ûï‚ûñ ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô EXP
  if (!isNaN(expAmount) && expAmount !== 0) {
    giveExp(winnerPhone, `‡∏ä‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô EXP`, expAmount);
    giveExp(loserPhone, `‡πÅ‡∏û‡πâ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô EXP`, -expAmount);
  }

  // üÜï ‚ûï‚ûñ Party Point ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô (‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏¥‡∏î‡∏•‡∏ö)
  if (partyWager && partyWager > 0) {
    const partyData = partySheet.getDataRange().getValues();
    const winnerParty = getPartyByPhone(winnerPhone);
    const loserParty = getPartyByPhone(loserPhone);
    const winnerIdx = partyData.findIndex(r => r[0] === winnerParty);
    const loserIdx = partyData.findIndex(r => r[0] === loserParty);
    let loserCurrent = loserIdx !== -1 ? Number(partyData[loserIdx][2]) : 0;
    let winnerCurrent = winnerIdx !== -1 ? Number(partyData[winnerIdx][2]) : 0;
    const canLose = Math.max(0, loserCurrent - partyWager);
    const actualLost = loserCurrent - canLose;
    // ‡∏•‡∏ö‡∏ù‡∏±‡πà‡∏á‡πÅ‡∏û‡πâ
    if (loserIdx !== -1) partySheet.getRange(loserIdx + 1, 3).setValue(canLose);
    // ‡∏ö‡∏ß‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏ä‡∏ô‡∏∞
    if (winnerIdx !== -1) partySheet.getRange(winnerIdx + 1, 3).setValue(winnerCurrent + actualLost);
  }

  const logMessage = `‡∏ú‡∏•: ${winnerCodename} ‡∏ä‡∏ô‡∏∞ ${acceptorCodename}. EXP ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô: ${expAmount || 0}`;
  logAdminAction("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡πâ‡∏≤‡πÅ‡∏Ç‡πà‡∏á", logMessage, admin);
  ui.alert(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${winnerCodename} ‡∏ä‡∏ô‡∏∞\n+1 EXP/Party ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà${expAmount ? `\n‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô EXP: ${expAmount}` : ""}${partyWager ? `\n‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô Party Point: ${partyWager}` : ""}`);
}

function getPhoneByCodename(codename) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = sheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (String(data[i][2]).toLowerCase().trim() === codename.toLowerCase().trim()) {
      return normalizePhone(data[i][1]);
    }
  }
  return "";
}

function getCodenameByPhone(phone) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = sheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (normalizePhone(data[i][1]) === normalizePhone(phone)) {
      return data[i][2];
    }
  }
  return "";
}

function giveExpAndParty(phone, note, exp = 1) {
  giveExp(phone, note, exp);
  givePartyPoint(phone, note, 1);
}

function giveExp(phone, note, amount) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("EXP Log");
  const time = new Date();
  const codename = getCodenameByPhone(phone);
  sheet.appendRow([phone, codename, time, note, amount]);
  sheet.getRange(sheet.getLastRow(), 1).setNumberFormat("@");
  updateRanks();
  updateLeaderboard();
}

function givePartyPoint(phone, note, amount) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Party Log");
  const time = new Date();
  const codename = getCodenameByPhone(phone);
  const partyName = getPartyByPhone(phone);
  
  sheet.appendRow([time, partyName, codename, note, amount, "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"]);
  sheet.getRange(sheet.getLastRow(), 3).setNumberFormat("@");
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Party Point ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Party
  if (partyName) {
    const partySheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Party");
    const partyData = partySheet.getDataRange().getValues();
    for (let i = 1; i < partyData.length; i++) {
      if (partyData[i][0] === partyName) {
        const currentPoint = Number(partyData[i][2]) || 0;
        partySheet.getRange(i + 1, 3).setValue(currentPoint + amount);
        break;
      }
    }
  }
}

// ‚úÖ helper: ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
function getPartyByPhone(phone) {
  const dashSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = dashSheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (normalizePhone(data[i][1]) === normalizePhone(phone)) {
      return data[i][5] || "";
    }
  }
  return "";
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå app script ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏ô HTML)
function updateChallengeStatus(request) {
  try {
    const data = JSON.parse(request.postData.contents);
    const id = data.id;
    const status = data.status;
    
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Challenge");
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    const headers = values[0];
    
    const idIndex = headers.indexOf("ID");
    const statusIndex = headers.indexOf("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤");
    
    // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    let rowIndex = -1;
    for (let i = 1; i < values.length; i++) {
      if (values[i][idIndex] == id) {
        rowIndex = i + 1;
        break;
      }
    }

    if (rowIndex === -1) {
      return ContentService.createTextOutput("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡∏ô‡∏µ‡πâ");
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    sheet.getRange(rowIndex, statusIndex + 1).setValue(status);
    
    return ContentService.createTextOutput("‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
    
  } catch (error) {
    return ContentService.createTextOutput("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.toString());
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ - ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡∏Ñ‡πâ‡∏ô‡∏à‡∏≤‡∏Å member sheet)
function getFullNameByPhone(phone) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("member");
  const data = sheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (normalizePhone(data[i][3]) === normalizePhone(phone)) {
      return data[i][1]; // ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
    }
  }
  return "";
}

/**
 * Handles the form submission event.
 * This function should be set as the "On form submit" trigger for the spreadsheet.
 * @param {Object} e The event object.
 */
function handleFormSubmit(e) {
  const lock = LockService.getScriptLock();
  if (!lock.tryLock(15000)) {
    console.log("Server is busy, submission for " + e.namedValues['‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£'] + " will be processed later if needed, but the row is already in the sheet.");
    return;
  }

  try {
    const dbSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("member");
    const newRowRange = e.range;
    const newRowIndex = newRowRange.getRow();
    
    // --- Get data from the submitted form ---
    // Make sure the keys here EXACTLY match your Google Form question titles
    const codename = e.namedValues['Codename'][0].trim();
    const phone = normalizePhone(e.namedValues['‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£'][0].trim());
    const rank = e.namedValues['Rank'][0].trim();
    const isPremium = e.namedValues['Premium?'][0] === 'Yes'; // Adjust 'Yes' if your form uses a different value
    const referrer = e.namedValues['‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ú‡∏π‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)'] ? normalizePhone(e.namedValues['‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ú‡∏π‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)'][0].trim()) : "";

    // --- Search for duplicates (excluding the newly added row) ---
    const dbData = dbSheet.getDataRange().getValues();
    let originalRowIndex = -1;

    for (let i = 1; i < dbData.length; i++) {
      // Skip the row that was just added
      if (i + 1 === newRowIndex) continue;
      
      if (normalizePhone(dbData[i][3]) === phone) { // Assuming phone is in column D (index 3)
        originalRowIndex = i + 1;
        break;
      }
    }

    if (originalRowIndex !== -1) {
      // --- DUPLICATE FOUND ---
      // 1. Update the original row with new data
      dbSheet.getRange(originalRowIndex, 1).setValue(new Date()); // Update timestamp
      dbSheet.getRange(originalRowIndex, 2).setValue(codename);   // Update Codename
      dbSheet.getRange(originalRowIndex, 5).setValue(rank);       // Update Rank
      
      // 2. CRITICAL: Delete the new row that the form just added
      dbSheet.deleteRow(newRowIndex);
      
      // 3. Update other sheets
      updateDashboardAndLeaderboardForExistingUser(phone, codename, rank);

    } else {
      // --- NEW MEMBER ---
      // The row is already in Member Database, just fill in other details
      const initialExp = isPremium ? 2 : 1;
      dbSheet.getRange(newRowIndex, 3).setValue("Member");
      dbSheet.getRange(newRowIndex, 6).setValue(initialExp);
      dbSheet.getRange(newRowIndex, 7).setValue(isPremium);
      dbSheet.getRange(newRowIndex, 8).setValue(referrer);
      
      // Add to other sheets
      const dashSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
      dashSheet.appendRow([new Date(), phone, codename, rank, initialExp, ""]);

      const lbSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Leaderboard");
      lbSheet.appendRow([new Date(), phone, codename, rank, initialExp, ""]);

      logExp(phone, "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", initialExp);

      if (isPremium && referrer) {
        const referrerData = dbData.find(row => normalizePhone(row[3]) === referrer);
        if (referrerData) {
          logExp(referrer, "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (Premium)", 2);
        }
      }
    }

    updateLeaderboard();

  } catch (err) {
    // Log error to know if something goes wrong
    console.error("handleFormSubmit Error: " + err.toString());
    console.error("Event Object: " + JSON.stringify(e));
  } finally {
    lock.releaseLock();
  }
}

// You can keep this helper function as it is still useful
function updateDashboardAndLeaderboardForExistingUser(phone, codename, rank) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const lbSheet = ss.getSheetByName("Leaderboard");
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Member Dashboard
  const dashData = dashSheet.getDataRange().getValues();
  for (let i = 1; i < dashData.length; i++) {
    if (normalizePhone(dashData[i][1]) === phone) {
      dashSheet.getRange(i + 1, 3).setValue(codename); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Codename
      dashSheet.getRange(i + 1, 4).setValue(rank);     // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank
      break;
    }
  }
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Leaderboard
  const lbData = lbSheet.getDataRange().getValues();
  for (let i = 1; i < lbData.length; i++) {
    if (normalizePhone(lbData[i][1]) === phone) {
      lbSheet.getRange(i + 1, 3).setValue(codename); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Codename
      lbSheet.getRange(i + 1, 4).setValue(rank);     // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank
      break;
    }
  }
  
  updateRanks();
  updateLeaderboard();
}

// ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
function clearDuplicateEntriesDebug() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const dbSheet = ss.getSheetByName("Member Database");
  
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  const dashData = dashSheet.getDataRange().getValues();
  const phones = new Map();
  const codenames = new Map();
  let duplicates = [];

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
  for (let i = 1; i < dashData.length; i++) {
    const phone = normalizePhone(dashData[i][1]);
    const codename = String(dashData[i][2]).toLowerCase().trim();
    
    if (phones.has(phone)) {
      duplicates.push({ row: i + 1, type: "phone", value: phone, existing: phones.get(phone) });
    } else {
      phones.set(phone, i + 1);
    }
    
    if (codenames.has(codename)) {
      duplicates.push({ row: i + 1, type: "codename", value: codename, existing: codenames.get(codename) });
    } else {
      codenames.set(codename, i + 1);
    }
  }

  if (duplicates.length === 0) {
    ui.alert("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
    return;
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
  let message = `‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ ${duplicates.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n\n`;
  duplicates.forEach((dup, index) => {
    const member = dashData[dup.row - 1];
    message += `${index + 1}. ‡πÅ‡∏ñ‡∏ß ${dup.row}: ${member[0]} (${dup.type}: ${dup.value})\n`;
  });

  const confirm = ui.alert("üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥", message + "\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", ui.ButtonSet.YES_NO);
  if (confirm !== ui.Button.YES) return;

  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ (‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô)
  duplicates.sort((a, b) => b.row - a.row);
  let deletedCount = 0;
  
  for (const dup of duplicates) {
    try {
      dashSheet.deleteRow(dup.row);
      deletedCount++;
    } catch (e) {
      console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß ${dup.row}: ${e.message}`);
    }
  }

  updateLeaderboard();
  logAdminAction("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥", `‡∏•‡∏ö ${deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, admin);
  ui.alert(`‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ${deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
}

function getPartyByPhone(e) {
  if (!e || !e.parameter || !e.parameter.phone) {
    return ContentService.createTextOutput("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö phone ‡πÉ‡∏ô parameter: " + JSON.stringify(e && e.parameter)).setMimeType(ContentService.MimeType.TEXT);
  }
  const phone = normalizePhone(e.parameter.phone);
  const partyName = getPartyNameByPhone(phone); // Assuming you rename the original for clarity
  return ContentService.createTextOutput(partyName).setMimeType(ContentService.MimeType.TEXT);
}

// Renamed for clarity from previous steps. 
// If you have 'getPartyByPhone', you can rename it to this.
function getPartyNameByPhone(phone) {
  const dashSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = dashSheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (normalizePhone(data[i][1]) === normalizePhone(phone)) {
      return data[i][5] || "";
    }
  }
  return "";
}

/**
 * Serves the Admin Panel web page.
 * It checks for admin privileges before serving the page.
 */
function showAdminPage() {
  // If user is an admin, serve the actual admin panel page.
  return HtmlService.createHtmlOutputFromFile('Admin.html')
    .setTitle("Up Level Admin Panel")
    .addMetaTag('viewport', 'width=device-width, initial-scale=1.0');
}

/**
 * Called by the Admin Web App to get initial data.
 * It returns the user's email and their admin status.
 * This allows the web app to display the correct UI (admin tools or access denied message).
 */
function getAdminWebAppInitialData() {
  const email = Session.getActiveUser().getEmail();
  return {
    isAdmin: true, // ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠
    email: email
  };
}

/**
 * üÜï Changes a member's phone number across all relevant sheets.
 * This is an admin-only function.
 */
function changeMemberPhoneNumber() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();

  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK || !adminPrompt.getResponseText().trim()) {
    return;
  }
  const admin = adminPrompt.getResponseText().trim();

  const oldPhonePrompt = ui.prompt("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ '‡πÄ‡∏Å‡πà‡∏≤' ‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:", ui.ButtonSet.OK_CANCEL);
  if (oldPhonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const oldPhone = normalizePhone(oldPhonePrompt.getResponseText().trim());

  if (!oldPhone) {
      ui.alert("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÄ‡∏Å‡πà‡∏≤");
      return;
  }

  const dashSheet = ss.getSheetByName("Member Dashboard");
  const dashData = dashSheet.getDataRange().getValues();
  const memberIndex = dashData.findIndex(row => normalizePhone(row[1]) === oldPhone);

  if (memberIndex === -1) {
    ui.alert(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ '${oldPhone}' ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (Member Dashboard)`);
    return;
  }

  const codename = dashData[memberIndex][2];

  const newPhonePrompt = ui.prompt("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", `‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${codename}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ '‡πÉ‡∏´‡∏°‡πà':`, ui.ButtonSet.OK_CANCEL);
  if (newPhonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const newPhone = normalizePhone(newPhonePrompt.getResponseText().trim());

  if (!validatePhoneOrAlert(newPhone, ui)) return;

  if (oldPhone === newPhone) {
      ui.alert("‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÄ‡∏Å‡πà‡∏≤");
      return;
  }

  const newPhoneExists = dashData.some((row, index) => index !== memberIndex && normalizePhone(row[1]) === newPhone);
  if (newPhoneExists) {
    ui.alert("‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß");
    return;
  }
  
  const confirm = ui.alert("‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", `‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á '${codename}'\n\n‡∏à‡∏≤‡∏Å: ${oldPhone}\n‡πÄ‡∏õ‡πá‡∏ô: ${newPhone}\n\n‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡∏µ‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á`, ui.ButtonSet.YES_NO);
  if (confirm !== ui.Button.YES) {
    return;
  }

  try {
    SpreadsheetApp.getUi().showSidebar(HtmlService.createHtmlOutput("<p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...</p>").setTitle("Processing..."));

    // --- Define all sheets and columns to update ---
    const sheetsToUpdate = [
      { name: "Member Dashboard", col: 2 },
      { name: "Member Database", col: 4 },
      { name: "EXP Log", col: 1 },
      { name: "Party", col: 2 }, // Owner Phone Number
      { name: "Party Tracker", col: 3 },
      { name: "Quest Log", col: 2 },
      { name: "Challenge", col: 2 },
      { name: "Challenge Log", col: 3 }
    ];

    for (const config of sheetsToUpdate) {
        const sheet = ss.getSheetByName(config.name);
        if (sheet) {
            const data = sheet.getDataRange().getValues();
            for (let i = 1; i < data.length; i++) {
                if (normalizePhone(data[i][config.col - 1]) === oldPhone) {
                    sheet.getRange(i + 1, config.col).setValue(newPhone).setNumberFormat("@");
                }
            }
        }
    }

    logAdminAction("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", `‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á ${codename} ‡∏à‡∏≤‡∏Å ${oldPhone} ‡πÄ‡∏õ‡πá‡∏ô ${newPhone}`, admin);
    ui.alert("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

  } catch (e) {
    ui.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " + e.message);
    console.error("changeMemberPhoneNumber Error: " + e.toString());
  }
}

/**
 * üÜï Adds party points based on a predefined list of activities.
 * This function prompts for admin, activity, and a party member's phone number.
 */
function addPartyPointFromActivity() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK || !adminPrompt.getResponseText().trim()) {
    return;
  }
  const admin = adminPrompt.getResponseText().trim();

  const activitySheet = ss.getSheetByName("Party Activity List");
  if (!activitySheet) {
    ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó 'Party Activity List'", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó‡πÉ‡∏´‡∏°‡πà‡∏ä‡∏∑‡πà‡∏≠ 'Party Activity List' ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A ‡πÄ‡∏õ‡πá‡∏ô '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ' ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B ‡πÄ‡∏õ‡πá‡∏ô '‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ'", ui.ButtonSet.OK);
    return;
  }
  
  const activityData = activitySheet.getRange(2, 1, activitySheet.getLastRow() - 1, 2).getValues().filter(r => r[0] && r[1]);
  if (activityData.length === 0) {
      ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó 'Party Activity List'");
      return;
  }

  const activityList = activityData.map((row, i) => `${i + 1}. ${row[0]} (${row[1]} ‡πÅ‡∏ï‡πâ‡∏°)`).join("\n");
  const activityPrompt = ui.prompt("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ (‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç)", `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:\n\n${activityList}`, ui.ButtonSet.OK_CANCEL);
  if (activityPrompt.getSelectedButton() !== ui.Button.OK) return;

  const activityIndex = Number(activityPrompt.getResponseText().trim()) - 1;
  if (isNaN(activityIndex) || activityIndex < 0 || activityIndex >= activityData.length) {
    ui.alert("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return;
  }
  
  const [activityName, points] = activityData[activityIndex];
  
  const phonePrompt = ui.prompt("‡πÄ‡∏û‡∏¥‡πà‡∏° Party Point", "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ (‡πÉ‡∏Ñ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ):", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = safeGetPhoneFromPrompt(phonePrompt);

  if (!validatePhoneOrAlert(phone, ui)) return;

  const dashSheet = ss.getSheetByName("Member Dashboard");
  const dashData = dashSheet.getDataRange().getValues();
  const member = dashData.find(row => normalizePhone(row[1]) === phone);

  if (!member) {
    ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
    return;
  }
  
  const codename = member[2];
  const partyName = member[5];

  if (!partyName) {
    ui.alert(`‚ùå ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å '${codename}' ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏î‡πÜ`);
    return;
  }
  
  let pointAmount = 0;
  // üÜï ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ 'points'
  if (String(points).trim() === "‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å") {
    const trackerSheet = ss.getSheetByName("Party Tracker");
    if (!trackerSheet) {
      ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó 'Party Tracker' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å");
      return;
    }
    const trackerData = trackerSheet.getDataRange().getValues();
    const memberCount = trackerData.filter(row => row[0] === partyName).length;
    pointAmount = memberCount > 0 ? memberCount : 1; // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1
  } else {
    pointAmount = Number(points);
    if (isNaN(pointAmount)) {
      ui.alert("‚ùå ‡∏Ñ‡πà‡∏≤‡πÅ‡∏ï‡πâ‡∏°‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó 'Party Activity List' ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ");
      return;
    }
  }

  // üÜï ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
  const confirmMessage = `‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${codename}\n‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ: ${partyName}\n\n‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° ${pointAmount} ‡πÅ‡∏ï‡πâ‡∏° ‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° '${activityName}' ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`;
  const confirm = ui.alert("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ï‡πâ‡∏°", confirmMessage, ui.ButtonSet.YES_NO);
  if (confirm !== ui.Button.YES) return;

  const partySheet = ss.getSheetByName("Party");
  const partyLogSheet = ss.getSheetByName("Party Log");
  const partyData = partySheet.getDataRange().getValues();
  const partyIndex = partyData.findIndex(row => row[0] === partyName);

  if (partyIndex === -1) {
    ui.alert(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ '${partyName}' ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Party`);
    return;
  }

  const currentPoint = Number(partyData[partyIndex][2]);
  partySheet.getRange(partyIndex + 1, 3).setValue(currentPoint + pointAmount);

  partyLogSheet.appendRow([
    new Date(), 
    partyName, 
    codename, 
    activityName, 
    pointAmount, 
    `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÇ‡∏î‡∏¢ ${admin}`
  ]);
  
  logAdminAction("‡πÄ‡∏û‡∏¥‡πà‡∏° Party Point ‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", `‡πÉ‡∏´‡πâ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ${partyName} +${pointAmount} ‡πÅ‡∏ï‡πâ‡∏° (‡∏ú‡πà‡∏≤‡∏ô ${codename}) | ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${activityName}`, admin);
  ui.alert(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° ${pointAmount} ‡πÅ‡∏ï‡πâ‡∏°‡πÉ‡∏´‡πâ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ '${partyName}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
}

/**
 * üÜï Searches for a member's profile data across multiple sheets.
 * @param {string} codename The codename of the member to search for.
 * @returns {ContentService} A JSON object with the member's profile data or an error message.
 */
function getMemberProfile(phone) {
  if (!phone) {
    return ContentService.createTextOutput(JSON.stringify({ error: "Phone number is required." })).setMimeType(ContentService.MimeType.JSON);
  }
  const normalizedPhone = normalizePhone(phone);

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const partySheet = ss.getSheetByName("Party");

  if (!dashSheet || !partySheet) {
    return ContentService.createTextOutput(JSON.stringify({ error: "Required sheet not found." })).setMimeType(ContentService.MimeType.JSON);
  }

  const dashData = dashSheet.getDataRange().getValues();
  const partyData = partySheet.getDataRange().getValues();

  const memberRow = dashData.find(row => normalizePhone(String(row[1])) === normalizedPhone);

  if (!memberRow) {
    return ContentService.createTextOutput(JSON.stringify({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏µ‡πâ" })).setMimeType(ContentService.MimeType.JSON);
  }

  const memberInfo = {
    nickname: memberRow[0],
    codename: memberRow[2],
    rank: memberRow[3],
    exp: memberRow[4],
    partyName: memberRow[5] || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ"
  };

  let partyInfo = {
    partyPoints: "-"
  };

  if (memberInfo.partyName !== "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ") {
    const partyRow = partyData.find(row => row[0] === memberInfo.partyName);
    if (partyRow) {
      partyInfo.partyPoints = partyRow[2] || 0;
    }
  }

  const profileData = { ...memberInfo, ...partyInfo };

  return ContentService.createTextOutput(JSON.stringify(profileData)).setMimeType(ContentService.MimeType.JSON);
}

/**
 * ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ (Codename, Rank, Nickname) ‡∏à‡∏≤‡∏Å Party Tracker
 * @param {string} partyName
 * @returns {ContentService} JSON array
 */
function getPartyMembers(partyName) {
  if (!partyName) {
    return ContentService.createTextOutput(JSON.stringify({ error: "Party name is required." })).setMimeType(ContentService.MimeType.JSON);
  }
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const trackerSheet = ss.getSheetByName("Party Tracker");
  const dashSheet = ss.getSheetByName("Member Dashboard");
  if (!trackerSheet || !dashSheet) {
    return ContentService.createTextOutput(JSON.stringify({ error: "Required sheet not found." })).setMimeType(ContentService.MimeType.JSON);
  }
  const trackerData = trackerSheet.getDataRange().getValues();
  const dashData = dashSheet.getDataRange().getValues();
  // ‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ô‡∏µ‡πâ
  const members = trackerData.slice(1)
    .filter(row => String(row[0] || '').trim() === String(partyName).trim())
    .map(row => {
      const codename = row[1];
      // ‡∏´‡∏≤ rank/nickname ‡∏à‡∏≤‡∏Å Member Dashboard
      const dashRow = dashData.find(d => String(d[2]).trim() === String(codename).trim());
      return {
        codename,
        rank: dashRow ? dashRow[3] : '',
        nickname: dashRow ? dashRow[0] : ''
      };
    });
  return ContentService.createTextOutput(JSON.stringify(members)).setMimeType(ContentService.MimeType.JSON);
}

// ‚úÖ ‡πÅ‡∏•‡∏Å‡πÅ‡∏ï‡πâ‡∏° Party Point ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Reward Catalog)
function redeemPartyPoint() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const partySheet = ss.getSheetByName("Party");
  const partyLogSheet = ss.getSheetByName("Party Log");
  const rewardSheet = ss.getSheetByName("Reward Catalog");

  // 0. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK || !adminPrompt.getResponseText().trim()) return;
  const admin = adminPrompt.getResponseText().trim();

  // 1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ (dropdown ‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç)
  const partyData = partySheet.getDataRange().getValues();
  const partyNames = partyData.slice(1).map(row => row[0]);
  if (partyNames.length === 0) return ui.alert("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
  const partyList = partyNames.map((p, i) => `${i + 1}. ${p}`).join("\n");
  const partyPrompt = ui.prompt("‡πÅ‡∏•‡∏Å‡πÅ‡∏ï‡πâ‡∏°", `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç:\n${partyList}`, ui.ButtonSet.OK_CANCEL);
  if (partyPrompt.getSelectedButton() !== ui.Button.OK) return;
  const partyIndex = Number(partyPrompt.getResponseText().trim()) - 1;
  if (isNaN(partyIndex) || partyIndex < 0 || partyIndex >= partyNames.length) return ui.alert("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
  const partyName = partyNames[partyIndex];

  // 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏à‡∏≤‡∏Å Reward Catalog (dropdown ‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç)
  const rewardData = rewardSheet.getDataRange().getValues();
  if (rewardData.length < 2) return ui.alert("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏ô Reward Catalog");
  const rewardList = rewardData.slice(1).map((row, i) => `${i + 1}. ${row[0]} (${row[1]} ‡πÅ‡∏ï‡πâ‡∏°)`);
  const rewardPrompt = ui.prompt("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•", `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç:\n${rewardList.join("\n")}`, ui.ButtonSet.OK_CANCEL);
  if (rewardPrompt.getSelectedButton() !== ui.Button.OK) return;
  const rewardIndex = Number(rewardPrompt.getResponseText().trim()) - 1;
  if (isNaN(rewardIndex) || rewardIndex < 0 || rewardIndex >= rewardList.length) return ui.alert("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
  const [rewardName, requiredPoint] = rewardData[rewardIndex + 1];
  const points = Number(requiredPoint);
  const currentPoint = Number(partyData[partyIndex + 1][2]);
  if (points > currentPoint) return ui.alert("‚ùå ‡πÅ‡∏ï‡πâ‡∏°‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏û‡∏≠");

  // 3. ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
  const summary = `‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ: ${partyName}\n‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: ${rewardName}\n‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: ${points}\n‡πÅ‡∏ï‡πâ‡∏°‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${currentPoint - points}\n‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô: ${admin}\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`;
  const confirm = ui.alert("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡πÅ‡∏ï‡πâ‡∏°", summary, ui.ButtonSet.YES_NO);
  if (confirm !== ui.Button.YES) return;

  // 4. ‡∏´‡∏±‡∏Å‡πÅ‡∏ï‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
  partySheet.getRange(partyIndex + 2, 3).setValue(currentPoint - points);
  partyLogSheet.appendRow([new Date(), partyName, "", `‡πÅ‡∏•‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: ${rewardName}`, -points, `‡πÅ‡∏•‡∏Å‡πÅ‡∏ï‡πâ‡∏°‡πÇ‡∏î‡∏¢ ${admin}`]);
  logAdminAction("‡πÅ‡∏•‡∏Å‡πÅ‡∏ï‡πâ‡∏° Party Point", `‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ${partyName} ‡πÅ‡∏•‡∏Å ${rewardName} (${points} ‡πÅ‡∏ï‡πâ‡∏°) ‡πÇ‡∏î‡∏¢ ${admin}`, admin);
  ui.alert(`‚úÖ ‡πÅ‡∏•‡∏Å‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ${partyName} ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${currentPoint - points} ‡πÅ‡∏ï‡πâ‡∏°`);
}

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function getPartyList() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const partySheet = ss.getSheetByName("Party");
  const trackerSheet = ss.getSheetByName("Party Tracker");
  if (!partySheet || !trackerSheet) {
    return ContentService.createTextOutput(JSON.stringify([])).setMimeType(ContentService.MimeType.JSON);
  }
  const partyData = partySheet.getDataRange().getValues();
  const trackerData = trackerSheet.getDataRange().getValues();
  const parties = [];
  for (let i = 1; i < partyData.length; i++) {
    const partyName = String(partyData[i][0] || '').trim();
    if (!partyName) continue;
    const memberCount = trackerData.filter(row => String(row[0] || '').trim() === partyName).length;
    parties.push({ name: partyName, memberCount });
  }
  return ContentService.createTextOutput(JSON.stringify(parties)).setMimeType(ContentService.MimeType.JSON);
}

// ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤ Party vs Party
function submitPartyChallenge(e) {
  let data = {};
  if (e && e.postData && e.postData.contents) {
    const contentType = e.postData.type || "";
    if (contentType.indexOf("application/json") !== -1) {
      try {
        data = JSON.parse(e.postData.contents);
      } catch (err) {
        return ContentService.createTextOutput("‚ùå JSON parse error: " + err.message).setMimeType(ContentService.MimeType.TEXT);
      }
    } else {
      data = e.parameter || {};
    }
  } else if (e && e.parameter) {
    data = e.parameter;
  } else {
    return ContentService.createTextOutput("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤").setMimeType(ContentService.MimeType.TEXT);
  }

  // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ normalizePhone
  if (!data.phone) {
    return ContentService.createTextOutput("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö phone ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " + JSON.stringify(data)).setMimeType(ContentService.MimeType.TEXT);
  }

  // ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
  const phone = normalizePhone(data.phone);
  const codename = getCodenameFromPhone(phone);
  const size = data.size;
  const type = data.type;
  const mode = data.mode;
  const targetParty = data.targetParty;
  const wager = data.wager;
  const title = data.title;

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const partySheet = ss.getSheetByName("Party");
  const partyData = partySheet.getDataRange().getValues();
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
  const partyExists = partyData.some(row => row[0] === targetParty);
  if (!partyExists) {
    return ContentService.createTextOutput("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢").setMimeType(ContentService.MimeType.TEXT);
  }
  const challengeSheet = ss.getSheetByName("Party Challenge");
  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");
  const values = [
    now, // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà-‡πÄ‡∏ß‡∏•‡∏≤
    getPartyNameByPhone(phone), // ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ú‡∏π‡πâ‡∏ó‡πâ‡∏≤ (return string)
    targetParty, // ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    `Party vs Party (${size})`, // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    `${type} ${mode}`, // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    wager, // ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô
    title || "-", // ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤
    "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    "", // ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
    "", // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
    "Web" // ‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  ];
  try {
    challengeSheet.appendRow(values);
    return ContentService.createTextOutput("‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤ Party vs Party ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥").setMimeType(ContentService.MimeType.TEXT);
  } catch (err) {
    return ContentService.createTextOutput("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + err.message).setMimeType(ContentService.MimeType.TEXT);
  }
}

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ
function verifyPartyLeader(e) {
  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö GET request ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Trainer Challenge
  const phone = normalizePhone(e.parameter.phone);
  const fullname = (e.parameter.fullname || '').trim();
  
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const trackerSheet = ss.getSheetByName("Party Tracker");
  const dbSheet = ss.getSheetByName("member");
  
  if (!trackerSheet || !dbSheet) {
    return ContentService.createTextOutput("error").setMimeType(ContentService.MimeType.TEXT);
  }
  
  const trackerData = trackerSheet.getDataRange().getValues();
  const dbData = dbSheet.getDataRange().getValues();
  
  // ‡∏´‡∏≤ row ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ
  const leaderRow = trackerData.find(row => normalizePhone(row[2]) === phone && row[3] === "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ");
  if (!leaderRow) {
    return ContentService.createTextOutput("not_leader").setMimeType(ContentService.MimeType.TEXT);
  }
  
  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•‡∏à‡∏≤‡∏Å member sheet (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 2)
  const dbRow = dbData.find(row => normalizePhone(row[3]) === phone);
  if (!dbRow || (dbRow[1] || '').trim() !== fullname) {
    return ContentService.createTextOutput("name_mismatch").setMimeType(ContentService.MimeType.TEXT);
  }
  
  // ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Trainer Challenge)
  const partyName = leaderRow[0];
  const codename = leaderRow[1];
  
  return ContentService.createTextOutput(`${codename}|${partyName}`).setMimeType(ContentService.MimeType.TEXT);
}

// ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤ Party vs Party (‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
function approvePartyChallenge() {
  const ui = SpreadsheetApp.getUi();
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Party Challenge");
  const data = sheet.getDataRange().getValues();

  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK || !adminPrompt.getResponseText().trim()) return;
  const admin = adminPrompt.getResponseText().trim();

  // ‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå H = ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞)
  const pending = [];
  for (let i = 1; i < data.length; i++) {
    if (data[i][7] === "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥") {
      pending.push({ index: i + 1, title: data[i][6], party: data[i][1], target: data[i][2] });
    }
  }

  if (pending.length === 0) {
    ui.alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤ Party vs Party ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥");
    return;
  }

  const list = pending.map((p, i) => `${i + 1}. ${p.party} vs ${p.target} - ${p.title}`).join("\n");
  const prompt = ui.prompt("‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤ Party vs Party", `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç:\n\n${list}`, ui.ButtonSet.OK_CANCEL);
  if (prompt.getSelectedButton() !== ui.Button.OK) return;
  const choice = Number(prompt.getResponseText().trim()) - 1;
  if (isNaN(choice) || choice < 0 || choice >= pending.length) {
    ui.alert("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return;
  }

  const row = pending[choice].index;
  const challengeTitle = pending[choice].title;
  const party = pending[choice].party;
  const target = pending[choice].target;
  sheet.getRange(row, 8).setValue("‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"); // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå H = ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞

  logAdminAction("‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Party Challenge", `‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤ ${party} vs ${target}: '${challengeTitle}'`, admin);
  ui.alert(`‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤ Party vs Party ‡∏Ç‡∏≠‡∏á ${party} vs ${target} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
}

// ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Party Challenge ‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏ß‡∏•' (public test)
function partyChallengeListPublic() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Party Challenge");
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const results = [];
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    if (row[headers.indexOf("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")] === "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" || row[headers.indexOf("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")] === "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏ß‡∏•") {
      const item = {};
      headers.forEach((key, idx) => item[key] = row[idx]);
      results.push(item);
    }
  }
  return ContentService.createTextOutput(JSON.stringify(results)).setMimeType(ContentService.MimeType.JSON);
}

function logToDebugSheet(...args) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("Debug Log");
    if (!sheet) return;
    const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "yyyy-MM-dd HH:mm:ss");
    sheet.appendRow([now, ...args.map(x => typeof x === 'object' ? JSON.stringify(x) : x)]);
  } catch (err) {}
}

function acceptPartyChallenge(e) {
  let phone, fullname, id;
  logToDebugSheet('acceptPartyChallenge: raw e', e);
  if (e.postData && e.postData.contents) {
    logToDebugSheet('acceptPartyChallenge: found postData');
    const data = JSON.parse(e.postData.contents);
    phone = normalizePhone(data.phone);
    fullname = (data.fullname || '').trim();
    id = data.id;
    logToDebugSheet('acceptPartyChallenge: from postData', phone, fullname, id);
  } else if (e.parameter) {
    logToDebugSheet('acceptPartyChallenge: found parameter');
    phone = normalizePhone(e.parameter.phone);
    fullname = (e.parameter.fullname || '').trim();
    id = e.parameter.id;
    logToDebugSheet('acceptPartyChallenge: from parameter', phone, fullname, id);
  }
  if (!phone || !fullname || !id) {
    logToDebugSheet('acceptPartyChallenge: missing data', phone, fullname, id);
    return ContentService.createTextOutput("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô").setMimeType(ContentService.MimeType.TEXT);
  }

  const codename = getCodenameByPhone(phone);
  logToDebugSheet('acceptPartyChallenge: codename', codename);

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const challengeSheet = ss.getSheetByName("Party Challenge");
  const data = challengeSheet.getDataRange().getValues();
  const headers = data[0];
  logToDebugSheet('acceptPartyChallenge: headers', headers);

  const titleCol = headers.indexOf("‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤");
  const statusCol = headers.indexOf("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞");
  logToDebugSheet('acceptPartyChallenge: titleCol', titleCol, 'statusCol', statusCol);

  let foundRow = -1;
  for (let i = 1; i < data.length; i++) {
    if (data[i][titleCol] === id) {
      foundRow = i + 1;
      break;
    }
  }
  logToDebugSheet('acceptPartyChallenge: foundRow', foundRow);
  if (foundRow === -1) {
    logToDebugSheet('acceptPartyChallenge: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
    return ContentService.createTextOutput("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏").setMimeType(ContentService.MimeType.TEXT);
  }

  try {
    challengeSheet.getRange(foundRow, statusCol + 1).setValue("‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏ß‡∏•");
    logToDebugSheet('acceptPartyChallenge: updated status to ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏ß‡∏•');
  } catch (err) {
    logToDebugSheet('acceptPartyChallenge: setValue error', err && err.message ? err.message : err);
    return ContentService.createTextOutput("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏µ‡∏ó: " + (err && err.message ? err.message : err)).setMimeType(ContentService.MimeType.TEXT);
  }

  return ContentService.createTextOutput("‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤ Party vs Party ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏ß‡∏• !!").setMimeType(ContentService.MimeType.TEXT);
}

// üÜï ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏• Party vs Party
function recordPartyChallengeResult() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("Party Challenge");
  const partySheet = ss.getSheetByName("Party");
  const logSheet = ss.getSheetByName("Party Log");
  const data = sheet.getDataRange().getValues();
  const headers = data[0];

  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK || !adminPrompt.getResponseText().trim()) return;
  const admin = adminPrompt.getResponseText().trim();

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å challenge ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏ß‡∏•
  const statusCol = headers.indexOf("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞");
  const partyCol = headers.indexOf("‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ú‡∏π‡πâ‡∏ó‡πâ‡∏≤");
  const targetCol = headers.indexOf("‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢");
  const typeCol = headers.indexOf("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó");
  const titleCol = headers.indexOf("‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ó‡πâ‡∏≤");
  const wagerCol = headers.indexOf("‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô");

  const readyRows = data.slice(1).filter(r => r[statusCol] === "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏ß‡∏•");
  if (readyRows.length === 0) return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Party Challenge ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏ß‡∏•");

  const challengeOptions = readyRows.map((r, i) => `${i + 1}. ${r[partyCol]} vs ${r[targetCol]} | ${r[titleCol]}`);
  const pickPrompt = ui.prompt("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Party Challenge", challengeOptions.join("\n") + "\n\n‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:", ui.ButtonSet.OK_CANCEL);
  if (pickPrompt.getSelectedButton() !== ui.Button.OK) return;
  const idx = Number(pickPrompt.getResponseText().trim()) - 1;
  if (isNaN(idx) || idx < 0 || idx >= readyRows.length) return ui.alert("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• challenge
  const row = readyRows[idx];
  const rowIndex = data.findIndex(r => r[titleCol] === row[titleCol]);
  const partyA = row[partyCol];
  const partyB = row[targetCol];
  const type = row[typeCol];
  const wager = row[wagerCol];
  const sizeMatch = String(type).match(/(\d+)v\d+/);
  const partyPointPerTeam = sizeMatch ? Number(sizeMatch[1]) : 1;

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
  const winnerPrompt = ui.prompt("üèÜ ‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞", `1. ${partyA}\n2. ${partyB}\n\n‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏∞:`, ui.ButtonSet.OK_CANCEL);
  if (winnerPrompt.getSelectedButton() !== ui.Button.OK) return;
  const winner = winnerPrompt.getResponseText().trim();
  if (![partyA, partyB].includes(winner)) return ui.alert("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
  const loser = winner === partyA ? partyB : partyA;

  // ‡∏Å‡∏£‡∏≠‡∏Å Party Point ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô (optional)
  const wagerPrompt = ui.prompt("üéÅ Party Point ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)", "‡πÄ‡∏ä‡πà‡∏ô 5 (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô)", ui.ButtonSet.OK_CANCEL);
  if (wagerPrompt.getSelectedButton() !== ui.Button.OK) return;
  const wagerPoint = wagerPrompt.getResponseText().trim() ? Number(wagerPrompt.getResponseText().trim()) : 0;

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  sheet.getRange(rowIndex + 1, statusCol + 1).setValue("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß");
  sheet.getRange(rowIndex + 1, headers.indexOf("‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞") + 1).setValue(winner);

  // ‡πÉ‡∏´‡πâ Party Point ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î
  function addPartyPoint(partyName, amount, note) {
    const partyData = partySheet.getDataRange().getValues();
    const idx = partyData.findIndex(r => r[0] === partyName);
    if (idx === -1) return;
    const current = Number(partyData[idx][2]) || 0;
    partySheet.getRange(idx + 1, 3).setValue(current + amount);
    logSheet.appendRow([new Date(), partyName, winner, note, amount, `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏• Party Challenge (${admin})`]);
  }
  addPartyPoint(partyA, partyPointPerTeam, `‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Party Challenge`);
  addPartyPoint(partyB, partyPointPerTeam, `‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Party Challenge`);

  // ‚úÖ ‡πÉ‡∏´‡πâ EXP ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Party Challenge
  function giveExpToPartyMembers(partyName, expAmount, note) {
    const dashSheet = ss.getSheetByName("Member Dashboard");
    const expLogSheet = ss.getSheetByName("EXP Log");
    const dashData = dashSheet.getDataRange().getValues();
    
    // ‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ
    const partyMembers = dashData.slice(1).filter(row => row[5] === partyName);
    
    partyMembers.forEach((member, index) => {
      const phone = normalizePhone(member[1]);
      const codename = member[2];
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï EXP ‡πÉ‡∏ô Member Dashboard
      const memberIndex = index + 2; // +2 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ index ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0 ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏° header
      const currentExp = Number(member[4]) || 0;
      dashSheet.getRange(memberIndex, 5).setValue(currentExp + expAmount);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å EXP Log
      expLogSheet.appendRow([phone, codename, new Date(), note, expAmount]);
      expLogSheet.getRange(expLogSheet.getLastRow(), 1).setNumberFormat("@");
    });
  }
  
  // ‡πÉ‡∏´‡πâ EXP ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ó‡∏µ‡∏°
  giveExpToPartyMembers(partyA, 1, `‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Party Challenge`);
  giveExpToPartyMembers(partyB, 1, `‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Party Challenge`);
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ranks ‡πÅ‡∏•‡∏∞ leaderboard
  updateRanks();
  updateLeaderboard();

  // ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô Party Point (‡∏ù‡∏±‡πà‡∏á‡πÅ‡∏û‡πâ‡∏•‡∏ö, ‡∏ù‡∏±‡πà‡∏á‡∏ä‡∏ô‡∏∞‡∏ö‡∏ß‡∏Å, ‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏¥‡∏î‡∏•‡∏ö)
  if (wagerPoint && wagerPoint > 0) {
    const partyData = partySheet.getDataRange().getValues();
    const loserIdx = partyData.findIndex(r => r[0] === loser);
    const winnerIdx = partyData.findIndex(r => r[0] === winner);
    let loserCurrent = loserIdx !== -1 ? Number(partyData[loserIdx][2]) : 0;
    let winnerCurrent = winnerIdx !== -1 ? Number(partyData[winnerIdx][2]) : 0;
    const canLose = Math.max(0, loserCurrent - wagerPoint);
    const actualLost = loserCurrent - canLose; // ‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏•‡∏ö‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    // ‡∏•‡∏ö‡∏ù‡∏±‡πà‡∏á‡πÅ‡∏û‡πâ
    partySheet.getRange(loserIdx + 1, 3).setValue(canLose);
    logSheet.appendRow([new Date(), loser, winner, `‡πÄ‡∏™‡∏µ‡∏¢ Party Point ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô`, -actualLost, `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏• Party Challenge (${admin})`]);
    // ‡∏ö‡∏ß‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏ä‡∏ô‡∏∞
    partySheet.getRange(winnerIdx + 1, 3).setValue(winnerCurrent + actualLost);
    logSheet.appendRow([new Date(), winner, winner, `‡πÑ‡∏î‡πâ Party Point ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô`, actualLost, `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏• Party Challenge (${admin})`]);
  }

  logAdminAction("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏• Party Challenge", `‡∏ú‡∏•: ${winner} ‡∏ä‡∏ô‡∏∞ ${loser} | EXP: +1 ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ó‡∏µ‡∏° | Party Point: +${partyPointPerTeam} | ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô: ${wagerPoint || 0}` , admin);
  ui.alert(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${winner} ‡∏ä‡∏ô‡∏∞\n+1 EXP ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ó‡∏µ‡∏°\n+${partyPointPerTeam} Party Point ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ó‡∏µ‡∏°${wagerPoint ? `\n‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô Party Point: ${wagerPoint}` : ""}`);
}

function getMemberDashboardData() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  if (!sheet) {
    return ContentService.createTextOutput(JSON.stringify({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Member Dashboard" }))
      .setMimeType(ContentService.MimeType.JSON);
  }
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const result = data.slice(1).map(row => {
    const obj = {};
    headers.forEach((h, i) => obj[h] = row[i]);
    return {
      nickname: obj["‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô"] || row[0],
      phone: obj["Phone"] || row[1],
      codename: obj["Codename"] || row[2],
      rank: obj["Rank"] || row[3],
      exp: obj["EXP"] || row[4],
      party: obj["Party"] || row[5]
    };
  });
  return ContentService.createTextOutput(JSON.stringify(result))
    .setMimeType(ContentService.MimeType.JSON);
}

function getGymStandingData() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Gym Standing");
  if (!sheet) {
    return ContentService.createTextOutput(JSON.stringify({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Gym Standing" }))
      .setMimeType(ContentService.MimeType.JSON);
  }
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const result = data.slice(1).map(row => {
    const obj = {};
    headers.forEach((h, i) => obj[h] = row[i]);
    return obj;
  });
  return ContentService.createTextOutput(JSON.stringify(result))
    .setMimeType(ContentService.MimeType.JSON);
}

// üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏∞‡∏ö‡∏ö Rank
function checkAndFixRanks() {
  const ui = SpreadsheetApp.getUi();
  
  // 1. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();
  if (!admin) {
    ui.alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ", ui.ButtonSet.OK);
    return;
  }

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  
  if (!dashSheet) {
    ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Member Dashboard", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó Member Dashboard", ui.ButtonSet.OK);
    return;
  }

  let issues = [];
  let fixes = [];
  let rankIssues = [];

  const dashData = dashSheet.getDataRange().getValues();
  
  for (let i = 1; i < dashData.length; i++) {
    const nickname = dashData[i][0];
    const codename = dashData[i][2];
    const currentRank = dashData[i][3];
    const exp = Number(dashData[i][4]) || 0;
    const rebirthCount = Number(dashData[i][6]) || 0;
    const multiplier = Number(dashData[i][7]) || 1;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Rank ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    let correctRank;
    if (rebirthCount > 0 || multiplier > 1) {
      correctRank = calculateCorrectRank(exp, rebirthCount, multiplier);
    } else {
      // ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏à‡∏∏‡∏ï‡∏¥
      correctRank = "Rookie";
      if (exp >= 200) correctRank = "Legend";
      else if (exp >= 120) correctRank = "Grandmaster";
      else if (exp >= 75) correctRank = "Diamond";
      else if (exp >= 50) correctRank = "Platinum";
      else if (exp >= 30) correctRank = "Gold";
      else if (exp >= 15) correctRank = "Silver";
      else if (exp >= 5) correctRank = "Bronze";
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Rank ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (currentRank !== correctRank) {
      rankIssues.push({
        nickname,
        codename,
        currentRank,
        correctRank,
        exp,
        rebirthCount,
        multiplier,
        row: i + 1
      });
      
      issues.push(`‚ö†Ô∏è ${nickname} (${codename}): Rank ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (${currentRank} vs ${correctRank})`);
      fixes.push(`üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Rank ‡∏Ç‡∏≠‡∏á ${nickname} ‡πÄ‡∏õ‡πá‡∏ô ${correctRank}`);
    }
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  let report = `üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Rank\n\n`;
  
  if (issues.length === 0) {
    report += `‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Rank\n`;
    report += `üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${dashData.length - 1} ‡∏Ñ‡∏ô\n`;
  } else {
    report += `üìä ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ${issues.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n\n`;
    issues.forEach((issue, index) => {
      report += `${index + 1}. ${issue}\n`;
    });
    
    report += `\nüîß ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n`;
    fixes.forEach((fix, index) => {
      report += `${index + 1}. ${fix}\n`;
    });
    
    report += `\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`;
    
    const response = ui.alert("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Rank", report, ui.ButtonSet.YES_NO);
    
    if (response === ui.Button.YES) {
      applyRankFixes(dashSheet, rankIssues);
    }
  }
  
  if (issues.length === 0) {
    ui.alert("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Rank", report, ui.ButtonSet.OK);
  }
}

// üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Rank ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
function applyRankFixes(dashSheet, rankIssues) {
  const ui = SpreadsheetApp.getUi();
  let fixedCount = 0;
  
  try {
    rankIssues.forEach(issue => {
      dashSheet.getRange(issue.row, 4).setValue(issue.correctRank);
      fixedCount++;
    });
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏ö‡∏ö
    updateLeaderboard();
    
    ui.alert("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏∞‡∏ö‡∏ö Rank ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Rank ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${fixedCount} ‡∏Ñ‡∏ô\n\n‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ Leaderboard ‡πÅ‡∏•‡πâ‡∏ß`, ui.ButtonSet.OK);
    
  } catch (error) {
    console.error("Error applying rank fixes:", error);
    ui.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ${error.toString()}`, ui.ButtonSet.OK);
  }
}

// üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô (member ‚Üí Member Dashboard)
function checkMissingMembers() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const formSheet = ss.getSheetByName("member");
  const dashSheet = ss.getSheetByName("Member Dashboard");
  
  if (!formSheet || !dashSheet) {
    return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó member ‡∏´‡∏£‡∏∑‡∏≠ Member Dashboard");
  }
  
  const formData = formSheet.getDataRange().getValues();
  const dashData = dashSheet.getDataRange().getValues();
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Member Dashboard
  const dashPhones = dashData.slice(1).map(row => normalizePhone(row[1]));
  const dashNicknames = dashData.slice(1).map(row => String(row[0]).toLowerCase().trim());
  const dashCodenames = dashData.slice(1).map(row => String(row[2]).toLowerCase().trim());
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô
  const missingMembers = [];
  
  for (let i = 1; i < formData.length; i++) {
    try {
      const formRow = formData[i];
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!formRow || formRow.length < 7) {
        console.warn(`‡πÅ‡∏ñ‡∏ß ${i + 1}: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô`);
        continue;
      }
      
      const formPhone = normalizePhone(formRow[3]); // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 4
      const formNickname = String(formRow[2] || "").toLowerCase().trim(); // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 3
      const formCodename = String(formRow[4] || "").toLowerCase().trim(); // Codename ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 5
      
      // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (!formPhone || formPhone.length !== 10) continue;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏î‡∏°‡∏µ‡πÉ‡∏ô Member Dashboard ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const hasPhone = dashPhones.includes(formPhone);
      const hasCodename = dashCodenames.includes(formCodename);
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ Codename = ‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô (‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ)
      if (!hasPhone && !hasCodename) {
        missingMembers.push({
          row: i + 1,
          fullName: formRow[1] || "",
          nickname: formRow[2] || "",
          phone: formPhone,
          codename: formRow[4] || "",
          memberType: formRow[5] || "",
          referrer: normalizePhone(formRow[6] || ""),
          timestamp: formRow[0] || "",
          matchStatus: {
            phone: hasPhone,
            codename: hasCodename
          }
        });
      }
    } catch (error) {
      console.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ñ‡∏ß ${i + 1}:`, error);
      continue;
    }
  }
  
  if (missingMembers.length === 0) {
    return ui.alert("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô");
  }
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô
  let message = `üîç ‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô ${missingMembers.length} ‡∏Ñ‡∏ô:\n\n`;
  missingMembers.forEach((member, index) => {
    message += `${index + 1}. ${member.nickname} (${member.codename})\n`;
    message += `   ‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${member.phone}\n`;
    message += `   ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${member.memberType}\n`;
    message += `   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£: ${member.timestamp}\n`;
    message += `   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà: ‡πÄ‡∏ö‡∏≠‡∏£‡πå(${member.matchStatus.phone ? '‚úÖ' : '‚ùå'}) Codename(${member.matchStatus.codename ? '‚úÖ' : '‚ùå'})\n\n`;
  });
  
  message += "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤ Member Dashboard ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?";
  
  const response = ui.alert("‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô", message, ui.ButtonSet.YES_NO);
  
  if (response === ui.Button.YES) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ missingMembers ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
    if (missingMembers && missingMembers.length > 0) {
      addMissingMembers(missingMembers);
    } else {
      ui.alert("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô", ui.ButtonSet.OK);
    }
  }
}

// ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ Member Dashboard
function addMissingMembers(missingMembers) {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const dbSheet = ss.getSheetByName("member");
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå missingMembers ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!missingMembers || !Array.isArray(missingMembers)) {
    return ui.alert("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ui.ButtonSet.OK);
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (missingMembers.length === 0) {
    return ui.alert("‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°", ui.ButtonSet.OK);
  }
  
  let successCount = 0;
  let errorCount = 0;
  let errorMessages = [];
  
  missingMembers.forEach(member => {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      const dashData = dashSheet.getDataRange().getValues();
      const dashPhones = dashData.slice(1).map(row => normalizePhone(row[1]));
      const dashCodenames = dashData.slice(1).map(row => String(row[2]).toLowerCase().trim());
      
      if (dashPhones.includes(member.phone)) {
        errorMessages.push(`${member.nickname}: ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥`);
        errorCount++;
        return;
      }
      
      if (dashCodenames.includes(member.codename.toLowerCase())) {
        errorMessages.push(`${member.nickname}: Codename ‡∏ã‡πâ‡∏≥`);
        errorCount++;
        return;
      }
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EXP ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      let initialExp = 0;
      if (member.memberType.includes("Premium")) {
        initialExp = 3;
        if (member.referrer && dashPhones.includes(member.referrer)) {
          initialExp += 1;
          addExpToPhone(member.referrer, 2);
          logExp(member.referrer, "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Premium (+2 EXP)", 2);
        }
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Member Dashboard
      const newRow = [member.nickname, member.phone, member.codename, "Rookie", initialExp, ""];
      const newRowIndex = dashSheet.getLastRow() + 1;
      dashSheet.getRange(newRowIndex, 1, 1, newRow.length).setValues([newRow]);
      dashSheet.getRange(newRowIndex, 2).setNumberFormat("@");
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å EXP Log
      logExp(member.phone, "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô)", initialExp);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Member Database (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (dbSheet) {
        const dbData = dbSheet.getDataRange().getValues();
        const dbRow = dbData.findIndex(row => normalizePhone(row[3]) === member.phone);
        if (dbRow !== -1) {
          dbSheet.getRange(dbRow + 1, 4).setNumberFormat("@");
        }
      }
      
      successCount++;
      
    } catch (error) {
      errorMessages.push(`${member.nickname}: ${error.message}`);
      errorCount++;
    }
  });
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏ö‡∏ö
  updateRanks();
  updateLeaderboard();
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  let resultMessage = `‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successCount} ‡∏Ñ‡∏ô\n`;
  if (errorCount > 0) {
    resultMessage += `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${errorCount} ‡∏Ñ‡∏ô\n\n`;
    resultMessage += "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n";
    errorMessages.forEach(msg => {
      resultMessage += `‚Ä¢ ${msg}\n`;
    });
  }
  
  ui.alert("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô", resultMessage);
}

// üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
function notifyMissingMembers() {
  try {
    Logger.log("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô - notifyMissingMembers");
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const formSheet = ss.getSheetByName("member");
    const dashSheet = ss.getSheetByName("Member Dashboard");
    
    if (!formSheet || !dashSheet) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó member ‡∏´‡∏£‡∏∑‡∏≠ Member Dashboard");
    }
  
  const formData = formSheet.getDataRange().getValues();
  const dashData = dashSheet.getDataRange().getValues();
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Member Dashboard
  const dashPhones = dashData.slice(1).map(row => normalizePhone(row[1]));
  const dashCodenames = dashData.slice(1).map(row => String(row[2]).toLowerCase().trim());
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô
  const missingMembers = [];
  
  for (let i = 1; i < formData.length; i++) {
    const formRow = formData[i];
    const formPhone = normalizePhone(formRow[3]);
    const formCodename = String(formRow[4]).toLowerCase().trim();
    
    if (formPhone && formPhone.length === 10) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏î‡∏°‡∏µ‡πÉ‡∏ô Member Dashboard ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const hasPhone = dashPhones.includes(formPhone);
      const hasCodename = dashCodenames.includes(formCodename);
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ Codename = ‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô (‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ)
      if (!hasPhone && !hasCodename) {
        missingMembers.push({
          fullName: formRow[1],
          nickname: formRow[2],
          phone: formPhone,
          codename: formRow[4],
          memberType: formRow[5],
          timestamp: formRow[0],
          matchStatus: {
            phone: hasPhone,
            codename: hasCodename
          }
        });
      }
    }
  }
  
  if (missingMembers.length > 0) {
    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    try {
      const adminEmail = Session.getActiveUser().getEmail();
      const subject = `‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô ${missingMembers.length} ‡∏Ñ‡∏ô`;
      
      let body = `
        <h2>üîç ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ú‡πà‡∏≤‡∏ô Google Form ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Member Dashboard</h2>
        
        <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô:</strong> ${missingMembers.length} ‡∏Ñ‡∏ô</p>
        
        <h3>üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô:</h3>
        <table border="1" style="border-collapse: collapse; width: 100%;">
          <tr style="background-color: #f0f0f0;">
            <th style="padding: 8px;">‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
            <th style="padding: 8px;">‡∏ä‡∏∑‡πà‡∏≠</th>
            <th style="padding: 8px;">Nickname</th>
            <th style="padding: 8px;">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</th>
            <th style="padding: 8px;">Codename</th>
            <th style="padding: 8px;">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
            <th style="padding: 8px;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</th>
          </tr>
      `;
      
      missingMembers.forEach((member, index) => {
        body += `
          <tr>
            <td style="padding: 8px;">${index + 1}</td>
            <td style="padding: 8px;">${member.fullName}</td>
            <td style="padding: 8px;">${member.nickname}</td>
            <td style="padding: 8px;">${member.phone}</td>
            <td style="padding: 8px;">${member.codename}</td>
            <td style="padding: 8px;">${member.memberType}</td>
            <td style="padding: 8px;">${member.timestamp}</td>
          </tr>
        `;
      });
      
      body += `
        </table>
        
        <h3>üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:</h3>
        <ol>
          <li>‡πÄ‡∏õ‡∏¥‡∏î Google Apps Script</li>
          <li>‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô <code>checkMissingMembers()</code></li>
          <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô</li>
          <li>‡∏Å‡∏î "‡πÉ‡∏ä‡πà" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ Member Dashboard</li>
        </ol>
        
        <p><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:</strong> ${new Date().toLocaleString('th-TH')}</p>
        
        <hr>
        <p style="color: #666; font-size: 12px;">
          ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô
        </p>
      `;
      
      MailApp.sendEmail({
        to: adminEmail,
        subject: subject,
        htmlBody: body
      });
      
      Logger.log(`‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô ${missingMembers.length} ‡∏Ñ‡∏ô`);
      
    } catch (error) {
      Logger.log("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ: " + error.message);
    }
  } else {
    Logger.log("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô");
  }
  
  Logger.log("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - notifyMissingMembers");
  
  } catch (error) {
    Logger.log("‚ùå notifyMissingMembers Error: " + error.toString());
    
    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    try {
      const adminEmail = Session.getActiveUser().getEmail();
      MailApp.sendEmail({
        to: adminEmail,
        subject: "‚ö†Ô∏è Missing Members Check Error - Up Level Guild",
        body: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô:\n\n${error.toString()}\n\n‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}`
      });
      Logger.log("‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
    } catch (emailError) {
      Logger.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ: " + emailError.toString());
    }
  }
}

// ‚è∞ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
function setupMissingMembersTrigger() {
  try {
    Logger.log("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger - setupMissingMembersTrigger");
    
    // ‡∏•‡∏ö trigger ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const triggers = ScriptApp.getProjectTriggers();
    let deletedCount = 0;
    
    triggers.forEach(trigger => {
      if (trigger.getHandlerFunction() === 'notifyMissingMembers') {
        ScriptApp.deleteTrigger(trigger);
        deletedCount++;
        Logger.log("üóëÔ∏è ‡∏•‡∏ö trigger ‡πÄ‡∏î‡∏¥‡∏°: " + trigger.getUniqueId());
      }
    });
    
    if (deletedCount > 0) {
      Logger.log(`üóëÔ∏è ‡∏•‡∏ö trigger ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${deletedCount} ‡∏ï‡∏±‡∏ß`);
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á trigger ‡πÉ‡∏´‡∏°‡πà - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 9:00 ‡∏ô.
    const newTrigger = ScriptApp.newTrigger('notifyMissingMembers')
      .timeBased()
      .everyDays(1)
      .atHour(9)
      .create();
    
    Logger.log("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + newTrigger.getUniqueId());
    Logger.log("‚è∞ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 9:00 ‡∏ô.)");
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const ui = SpreadsheetApp.getUi();
    ui.alert("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
      `‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n` +
      `- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 9:00 ‡∏ô.\n` +
      `- ‡∏•‡∏ö trigger ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${deletedCount} ‡∏ï‡∏±‡∏ß\n` +
      `- ‡∏™‡∏£‡πâ‡∏≤‡∏á trigger ‡πÉ‡∏´‡∏°‡πà: ${newTrigger.getUniqueId()}`, 
      ui.ButtonSet.OK);
    
  } catch (error) {
    Logger.log("‚ùå setupMissingMembersTrigger Error: " + error.toString());
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const ui = SpreadsheetApp.getUi();
    ui.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", 
      `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger ‡πÑ‡∏î‡πâ:\n\n${error.toString()}`, 
      ui.ButtonSet.OK);
    
    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    try {
      const adminEmail = Session.getActiveUser().getEmail();
      MailApp.sendEmail({
        to: adminEmail,
        subject: "‚ö†Ô∏è Trigger Setup Error - Up Level Guild",
        body: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger:\n\n${error.toString()}\n\n‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}`
      });
      Logger.log("‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
    } catch (emailError) {
      Logger.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ: " + emailError.toString());
    }
    
    throw error;
  }
}

// üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Triggers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function checkTriggerStatus() {
  try {
    Logger.log("üìä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Triggers");
    
    const triggers = ScriptApp.getProjectTriggers();
    const ui = SpreadsheetApp.getUi();
    
    if (triggers.length === 0) {
      ui.alert("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Triggers", "‡πÑ‡∏°‡πà‡∏û‡∏ö Trigger ‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ", ui.ButtonSet.OK);
      return;
    }
    
    let statusMessage = "üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Triggers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:\n\n";
    let activeCount = 0;
    let errorCount = 0;
    
    triggers.forEach((trigger, index) => {
      const functionName = trigger.getHandlerFunction();
      const eventType = trigger.getEventType();
      const uniqueId = trigger.getUniqueId();
      const isActive = uniqueId ? true : false;
      
      if (isActive) activeCount++;
      else errorCount++;
      
      statusMessage += `${index + 1}. Function: ${functionName}\n`;
      statusMessage += `   Type: ${eventType}\n`;
      statusMessage += `   Status: ${isActive ? '‚úÖ Active' : '‚ùå Inactive'}\n`;
      statusMessage += `   ID: ${uniqueId || 'N/A'}\n\n`;
    });
    
    statusMessage += `\nüìà ‡∏™‡∏£‡∏∏‡∏õ:\n`;
    statusMessage += `- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${triggers.length} ‡∏ï‡∏±‡∏ß\n`;
    statusMessage += `- ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥: ${activeCount} ‡∏ï‡∏±‡∏ß\n`;
    statusMessage += `- ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ${errorCount} ‡∏ï‡∏±‡∏ß\n`;
    
    if (errorCount > 0) {
      statusMessage += `\n‚ö†Ô∏è ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô setupMissingMembersTrigger() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç`;
    }
    
    ui.alert("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Triggers", statusMessage, ui.ButtonSet.OK);
    Logger.log("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Triggers ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô");
    
  } catch (error) {
    Logger.log("‚ùå checkTriggerStatus Error: " + error.toString());
    const ui = SpreadsheetApp.getUi();
    ui.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", 
      `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Trigger ‡πÑ‡∏î‡πâ:\n\n${error.toString()}`, 
      ui.ButtonSet.OK);
  }
}

// üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô onSheetSelection
function setupSheetSelectionTrigger() {
  try {
    Logger.log("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger - setupSheetSelectionTrigger");
    
    // ‡∏•‡∏ö trigger ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const triggers = ScriptApp.getProjectTriggers();
    let deletedCount = 0;
    
    triggers.forEach(trigger => {
      if (trigger.getHandlerFunction() === 'onSheetSelection') {
        ScriptApp.deleteTrigger(trigger);
        deletedCount++;
        Logger.log("üóëÔ∏è ‡∏•‡∏ö trigger ‡πÄ‡∏î‡∏¥‡∏°: " + trigger.getUniqueId());
      }
    });
    
    if (deletedCount > 0) {
      Logger.log(`üóëÔ∏è ‡∏•‡∏ö trigger ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${deletedCount} ‡∏ï‡∏±‡∏ß`);
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á trigger ‡πÉ‡∏´‡∏°‡πà
    const newTrigger = ScriptApp.newTrigger('onSheetSelection')
      .onSelection()
      .create();
    
    Logger.log("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + newTrigger.getUniqueId());
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const ui = SpreadsheetApp.getUi();
    ui.alert("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
      `‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö onSheetSelection ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n` +
      `- ‡∏•‡∏ö trigger ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${deletedCount} ‡∏ï‡∏±‡∏ß\n` +
      `- ‡∏™‡∏£‡πâ‡∏≤‡∏á trigger ‡πÉ‡∏´‡∏°‡πà: ${newTrigger.getUniqueId()}`, 
      ui.ButtonSet.OK);
    
  } catch (error) {
    Logger.log("‚ùå setupSheetSelectionTrigger Error: " + error.toString());
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const ui = SpreadsheetApp.getUi();
    ui.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", 
      `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger ‡πÑ‡∏î‡πâ:\n\n${error.toString()}`, 
      ui.ButtonSet.OK);
    
    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    try {
      const adminEmail = Session.getActiveUser().getEmail();
      MailApp.sendEmail({
        to: adminEmail,
        subject: "‚ö†Ô∏è Sheet Selection Trigger Setup Error - Up Level Guild",
        body: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger:\n\n${error.toString()}\n\n‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}`
      });
      Logger.log("‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
    } catch (emailError) {
      Logger.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ: " + emailError.toString());
    }
    
    throw error;
  }
}

// üèÜ Round Robin Tournament Functions
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏û‡∏ö‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î (‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î)

// üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á Round Robin Tournament
function createRoundRobinTournament() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const playersSheet = ss.getSheetByName("Players");
  const roundRobinSheet = ss.getSheetByName("Round Robin");
  
  if (!playersSheet || !roundRobinSheet) {
    return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Players ‡∏´‡∏£‡∏∑‡∏≠ Round Robin");
  }
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  const playersData = playersSheet.getDataRange().getValues();
  const headers = playersData[0];
  
  // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  const idCol = headers.indexOf("Player ID");
  const nameCol = headers.indexOf("Player Name");
  const rankCol = headers.indexOf("Rank");
  
  if (idCol === -1 || nameCol === -1) {
    return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Player ID ‡∏´‡∏£‡∏∑‡∏≠ Player Name ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Players");
  }
  
  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà active
  const activePlayers = playersData.slice(1).filter(row => {
    const playerName = String(row[nameCol]).trim();
    return playerName && playerName !== "" && playerName !== "BYE";
  });
  
  if (activePlayers.length < 2) {
    return ui.alert("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏ô");
  }
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö
  const playerCount = activePlayers.length;
  const totalRounds = playerCount - 1;
  const matchesPerRound = Math.floor(playerCount / 2);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Round Robin Schedule
  const schedule = generateRoundRobinSchedule(activePlayers, idCol, nameCol);
  
  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Round Robin
  roundRobinSheet.clearContents();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Headers
  const roundRobinHeaders = [
    "ROUND", "MATCH", "P1_ID", "PLAYER 1", "P1_RANK", 
    "WIN_P1", "DRAW", "WIN_P2", "Double Loss",
    "P2_ID", "PLAYER 2", "P2_RANK", "RESULT", "STATUS"
  ];
  
  roundRobinSheet.getRange(1, 1, 1, roundRobinHeaders.length).setValues([roundRobinHeaders]);
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó Headers
  const headerRange = roundRobinSheet.getRange(1, 1, 1, roundRobinHeaders.length);
  headerRange.setBackground("#4285f4");
  headerRange.setFontColor("white");
  headerRange.setFontWeight("bold");
  headerRange.setHorizontalAlignment("center");
  
  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
  let currentRow = 2;
  
  schedule.forEach((round, roundIndex) => {
    round.forEach((match, matchIndex) => {
      const rowData = [
        roundIndex + 1, // ROUND
        matchIndex + 1, // MATCH
        match.player1.id, // P1_ID
        match.player1.name, // PLAYER 1
        match.player1.rank || "", // P1_RANK
        false, // WIN_P1 (checkbox)
        false, // DRAW (checkbox)
        false, // WIN_P2 (checkbox)
        false, // Double Loss (checkbox)
        match.player2.id, // P2_ID
        match.player2.name, // PLAYER 2
        match.player2.rank || "", // P2_RANK
        "", // RESULT
        "" // STATUS
      ];
      
      roundRobinSheet.getRange(currentRow, 1, 1, rowData.length).setValues([rowData]);
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ checkboxes
      roundRobinSheet.getRange(currentRow, 6, 1, 4).insertCheckboxes();
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó
      const rowRange = roundRobinSheet.getRange(currentRow, 1, 1, rowData.length);
      rowRange.setBorder(true, true, true, true, true, true);
      
      // ‡∏™‡∏µ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß
      if (roundIndex % 2 === 0) {
        rowRange.setBackground("#f8f9fa");
      }
      
      currentRow++;
    });
  });
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
  roundRobinSheet.setColumnWidth(1, 60); // ROUND
  roundRobinSheet.setColumnWidth(2, 60); // MATCH
  roundRobinSheet.setColumnWidth(3, 80); // P1_ID
  roundRobinSheet.setColumnWidth(4, 120); // PLAYER 1
  roundRobinSheet.setColumnWidth(5, 80); // P1_RANK
  roundRobinSheet.setColumnWidth(6, 60); // WIN_P1
  roundRobinSheet.setColumnWidth(7, 60); // DRAW
  roundRobinSheet.setColumnWidth(8, 60); // WIN_P2
  roundRobinSheet.setColumnWidth(9, 80); // Double Loss
  roundRobinSheet.setColumnWidth(10, 80); // P2_ID
  roundRobinSheet.setColumnWidth(11, 120); // PLAYER 2
  roundRobinSheet.setColumnWidth(12, 80); // P2_RANK
  roundRobinSheet.setColumnWidth(13, 80); // RESULT
  roundRobinSheet.setColumnWidth(14, 80); // STATUS
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ
  const summary = `
üèÜ Round Robin Tournament ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ${playerCount} ‡∏Ñ‡∏ô
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö: ${totalRounds} ‡∏£‡∏≠‡∏ö
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö: ${matchesPerRound} ‡πÅ‡∏°‡∏ï‡∏ä‡πå
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalRounds * matchesPerRound} ‡πÅ‡∏°‡∏ï‡∏ä‡πå

üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡∏µ‡∏ó "Round Robin"
2. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ checkboxes
3. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
4. ‡∏î‡∏π‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏µ‡∏ó "Round Robin Standing"

üéØ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏ö‡∏ö Round Robin ‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î
  `;
  
  ui.alert("Round Robin Tournament", summary);
}

// üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô Round Robin
function generateRoundRobinSchedule(players, idCol, nameCol) {
  const playerCount = players.length;
  const schedule = [];
  
  // ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏µ‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° BYE
  let playerList = [...players];
  if (playerCount % 2 === 1) {
    playerList.push({
      [idCol]: "BYE",
      [nameCol]: "BYE",
      rank: ""
    });
  }
  
  const n = playerList.length;
  const rounds = n - 1;
  const halfSize = n / 2;
  
  for (let round = 0; round < rounds; round++) {
    const roundMatches = [];
    
    for (let i = 0; i < halfSize; i++) {
      const player1Index = i;
      const player2Index = n - 1 - i;
      
      // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô BYE
      if (playerList[player1Index][nameCol] === "BYE" || playerList[player2Index][nameCol] === "BYE") {
        continue;
      }
      
      roundMatches.push({
        player1: {
          id: playerList[player1Index][idCol],
          name: playerList[player1Index][nameCol],
          rank: playerList[player1Index].rank || ""
        },
        player2: {
          id: playerList[player2Index][idCol],
          name: playerList[player2Index][nameCol],
          rank: playerList[player2Index].rank || ""
        }
      });
    }
    
    schedule.push(roundMatches);
    
    // ‡∏´‡∏°‡∏∏‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ (Berger Table)
    const lastPlayer = playerList.pop();
    playerList.splice(1, 0, lastPlayer);
  }
  
  return schedule;
}

// üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô Round Robin
function updateRoundRobinResults() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const roundRobinSheet = ss.getSheetByName("Round Robin");
  
  if (!roundRobinSheet) {
    return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Round Robin");
  }
  
  const data = roundRobinSheet.getDataRange().getValues();
  const headers = data[0];
  
  // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  const winP1Col = headers.indexOf("WIN_P1");
  const drawCol = headers.indexOf("DRAW");
  const winP2Col = headers.indexOf("WIN_P2");
  const doubleLossCol = headers.indexOf("Double Loss");
  const resultCol = headers.indexOf("RESULT");
  const statusCol = headers.indexOf("STATUS");
  
  let updatedCount = 0;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const winP1 = row[winP1Col];
    const draw = row[drawCol];
    const winP2 = row[winP2Col];
    const doubleLoss = row[doubleLossCol];
    
    let result = "";
    let status = "";
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    if (winP1) {
      result = "1:0";
      status = "OK";
    } else if (winP2) {
      result = "0:1";
      status = "OK";
    } else if (draw) {
      result = "1:1";
      status = "OK";
    } else if (doubleLoss) {
      result = "0:0";
      status = "OK";
    } else {
      result = "";
      status = "";
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    roundRobinSheet.getRange(i + 1, resultCol + 1).setValue(result);
    roundRobinSheet.getRange(i + 1, statusCol + 1).setValue(status);
    
    if (result !== "") {
      updatedCount++;
    }
  }
  
  ui.alert(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:\n‚Ä¢ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•: ${updatedCount} ‡πÅ‡∏°‡∏ï‡∏ä‡πå\n‚Ä¢ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•: ${data.length - 1 - updatedCount} ‡πÅ‡∏°‡∏ï‡∏ä‡πå`);
}

// üèÜ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• Round Robin
function createRoundRobinStanding() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const roundRobinSheet = ss.getSheetByName("Round Robin");
  const standingSheet = ss.getSheetByName("Round Robin Standing");
  
  if (!roundRobinSheet || !standingSheet) {
    return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Round Robin ‡∏´‡∏£‡∏∑‡∏≠ Round Robin Standing");
  }
  
  const data = roundRobinSheet.getDataRange().getValues();
  const headers = data[0];
  
  // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  const p1IdCol = headers.indexOf("P1_ID");
  const p1NameCol = headers.indexOf("PLAYER 1");
  const p2IdCol = headers.indexOf("P2_ID");
  const p2NameCol = headers.indexOf("PLAYER 2");
  const resultCol = headers.indexOf("RESULT");
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  const playerStats = {};
  
  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const p1Id = row[p1IdCol];
    const p1Name = row[p1NameCol];
    const p2Id = row[p2IdCol];
    const p2Name = row[p2NameCol];
    const result = row[resultCol];
    
    // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•
    if (!result || result === "") continue;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á player stats ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!playerStats[p1Id]) {
      playerStats[p1Id] = {
        id: p1Id,
        name: p1Name,
        wins: 0,
        draws: 0,
        losses: 0,
        points: 0
      };
    }
    
    if (!playerStats[p2Id]) {
      playerStats[p2Id] = {
        id: p2Id,
        name: p2Name,
        wins: 0,
        draws: 0,
        losses: 0,
        points: 0
      };
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    if (result === "1:0") {
      playerStats[p1Id].wins++;
      playerStats[p1Id].points += 3;
      playerStats[p2Id].losses++;
    } else if (result === "0:1") {
      playerStats[p2Id].wins++;
      playerStats[p2Id].points += 3;
      playerStats[p1Id].losses++;
    } else if (result === "1:1") {
      playerStats[p1Id].draws++;
      playerStats[p1Id].points += 1;
      playerStats[p2Id].draws++;
      playerStats[p2Id].points += 1;
    } else if (result === "0:0") {
      // Double Loss - ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    }
  }
  
  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
  const standings = Object.values(playerStats).sort((a, b) => {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
    if (b.points !== a.points) return b.points - a.points;
    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏∞ (‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
    if (b.wins !== a.wins) return b.wins - a.wins;
    // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏ô‡∏∞‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
    return a.name.localeCompare(b.name);
  });
  
  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
  standingSheet.clearContents();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Headers
  const standingHeaders = [
    "RANK", "PLAYER ID", "PLAYER NAME", "WINS", "DRAWS", "LOSSES", "POINTS", "WIN RATE"
  ];
  
  standingSheet.getRange(1, 1, 1, standingHeaders.length).setValues([standingHeaders]);
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó Headers
  const headerRange = standingSheet.getRange(1, 1, 1, standingHeaders.length);
  headerRange.setBackground("#34a853");
  headerRange.setFontColor("white");
  headerRange.setFontWeight("bold");
  headerRange.setHorizontalAlignment("center");
  
  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  standings.forEach((player, index) => {
    const totalGames = player.wins + player.draws + player.losses;
    const winRate = totalGames > 0 ? ((player.wins / totalGames) * 100).toFixed(1) + "%" : "0%";
    
    const rowData = [
      index + 1, // RANK
      player.id, // PLAYER ID
      player.name, // PLAYER NAME
      player.wins, // WINS
      player.draws, // DRAWS
      player.losses, // LOSSES
      player.points, // POINTS
      winRate // WIN RATE
    ];
    
    const rowIndex = index + 2;
    standingSheet.getRange(rowIndex, 1, 1, rowData.length).setValues([rowData]);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó
    const rowRange = standingSheet.getRange(rowIndex, 1, 1, rowData.length);
    rowRange.setBorder(true, true, true, true, true, true);
    
    // ‡∏™‡∏µ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß
    if (index % 2 === 0) {
      rowRange.setBackground("#f8f9fa");
    }
    
    // ‡∏™‡∏µ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1-3
    if (index === 0) {
      rowRange.setBackground("#ffd700"); // ‡∏ó‡∏≠‡∏á
    } else if (index === 1) {
      rowRange.setBackground("#c0c0c0"); // ‡πÄ‡∏á‡∏¥‡∏ô
    } else if (index === 2) {
      rowRange.setBackground("#cd7f32"); // ‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á
    }
  });
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
  standingSheet.setColumnWidth(1, 60); // RANK
  standingSheet.setColumnWidth(2, 100); // PLAYER ID
  standingSheet.setColumnWidth(3, 150); // PLAYER NAME
  standingSheet.setColumnWidth(4, 80); // WINS
  standingSheet.setColumnWidth(5, 80); // DRAWS
  standingSheet.setColumnWidth(6, 80); // LOSSES
  standingSheet.setColumnWidth(7, 80); // POINTS
  standingSheet.setColumnWidth(8, 100); // WIN RATE
  
  ui.alert(`üèÜ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• Round Robin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:\n‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ${standings.length} ‡∏Ñ‡∏ô\n‚Ä¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: ${standings.filter(p => p.wins + p.draws + p.losses > 0).length} ‡∏Ñ‡∏ô`);
}

// üîÑ ‡∏£‡∏∞‡∏ö‡∏ö Rebirth (‡∏à‡∏∏‡∏ï‡∏¥) - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Dropdown
function performRebirth() {
  const ui = SpreadsheetApp.getUi();
  
  // 1. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  // 2. ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏∏‡∏ï‡∏¥‡πÑ‡∏î‡πâ
  const eligiblePlayers = getEligiblePlayersForRebirth();
  
  if (eligiblePlayers.length === 0) {
    ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏∏‡∏ï‡∏¥‡πÑ‡∏î‡πâ", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Legend ‡∏´‡∏£‡∏∑‡∏≠ Legend II+ ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", ui.ButtonSet.OK);
    return;
  }

  // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á dropdown ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠
  const playerOptions = eligiblePlayers.map(p => `${p.nickname} (${p.codename}) - ${p.rank} - EXP: ${p.exp}`);
  const playerChoice = ui.alert(
    "üîÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥", 
    `‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏∏‡∏ï‡∏¥‡πÑ‡∏î‡πâ ${eligiblePlayers.length} ‡∏Ñ‡∏ô:\n\n` + 
    eligiblePlayers.map((p, i) => `${i + 1}. ${p.nickname} (${p.codename})\n   üì± ${p.phone} | üèÜ ${p.rank} | üíé ${p.exp} EXP`).join('\n\n') +
    '\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô:', 
    ui.ButtonSet.OK_CANCEL
  );
  
  if (playerChoice !== ui.Button.OK) return;

  // 4. ‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const indexPrompt = ui.prompt(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô", 
    `‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 1-${eligiblePlayers.length}:`, 
    ui.ButtonSet.OK_CANCEL
  );
  if (indexPrompt.getSelectedButton() !== ui.Button.OK) return;
  
  const selectedIndex = parseInt(indexPrompt.getResponseText()) - 1;
  if (isNaN(selectedIndex) || selectedIndex < 0 || selectedIndex >= eligiblePlayers.length) {
    ui.alert("‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 1-" + eligiblePlayers.length, ui.ButtonSet.OK);
    return;
  }

  // 5. ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const selectedPlayer = eligiblePlayers[selectedIndex];
  const phone = selectedPlayer.phone;

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const rebirthSheet = ss.getSheetByName("Rebirth History");
  const rebirthLogSheet = ss.getSheetByName("Rebirth Log");
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡∏µ‡∏ó‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!dashSheet) {
    ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Member Dashboard", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó Member Dashboard", ui.ButtonSet.OK);
    return;
  }
  
  if (!rebirthSheet) {
    ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Rebirth History", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó Rebirth History", ui.ButtonSet.OK);
    return;
  }
  
  // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å selectedPlayer ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
  const nickname = selectedPlayer.nickname;
  const codename = selectedPlayer.codename;
  const currentRank = selectedPlayer.rank;
  const currentExp = selectedPlayer.exp;
  const party = selectedPlayer.party;
  const currentRebirthCount = selectedPlayer.rebirthCount;
  const requiredExp = selectedPlayer.requiredExp;

  // ‡∏´‡∏≤ memberIndex ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const dashData = dashSheet.getDataRange().getValues();
  const memberIndex = dashData.findIndex(row => normalizePhone(row[1]) === phone);
  
  if (memberIndex === -1) {
    logRebirthActivity("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô", `‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${phone}`, admin, "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    ui.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", ui.ButtonSet.OK);
    return;
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà
  const newRebirthCount = currentRebirthCount + 1;

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EXP multiplier ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Bug)
  const expMultiplier = Math.min(newRebirthCount + 1, 5); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î Multiplier ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Rank suffix
  const rankSuffix = getRebirthSuffix(newRebirthCount);
  const newRank = "Rookie" + rankSuffix;

  // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥
  const confirmMsg = `üîÑ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥ Rebirth\n\nüë§ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ${nickname} (${codename})\nüì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${phone}\nüèÜ Rank ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${currentRank}\nüíé EXP ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${currentExp}\nüîÑ ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏ï‡∏¥: ${newRebirthCount}\n\nüìà ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏ï‡∏¥:\n‚Ä¢ Rank ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: ${newRank}\n‚Ä¢ EXP ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: 0\n‚Ä¢ EXP multiplier: x${expMultiplier}\n\n‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà:\n‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞ Codename\n‚Ä¢ ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ\n‚Ä¢ ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏™‡∏∞‡∏™‡∏°\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`;
  
  const confirm = ui.alert("üîÑ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥", confirmMsg, ui.ButtonSet.YES_NO);
  if (confirm !== ui.Button.YES) {
    logRebirthActivity("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥", `${nickname} (${codename}) - ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å`, admin, "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å");
    return;
  }

  try {
    // 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Member Dashboard (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
    dashSheet.getRange(memberIndex + 1, 4).setValue(newRank); // Rank ‡πÉ‡∏´‡∏°‡πà
    dashSheet.getRange(memberIndex + 1, 5).setValue(0); // EXP ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 0
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Rebirth Count ‡πÅ‡∏•‡∏∞ EXP Multiplier ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
    const currentCols = dashSheet.getLastColumn();
    if (currentCols < 7) {
      dashSheet.getRange(1, 7).setValue("Rebirth Count");
    }
    if (currentCols < 8) {
      dashSheet.getRange(1, 8).setValue("EXP Multiplier");
    }
    
    dashSheet.getRange(memberIndex + 1, 7).setValue(newRebirthCount); // Rebirth Count
    dashSheet.getRange(memberIndex + 1, 8).setValue(expMultiplier); // EXP Multiplier

    // 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥
    const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");
    rebirthSheet.appendRow([
      now,
      phone,
      nickname,
      codename,
      currentRank,
      currentExp,
      newRebirthCount,
      expMultiplier,
      party,
      admin
    ]);

    // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log
    logRebirthActivity("üîÑ ‡∏à‡∏∏‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", `${nickname} (${codename}) - ${currentRank} ‚Üí ${newRank}, EXP: ${currentExp} ‚Üí 0, Multiplier: x${expMultiplier}`, admin, "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    // 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Leaderboard
    updateLeaderboard();

    // 5. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const successMsg = `‚úÖ ‡∏à‡∏∏‡∏ï‡∏¥ Rebirth ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüë§ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ${nickname} (${codename})\nüîÑ ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏ï‡∏¥: ${newRebirthCount}\nüèÜ Rank ‡πÉ‡∏´‡∏°‡πà: ${newRank}\nüìà EXP Multiplier: x${expMultiplier}\n\nüí° ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π "üéØ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank (‡∏û‡∏£‡πâ‡∏≠‡∏° Multiplier)" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank ‡∏ï‡∏≤‡∏° Multiplier`;
    
    ui.alert("üîÑ ‡∏à‡∏∏‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", successMsg, ui.ButtonSet.OK);

  } catch (error) {
    console.error("Error during rebirth:", error);
    logRebirthActivity("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", `${nickname} (${codename}) - ${error.toString()}`, admin, "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    ui.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥: ${error.toString()}`, ui.ButtonSet.OK);
  }
}

// üìä ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥
function showRebirthStats() {
  const ui = SpreadsheetApp.getUi();
  const rebirthSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Rebirth History");
  
  if (!rebirthSheet || rebirthSheet.getLastRow() <= 1) {
    ui.alert("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥", ui.ButtonSet.OK);
    return;
  }

  const data = rebirthSheet.getRange(2, 1, rebirthSheet.getLastRow() - 1, rebirthSheet.getLastColumn()).getValues();
  
  // ‡∏™‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  const totalRebirths = data.length;
  const uniquePlayers = new Set(data.map(row => row[1])).size; // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
  
  // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏ï‡∏¥‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  const playerRebirthCounts = {};
  data.forEach(row => {
    const phone = row[1];
    playerRebirthCounts[phone] = (playerRebirthCounts[phone] || 0) + 1;
  });
  
  const maxRebirthPlayer = Object.entries(playerRebirthCounts)
    .sort((a, b) => b[1] - a[1])[0];
  
  // ‡∏™‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const latestRebirths = data.slice(-5).reverse(); // 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  
  let statsMsg = `üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥ Rebirth\n\nüìà ‡∏™‡∏£‡∏∏‡∏õ:\n‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalRebirths} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏ï‡∏¥: ${uniquePlayers} ‡∏Ñ‡∏ô\n‚Ä¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏ï‡∏¥‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ${maxRebirthPlayer ? `${maxRebirthPlayer[0]} (${maxRebirthPlayer[1]} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)` : '‡πÑ‡∏°‡πà‡∏°‡∏µ'}\n\nüîÑ ‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):\n`;
  
  latestRebirths.forEach((row, index) => {
    const [date, phone, nickname, codename, oldRank, oldExp, rebirthCount, multiplier, party, admin] = row;
    statsMsg += `${index + 1}. ${nickname} (${codename}) - ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${rebirthCount} (${date})\n`;
  });
  
  ui.alert("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥", statsMsg, ui.ButtonSet.OK);
}

// üéØ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank ‡∏û‡∏£‡πâ‡∏≠‡∏° Multiplier ‡πÅ‡∏•‡∏∞ Suffix
function updateRanksWithMultiplier() {
  const ui = SpreadsheetApp.getUi();
  
  // 1. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = sheet.getDataRange().getValues();
  let updatedCount = 0;
  
  try {
    for (let i = 1; i < data.length; i++) {
      const rawExp = data[i][4];
      const exp = Number(rawExp) || 0;
      const rebirthCount = Number(data[i][6]) || 0; // Rebirth Count (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 7)
      const multiplier = Number(data[i][7]) || 1; // EXP Multiplier (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 8)
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EXP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° multiplier
      const requiredExp = calculateRequiredExp(multiplier);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Rank suffix
      const rankSuffix = getRebirthSuffix(rebirthCount);
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Rank ‡πÉ‡∏´‡∏°‡πà (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
      let newRank = calculateCorrectRank(exp, rebirthCount, multiplier);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
      const currentRank = data[i][3];
      if (currentRank !== newRank) {
        sheet.getRange(i + 1, 4).setValue(newRank);
        updatedCount++;
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log
        logRebirthActivity("üéØ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank", `${data[i][0]} (${data[i][2]}) - ${currentRank} ‚Üí ${newRank}, EXP: ${exp}, Multiplier: x${multiplier}`, admin, "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Leaderboard
    updateLeaderboard();
    
    ui.alert("üéØ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${updatedCount} ‡∏Ñ‡∏ô\n\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Rank ‡∏ï‡∏≤‡∏° EXP Multiplier ‡πÅ‡∏•‡πâ‡∏ß\n‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Leaderboard ‡πÅ‡∏•‡πâ‡∏ß`, ui.ButtonSet.OK);
    
  } catch (error) {
    console.error("Error updating ranks with multiplier:", error);
    logRebirthActivity("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank - ${error.toString()}`, admin, "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    ui.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank: ${error.toString()}`, ui.ButtonSet.OK);
  }
}

// üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Rebirth

// ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏ï‡∏¥
function getRebirthCount(phone) {
  const rebirthSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Rebirth History");
  if (!rebirthSheet || rebirthSheet.getLastRow() <= 1) return 0;
  
  const data = rebirthSheet.getDataRange().getValues();
  const playerRebirths = data.filter((row, index) => {
    if (index === 0) return false; // ‡∏Ç‡πâ‡∏≤‡∏° header
    return normalizePhone(row[1]) === phone;
  });
  
  return playerRebirths.length;
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Rank suffix ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏ï‡∏¥
function getRebirthSuffix(rebirthCount) {
  if (rebirthCount <= 0) return "";
  
  const suffixes = ["", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X"];
  if (rebirthCount <= 10) {
    return " " + suffixes[rebirthCount];
  } else {
    return " " + rebirthCount;
  }
}

// ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏µ Rebirth ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏ï‡∏¥
function getRebirthColor(rebirthCount) {
  const colorScale = {
    0: "#FFFFFF", // ‡∏Ç‡∏≤‡∏ß ‚Äî ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    1: "#FFE680", // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô ‚Äî ‡∏û‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°
    2: "#FFD24D", // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ó‡∏≠‡∏á ‚Äî ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    3: "#FFB84D", // ‡∏™‡πâ‡∏°‡∏ó‡∏≠‡∏á ‚Äî ‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á
    4: "#FF944D", // ‡∏™‡πâ‡∏°‡πÄ‡∏Ç‡πâ‡∏° ‚Äî ‡πÅ‡∏£‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î
    5: "#FF704D", // ‡∏™‡πâ‡∏°‡πÅ‡∏î‡∏á ‚Äî ‡∏£‡πâ‡∏≠‡∏ô‡πÅ‡∏£‡∏á
    6: "#FF4D4D", // ‡πÅ‡∏î‡∏á‡∏™‡∏î ‚Äî ‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏•‡∏±‡∏á
    7: "#CC0000", // ‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏° ‚Äî ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô
    8: "#800000", // ‡πÅ‡∏î‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏´‡∏°‡∏π ‚Äî ‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á
    9: "#330000"  // ‡πÅ‡∏î‡∏á‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏î‡∏≥ ‚Äî ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î
  };
  
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 9 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
  return colorScale[rebirthCount] || colorScale[9];
}

// ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏ï‡∏¥
function getRebirthColorDescription(rebirthCount) {
  const descriptions = {
    0: "‡∏Ç‡∏≤‡∏ß ‚Äî ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
    1: "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô ‚Äî ‡∏û‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°",
    2: "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ó‡∏≠‡∏á ‚Äî ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô",
    3: "‡∏™‡πâ‡∏°‡∏ó‡∏≠‡∏á ‚Äî ‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á",
    4: "‡∏™‡πâ‡∏°‡πÄ‡∏Ç‡πâ‡∏° ‚Äî ‡πÅ‡∏£‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î",
    5: "‡∏™‡πâ‡∏°‡πÅ‡∏î‡∏á ‚Äî ‡∏£‡πâ‡∏≠‡∏ô‡πÅ‡∏£‡∏á",
    6: "‡πÅ‡∏î‡∏á‡∏™‡∏î ‚Äî ‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏•‡∏±‡∏á",
    7: "‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏° ‚Äî ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô",
    8: "‡πÅ‡∏î‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏´‡∏°‡∏π ‚Äî ‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á",
    9: "‡πÅ‡∏î‡∏á‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏î‡∏≥ ‚Äî ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î"
  };
  
  return descriptions[rebirthCount] || descriptions[9];
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Rank ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏µ Rebirth
function formatRankWithColor(rank, rebirthCount) {
  const color = getRebirthColor(rebirthCount);
  const textColor = rebirthCount >= 7 ? "#FFFFFF" : "#000000"; // ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Ç‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°
  
  return `<span style="background-color: ${color}; color: ${textColor}; padding: 2px 6px; border-radius: 4px; font-weight: bold;">${rank}</span>`;
}

// ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Leaderboard ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Web App)
function getLeaderboardDataWithColors() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Leaderboard");
  if (!sheet) return [];
  
  const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
  
  return data.map(row => {
    const rebirthCount = Number(row[6]) || 0; // Rebirth Count
    const rank = row[3]; // Rank
    const color = getRebirthColor(rebirthCount);
    const colorDescription = getRebirthColorDescription(rebirthCount);
    
    return {
      nickname: row[0],
      phone: row[1],
      codename: row[2],
      rank: rank,
      exp: row[4],
      party: row[5],
      rebirthCount: rebirthCount,
      multiplier: row[7] || 1,
      color: color,
      colorDescription: colorDescription,
      formattedRank: formatRankWithColor(rank, rebirthCount)
    };
  });
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EXP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° multiplier
function calculateRequiredExp(multiplier) {
  const baseExp = {
    bronze: 5,
    silver: 15,
    gold: 30,
    platinum: 50,
    diamond: 75,
    grandmaster: 120,
    legend: 200
  };

  // ‡∏à‡∏≥‡∏Å‡∏±‡∏î multiplier ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 (‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö Rebirth)
  const cappedMultiplier = Math.min(multiplier, 5);

  // ‡πÉ‡∏ä‡πâ EXP ‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏à‡∏∏‡∏ï‡∏¥ (multiplier = 1)
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ EXP ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô (‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢ multiplier)
  return {
    bronze: baseExp.bronze * cappedMultiplier,
    silver: baseExp.silver * cappedMultiplier,
    gold: baseExp.gold * cappedMultiplier,
    platinum: baseExp.platinum * cappedMultiplier,
    diamond: baseExp.diamond * cappedMultiplier,
    grandmaster: baseExp.grandmaster * cappedMultiplier,
    legend: baseExp.legend * cappedMultiplier
  };
}

// üÜï ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Rank ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö Rebirth
function calculateCorrectRank(exp, rebirthCount, multiplier) {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Rank suffix ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏ï‡∏¥
  const rankSuffix = getRebirthSuffix(rebirthCount);
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Multiplier ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏ï‡∏¥
  let correctMultiplier = 1;
  if (rebirthCount >= 1) {
    correctMultiplier = Math.min(rebirthCount + 1, 5); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5
  }
  
  // ‡πÉ‡∏ä‡πâ Multiplier ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó
  const actualMultiplier = correctMultiplier;
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EXP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° multiplier ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  const requiredExp = calculateRequiredExp(actualMultiplier);
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Rank ‡∏ï‡∏≤‡∏° EXP ‡πÅ‡∏•‡∏∞ multiplier ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  let baseRank = "Rookie";
  if (exp >= requiredExp.legend) baseRank = "Legend";
  else if (exp >= requiredExp.grandmaster) baseRank = "Grandmaster";
  else if (exp >= requiredExp.diamond) baseRank = "Diamond";
  else if (exp >= requiredExp.platinum) baseRank = "Platinum";
  else if (exp >= requiredExp.gold) baseRank = "Gold";
  else if (exp >= requiredExp.silver) baseRank = "Silver";
  else if (exp >= requiredExp.bronze) baseRank = "Bronze";
  
  // ‡∏£‡∏ß‡∏° Rank ‡∏Å‡∏±‡∏ö suffix
  return baseRank + rankSuffix;
}

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥
function logRebirthActivity(action, details, adminEmail, result) {
  try {
    const rebirthLogSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Rebirth Log");
    if (!rebirthLogSheet) return;
    
    const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");
    rebirthLogSheet.appendRow([
      now,
      action,
      details,
      adminEmail,
      result
    ]);
  } catch (error) {
    console.error("Error logging rebirth activity:", error);
  }
}

// üß™ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Rebirth
function testRebirthSystem() {
  const ui = SpreadsheetApp.getUi();
  
  let testMsg = `üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Rebirth\n\nüìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:\n\n`;
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 1
  testMsg += `üîÑ ‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 1:\n`;
  testMsg += `‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô: Legend (EXP ‚â• 200)\n`;
  testMsg += `‚Ä¢ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏ï‡∏¥: Rookie II (EXP = 0, Multiplier = x2)\n`;
  testMsg += `‚Ä¢ EXP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ: Bronze II = 10, Silver II = 30, Gold II = 60, ‡∏Ø‡∏•‡∏Ø\n\n`;
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 2
  testMsg += `üîÑ ‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 2:\n`;
  testMsg += `‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô: Legend II (EXP ‚â• 400)\n`;
  testMsg += `‚Ä¢ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏ï‡∏¥: Rookie III (EXP = 0, Multiplier = x3)\n`;
  testMsg += `‚Ä¢ EXP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ: Bronze III = 15, Silver III = 45, Gold III = 90, ‡∏Ø‡∏•‡∏Ø\n\n`;
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 3
  testMsg += `üîÑ ‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏ï‡∏¥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 3:\n`;
  testMsg += `‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô: Legend III (EXP ‚â• 600)\n`;
  testMsg += `‚Ä¢ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏ï‡∏¥: Rookie IV (EXP = 0, Multiplier = x4)\n`;
  testMsg += `‚Ä¢ EXP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ: Bronze IV = 20, Silver IV = 60, Gold IV = 120, ‡∏Ø‡∏•‡∏Ø\n\n`;
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Leaderboard
  testMsg += `üèÜ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏ô Leaderboard (‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà):\n\n`;
  
  testMsg += `üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1: EXP ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô (60)\n`;
  testMsg += `‚Ä¢ Player A: Gold (EXP 60, Multiplier x1) ‚Üí ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ 60\n`;
  testMsg += `‚Ä¢ Player B: Silver II (EXP 60, Multiplier x2) ‚Üí ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ 30\n`;
  testMsg += `‚Ä¢ Player C: Bronze III (EXP 60, Multiplier x3) ‚Üí ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ 20\n`;
  testMsg += `‚Üí ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á: A > B > C (‡∏ï‡∏≤‡∏° EXP ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤)\n\n`;
  
  testMsg += `üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2: EXP ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô\n`;
  testMsg += `‚Ä¢ Player X: Gold (EXP 60, Multiplier x1) ‚Üí ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ 60\n`;
  testMsg += `‚Ä¢ Player Y: Silver II (EXP 120, Multiplier x2) ‚Üí ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ 60\n`;
  testMsg += `‚Üí ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á: X > Y (Multiplier ‡∏ô‡πâ‡∏≠‡∏¢ = ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤)\n\n`;
  
  testMsg += `üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 3: ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô\n`;
  testMsg += `‚Ä¢ Player P: Gold (EXP 60, Multiplier x1) ‚Üí ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ 60\n`;
  testMsg += `‚Ä¢ Player Q: Gold (EXP 60, Multiplier x1) ‚Üí ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ 60\n`;
  testMsg += `‚Üí ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á: ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ (A-Z)\n\n`;
  
  testMsg += `üí° ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö:\n`;
  testMsg += `1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° EXP ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ (EXP √∑ Multiplier) - ‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢\n`;
  testMsg += `2. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° Multiplier (‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å)\n`;
  testMsg += `3. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ (A-Z)\n\n`;
  
  testMsg += `üîß ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏ó‡∏≥:\n`;
  testMsg += `‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Rank ‡πÅ‡∏ö‡∏ö flexible (Legend ‡∏´‡∏£‡∏∑‡∏≠ Legend II+)\n`;
  testMsg += `‚Ä¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î Multiplier ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5\n`;
  testMsg += `‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏µ‡∏ó‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô\n`;
  testMsg += `‚Ä¢ ‡∏õ‡∏£‡∏±‡∏ö EXP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏ï‡∏¥\n`;
  
  ui.alert("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Rebirth", testMsg, ui.ButtonSet.OK);
}

// üé® ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó member ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏á‡πà‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÇ‡∏û‡∏™‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Current Rank" ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
function highlightCurrentRanks() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const memberSheet = ss.getSheetByName("member");
  
  if (!memberSheet) {
    ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó 'member'", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏µ‡∏ó‡∏ä‡∏∑‡πà‡∏≠ 'member' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á", ui.ButtonSet.OK);
    return;
  }

  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  try {
    // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó member
    const data = memberSheet.getDataRange().getValues();
    if (data.length <= 1) {
      ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó member", "‡∏ä‡∏µ‡∏ó‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÅ‡∏ñ‡∏ß", ui.ButtonSet.OK);
      return;
    }

    // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Current Rank" (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C)
    const currentRankCol = 2; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C = index 2
    const codenameCol = 1;    // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B = index 1
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏£‡∏á‡∏Ñ‡πå
    const rankColors = {
      "Bronze": "#CD7F32",      // ‡∏™‡∏µ‡∏ö‡∏£‡∏≠‡∏ô‡∏ã‡πå
      "Silver": "#C0C0C0",     // ‡∏™‡∏µ‡πÄ‡∏á‡∏¥‡∏ô
      "Gold": "#FFD700",       // ‡∏™‡∏µ‡∏ó‡∏≠‡∏á
      "Platinum": "#E5E4E2",   // ‡∏™‡∏µ‡πÅ‡∏û‡∏•‡∏ó‡∏¥‡∏ô‡∏±‡∏°
      "Diamond": "#B9F2FF",    // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡πÄ‡∏û‡∏ä‡∏£
      "Grandmaster": "#FF6B6B", // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÅ‡∏Å‡∏£‡∏ô‡∏î‡πå‡∏°‡∏≤‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
      "Legend": "#9B59B6",     // ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏•‡πÄ‡∏à‡∏ô‡∏î‡πå
      "REBIRTH": "#FF1493",    // ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π‡∏£‡∏µ‡πÄ‡∏ö‡∏¥‡∏£‡πå‡∏ò
      "Bronze II": "#8B4513",  // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Ç‡πâ‡∏°
      "Silver II": "#708090",  // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°
      "Gold II": "#DAA520",    // ‡∏™‡∏µ‡∏ó‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏°
      "Platinum II": "#B8860B", // ‡∏™‡∏µ‡∏ó‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤
      "Diamond II": "#4682B4", // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏ï‡∏µ‡∏•
      "Grandmaster II": "#DC143C", // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏°
      "Legend II": "#4B0082"   // ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡πâ‡∏°
    };

    // ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    memberSheet.getRange(2, 1, data.length - 1, memberSheet.getLastColumn()).setBackground(null);

    let highlightedCount = 0;
    let rankStats = {};

    // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2)
    for (let i = 1; i < data.length; i++) {
      const currentRank = String(data[i][currentRankCol] || "").trim();
      const codename = String(data[i][codenameCol] || "").trim();
      
      if (currentRank && codename) {
        // ‡∏´‡∏≤‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ô‡∏µ‡πâ
        let color = "#FFFFFF"; // ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        
        // ‡∏´‡∏≤‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏Ñ‡πå
        for (const [rankName, rankColor] of Object.entries(rankColors)) {
          if (currentRank.toLowerCase().includes(rankName.toLowerCase())) {
            color = rankColor;
            break;
          }
        }

        // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÅ‡∏ñ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
        memberSheet.getRange(i + 1, 1, 1, memberSheet.getLastColumn()).setBackground(color);
        
        // ‡∏ô‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        if (!rankStats[currentRank]) {
          rankStats[currentRank] = 0;
        }
        rankStats[currentRank]++;
        highlightedCount++;
      }
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    let message = `‚úÖ ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!\n\n`;
    message += `üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:\n`;
    message += `- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå: ${highlightedCount} ‡∏Ñ‡∏ô\n`;
    message += `- ‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö:\n`;
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const rankOrder = [
      "REBIRTH", "Legend II", "Grandmaster II", "Diamond II", "Platinum II", "Gold II", "Silver II", "Bronze II",
      "Legend", "Grandmaster", "Diamond", "Platinum", "Gold", "Silver", "Bronze"
    ];
    
    for (const rank of rankOrder) {
      if (rankStats[rank]) {
        message += `  ‚Ä¢ ${rank}: ${rankStats[rank]} ‡∏Ñ‡∏ô\n`;
      }
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
    for (const [rank, count] of Object.entries(rankStats)) {
      if (!rankOrder.includes(rank)) {
        message += `  ‚Ä¢ ${rank}: ${count} ‡∏Ñ‡∏ô\n`;
      }
    }

    message += `\nüí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:\n`;
    message += `- ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô\n`;
    message += `- ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏á‡πà‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÇ‡∏û‡∏™‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á\n`;
    message += `- ‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏µ`;

    ui.alert("üé® ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", message, ui.ButtonSet.OK);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
    logAdminAction("‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", `‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå ${highlightedCount} ‡∏Ñ‡∏ô ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó member`, admin);

  } catch (error) {
    ui.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡πÑ‡∏î‡πâ: ${error.message}`, ui.ButtonSet.OK);
    console.error("highlightCurrentRanks Error: " + error.toString());
  }
}

/**
 * üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Å‡∏≤‡∏£‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà)
 */
function refreshRankHighlighting() {
  const ui = SpreadsheetApp.getUi();
  
  const confirm = ui.alert("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Å‡∏≤‡∏£‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå", 
    "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Å‡∏≤‡∏£‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà", 
    ui.ButtonSet.YES_NO);
  
  if (confirm === ui.Button.YES) {
    highlightCurrentRanks();
  }
}

/**
 * üìä ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó member
 */
function showCurrentRankStats() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const memberSheet = ss.getSheetByName("member");
  
  if (!memberSheet) {
    ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó 'member'", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏µ‡∏ó‡∏ä‡∏∑‡πà‡∏≠ 'member' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á", ui.ButtonSet.OK);
    return;
  }

  try {
    const data = memberSheet.getDataRange().getValues();
    if (data.length <= 1) {
      ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó member", "‡∏ä‡∏µ‡∏ó‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÅ‡∏ñ‡∏ß", ui.ButtonSet.OK);
      return;
    }

    const currentRankCol = 2; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C = index 2
    const codenameCol = 1;    // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B = index 1
    
    // ‡∏ô‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    const rankStats = {};
    let totalMembers = 0;
    
    for (let i = 1; i < data.length; i++) {
      const currentRank = String(data[i][currentRankCol] || "").trim();
      const codename = String(data[i][codenameCol] || "").trim();
      
      if (currentRank && codename) {
        if (!rankStats[currentRank]) {
          rankStats[currentRank] = 0;
        }
        rankStats[currentRank]++;
        totalMembers++;
      }
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const rankOrder = [
      "REBIRTH", "Legend II", "Grandmaster II", "Diamond II", "Platinum II", "Gold II", "Silver II", "Bronze II",
      "Legend", "Grandmaster", "Diamond", "Platinum", "Gold", "Silver", "Bronze"
    ];

    let message = `üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó member\n\n`;
    message += `üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalMembers} ‡∏Ñ‡∏ô\n\n`;
    message += `üèÜ ‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:\n`;
    
    // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
    for (const rank of rankOrder) {
      if (rankStats[rank]) {
        const percentage = ((rankStats[rank] / totalMembers) * 100).toFixed(1);
        message += `  ‚Ä¢ ${rank}: ${rankStats[rank]} ‡∏Ñ‡∏ô (${percentage}%)\n`;
      }
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
    const otherRanks = Object.keys(rankStats).filter(rank => !rankOrder.includes(rank));
    if (otherRanks.length > 0) {
      message += `\nüîç ‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ:\n`;
      for (const rank of otherRanks) {
        const percentage = ((rankStats[rank] / totalMembers) * 100).toFixed(1);
        message += `  ‚Ä¢ ${rank}: ${rankStats[rank]} ‡∏Ñ‡∏ô (${percentage}%)\n`;
      }
    }

    message += `\nüí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:\n`;
    message += `- ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô '‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏™‡∏µ\n`;
    message += `- ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô '‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Å‡∏≤‡∏£‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ`;

    ui.alert("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", message, ui.ButtonSet.OK);

  } catch (error) {
    ui.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ: ${error.message}`, ui.ButtonSet.OK);
    console.error("showCurrentRankStats Error: " + error.toString());
  }
}

/**
 * üìù ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏µ‡∏ó "‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up" ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó "‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up" ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */
function updatePostRankUpSheet() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const postRankUpSheet = ss.getSheetByName("‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up");
  
  if (!postRankUpSheet) {
    ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó '‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up'", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏µ‡∏ó‡∏ä‡∏∑‡πà‡∏≠ '‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á", ui.ButtonSet.OK);
    return;
  }

  try {
    // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó "‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up"
    const data = postRankUpSheet.getDataRange().getValues();
    if (data.length <= 1) {
      ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó '‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up'", "‡∏ä‡∏µ‡∏ó‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÅ‡∏ñ‡∏ß", ui.ButtonSet.OK);
      return;
    }

    // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const headers = data[0];
    const codenameCol = headers.findIndex(h => String(h).toLowerCase().includes("code") || String(h).toLowerCase().includes("codename"));
    const rankCol = headers.findIndex(h => String(h).toLowerCase().includes("rank") || String(h).toLowerCase().includes("‡πÅ‡∏£‡∏á‡∏Ñ‡πå"));
    
    if (codenameCol === -1 || rankCol === -1) {
      ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô", 
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏µ‡∏ó '‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up' ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:\n" +
        "- Code name/Codename\n" +
        "- Rank/‡πÅ‡∏£‡∏á‡∏Ñ‡πå", ui.ButtonSet.OK);
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    let validData = 0;
    let invalidData = 0;
    let issues = [];

    for (let i = 1; i < data.length; i++) {
      const codename = String(data[i][codenameCol] || "").trim();
      const rank = String(data[i][rankCol] || "").trim();
      
      if (codename && rank) {
        validData++;
      } else {
        invalidData++;
        if (!codename) issues.push(`‡πÅ‡∏ñ‡∏ß ${i + 1}: ‡πÑ‡∏°‡πà‡∏°‡∏µ Code name`);
        if (!rank) issues.push(`‡πÅ‡∏ñ‡∏ß ${i + 1}: ‡πÑ‡∏°‡πà‡∏°‡∏µ Rank`);
      }
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    let message = `üìù ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏µ‡∏ó "‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!\n\n`;
    message += `üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n`;
    message += `- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${validData} ‡∏Ñ‡∏ô\n`;
    message += `- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö: ${invalidData} ‡∏Ñ‡∏ô\n`;
    message += `- ‡∏£‡∏ß‡∏°: ${validData + invalidData} ‡∏Ñ‡∏ô\n\n`;
    
    if (invalidData > 0) {
      message += `‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:\n`;
      issues.forEach(issue => {
        message += `‚Ä¢ ${issue}\n`;
      });
      message += `\nüí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô`;
    } else {
      message += `‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n`;
      message += `- ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏°‡∏µ Code name ‡πÅ‡∏•‡∏∞ Rank ‡πÅ‡∏•‡πâ‡∏ß\n`;
      message += `- ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô '‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÇ‡∏û‡∏™‡∏ï‡πå' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏™‡∏µ`;
    }

    ui.alert("üìù ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏µ‡∏ó‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up", message, ui.ButtonSet.OK);

  } catch (error) {
    ui.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏µ‡∏ó‡πÑ‡∏î‡πâ: ${error.message}`, ui.ButtonSet.OK);
    console.error("updatePostRankUpSheet Error: " + error.toString());
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô

/**
 * üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏µ‡∏ó "‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up"
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏µ‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏µ‡∏ó
 */
function onSheetSelection(e) {
  try {
    const sheetName = e.source.getActiveSheet().getName();
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏µ‡∏ó "‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up" ‡πÉ‡∏´‡πâ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    if (sheetName === "‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up") {
      // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡∏ó‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
      Utilities.sleep(500);
      
      // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÇ‡∏û‡∏™‡∏ï‡πå
      highlightMembersNeedingPosts();
      
      console.log("‚úÖ ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó '‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up' ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
    }
    
  } catch (error) {
    console.error("onSheetSelection Error: " + error.toString());
  }
}

/**
 * üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô onSheetSelection
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏µ‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏µ‡∏ó
 */
function setupSheetSelectionTrigger() {
  try {
    // ‡∏•‡∏ö trigger ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const triggers = ScriptApp.getProjectTriggers();
    triggers.forEach(trigger => {
      if (trigger.getHandlerFunction() === 'onSheetSelection') {
        ScriptApp.deleteTrigger(trigger);
      }
    });
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á trigger ‡πÉ‡∏´‡∏°‡πà
    ScriptApp.newTrigger('onSheetSelection')
      .onSelection()
      .create();
    
    console.log("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö onSheetSelection ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
    
  } catch (error) {
    console.error("setupSheetSelectionTrigger Error: " + error.toString());
  }
}

/**
 * üö® ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∂‡∏á‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡πâ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó "‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up"
 */
function highlightMembersNeedingPosts() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const postRankUpSheet = ss.getSheetByName("‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up");
  
  if (!postRankUpSheet) {
    ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó '‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up'", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏µ‡∏ó‡∏ä‡∏∑‡πà‡∏≠ '‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á", ui.ButtonSet.OK);
    return;
  }

  try {
    // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó "‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up"
    const data = postRankUpSheet.getDataRange().getValues();
    if (data.length <= 1) {
      ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó '‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up'", "‡∏ä‡∏µ‡∏ó‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÅ‡∏ñ‡∏ß", ui.ButtonSet.OK);
      return;
    }

    // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const headers = data[0];
    const codenameCol = headers.findIndex(h => String(h).toLowerCase().includes("code") || String(h).toLowerCase().includes("codename"));
    const rankCol = headers.findIndex(h => String(h).toLowerCase().includes("rank") || String(h).toLowerCase().includes("‡πÅ‡∏£‡∏á‡∏Ñ‡πå"));
    
    if (codenameCol === -1 || rankCol === -1) {
      ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô", 
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏µ‡∏ó '‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up' ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:\n" +
        "- Code name/Codename\n" +
        "- Rank/‡πÅ‡∏£‡∏á‡∏Ñ‡πå", ui.ButtonSet.OK);
      return;
    }

    // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ checkbox)
    const rankColumns = [];
    for (let col = 0; col < headers.length; col++) {
      const header = String(headers[col] || "").trim();
      if (header && 
          !String(header).toLowerCase().includes("code") && 
          !String(header).toLowerCase().includes("codename") && 
          !String(header).toLowerCase().includes("rank") && 
          !String(header).toLowerCase().includes("‡πÅ‡∏£‡∏á‡∏Ñ‡πå")) {
        rankColumns.push({
          col: col,
          name: header
        });
      }
    }

    if (rankColumns.length === 0) {
      ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏á‡∏Ñ‡πå", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏µ‡∏ó‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ", ui.ButtonSet.OK);
      return;
    }

    // ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    postRankUpSheet.getRange(2, 1, data.length - 1, postRankUpSheet.getLastColumn()).setBackground(null);

    let highlightedCount = 0;
    let rankStats = {};

    // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2)
    for (let i = 1; i < data.length; i++) {
      const codename = String(data[i][codenameCol] || "").trim();
      const currentRank = String(data[i][rankCol] || "").trim();
      
      if (codename && currentRank) {
        let needsHighlight = false;
        let highlightReason = "";

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏£‡∏á‡∏Ñ‡πå
        for (const rankCol of rankColumns) {
          const rankName = rankCol.name;
          const hasCheckmark = data[i][rankCol.col] === true; // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          
          // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏∂‡∏á‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å
          if (currentRank === rankName && !hasCheckmark) {
            needsHighlight = true;
            highlightReason = `‡∏ñ‡∏∂‡∏á ${rankName} ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å`;
            break;
          }
          
          // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤
          if (isHigherRank(currentRank, rankName) && !hasCheckmark) {
            needsHighlight = true;
            highlightReason = `‡∏ñ‡∏∂‡∏á ${currentRank} ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å‡πÉ‡∏ô ${rankName}`;
            break;
          }
        }

        // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        if (needsHighlight) {
          // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠ (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Code name) ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡πÅ‡∏î‡∏á
          postRankUpSheet.getRange(i + 1, codenameCol + 1).setBackground("#FF6B6B");
          
          // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Current Rank) ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡πÅ‡∏î‡∏á
          postRankUpSheet.getRange(i + 1, rankCol + 1).setBackground("#FF6B6B");
          
          // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞ cell ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡πä‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡∏™‡πâ‡∏°
          for (const rankCol of rankColumns) {
            const rankName = rankCol.name;
            const hasCheckmark = data[i][rankCol.col] === true;
            
            // ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å
            if (currentRank === rankName && !hasCheckmark) {
              postRankUpSheet.getRange(i + 1, rankCol.col + 1).setBackground("#FFA500");
              break;
            }
            
            // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤
            if (isHigherRank(currentRank, rankName) && !hasCheckmark) {
              postRankUpSheet.getRange(i + 1, rankCol.col + 1).setBackground("#FFA500");
              break;
            }
          }
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå N)
          const lastCol = postRankUpSheet.getLastColumn();
          postRankUpSheet.getRange(i + 1, lastCol).setValue(`üö® ${highlightReason}`);
          
          highlightedCount++;
          
          // ‡∏ô‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
          if (!rankStats[currentRank]) {
            rankStats[currentRank] = 0;
          }
          rankStats[currentRank]++;
        }
      }
    }

    // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÜ
    console.log(`‚úÖ ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß: ${highlightedCount} ‡∏Ñ‡∏ô`);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏" ‡∏´‡∏£‡∏∑‡∏≠ "Note"
    const lastCol = postRankUpSheet.getLastColumn();
    if (lastCol > 0) {
      postRankUpSheet.getRange(1, lastCol).setValue("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏");
    }

  } catch (error) {
    ui.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÑ‡∏î‡πâ: ${error.message}`, ui.ButtonSet.OK);
    console.error("highlightMembersNeedingPosts Error: " + error.toString());
  }
}

/**
 * üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó "‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up"
 */
function resetMemberHighlighting() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const postRankUpSheet = ss.getSheetByName("‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up");
  
  if (!postRankUpSheet) {
    ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó '‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up'", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏µ‡∏ó‡∏ä‡∏∑‡πà‡∏≠ '‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á", ui.ButtonSet.OK);
    return;
  }

  try {
    const data = postRankUpSheet.getDataRange().getValues();
    if (data.length <= 1) {
      ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó '‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up'", "‡∏ä‡∏µ‡∏ó‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÅ‡∏ñ‡∏ß", ui.ButtonSet.OK);
      return;
    }

    // ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå (‡πÑ‡∏°‡πà‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ñ‡∏ö)
    const headers = data[0];
    const codenameCol = headers.findIndex(h => String(h).toLowerCase().includes("code") || String(h).toLowerCase().includes("codename"));
    const rankCol = headers.findIndex(h => String(h).toLowerCase().includes("rank") || String(h).toLowerCase().includes("‡πÅ‡∏£‡∏á‡∏Ñ‡πå"));
    
    if (codenameCol !== -1) {
      // ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏µ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Code name
      postRankUpSheet.getRange(2, codenameCol + 1, data.length - 1).setBackground(null);
    }
    
    if (rankCol !== -1) {
      // ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏µ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Current Rank
      postRankUpSheet.getRange(2, rankCol + 1, data.length - 1).setBackground(null);
    }
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏µ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ (checkbox)
    for (let col = 0; col < headers.length; col++) {
      const header = String(headers[col] || "").trim();
      if (header && 
          !String(header).toLowerCase().includes("code") && 
          !String(header).toLowerCase().includes("codename") && 
          !String(header).toLowerCase().includes("rank") && 
          !String(header).toLowerCase().includes("‡πÅ‡∏£‡∏á‡∏Ñ‡πå") &&
          !String(header).toLowerCase().includes("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏")) {
        postRankUpSheet.getRange(2, col + 1, data.length - 1).setBackground(null);
      }
    }
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    const lastCol = postRankUpSheet.getLastColumn();
    postRankUpSheet.getRange(2, lastCol, data.length - 1).clearContent();

    ui.alert("‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß", ui.ButtonSet.OK);

  } catch (error) {
    ui.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏î‡πâ: ${error.message}`, ui.ButtonSet.OK);
    console.error("resetMemberHighlighting Error: " + error.toString());
  }
}

/**
 * üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏Ñ‡πå A ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏Ñ‡πå B ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
function isHigherRank(rankA, rankB) {
  const rankOrder = [
    "Bronze", "Silver", "Gold", "Platinum", "Diamond", "Grandmaster", "Legend", "REBIRTH",
    "Bronze II", "Silver II", "Gold II", "Platinum II", "Diamond II", "Grandmaster II", "Legend II"
  ];
  
  const indexA = rankOrder.indexOf(rankA);
  const indexB = rankOrder.indexOf(rankB);
  
  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤
  if (indexA === -1) return false;
  if (indexB === -1) return false;
  
  return indexA > indexB;
}

/**
 * üîÑ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó‡πÉ‡∏î‡πÜ
 */
function onEdit(e) {
  try {
    const sheet = e.source.getActiveSheet();
    const sheetName = sheet.getName();
    
    // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó "‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up" ‡πÉ‡∏´‡πâ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà
    if (sheetName === "‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up") {
      // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      Utilities.sleep(300);
      
      // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
      highlightMembersNeedingPosts();
      
      console.log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó '‡πÇ‡∏û‡∏™‡∏ï‡πå Rank Up' ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
    
  } catch (error) {
    console.error("onEdit Error: " + error.toString());
  }
}

// üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Rebirth ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
function applyRebirthSystemFixes(dashSheet, rebirthSheet, dashData, rebirthData) {
  const ui = SpreadsheetApp.getUi();
  let fixedCount = 0;
  
  try {
    // 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const currentCols = dashSheet.getLastColumn();
    if (currentCols < 7) {
      dashSheet.getRange(1, 7).setValue("Rebirth Count");
      fixedCount++;
    }
    if (currentCols < 8) {
      dashSheet.getRange(1, 8).setValue("EXP Multiplier");
      fixedCount++;
    }
    
    // 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
    for (let i = 1; i < dashData.length; i++) {
      const phone = normalizePhone(dashData[i][1]);
      const rebirthCount = Number(dashData[i][6]) || 0;
      const multiplier = Number(dashData[i][7]) || 1;
      const currentRank = dashData[i][3];
      const exp = Number(dashData[i][4]) || 0;
      
      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Rebirth Count
      if (rebirthSheet) {
        const actualRebirths = rebirthData.filter((row, index) => {
          if (index === 0) return false;
          return normalizePhone(row[1]) === phone;
        }).length;
        
        if (rebirthCount !== actualRebirths) {
          dashSheet.getRange(i + 1, 7).setValue(actualRebirths);
          fixedCount++;
        }
      }
      
      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Multiplier
      if (multiplier > 5) {
        dashSheet.getRange(i + 1, 8).setValue(5);
        fixedCount++;
      }
      
      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Rank ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (rebirthCount > 0 || multiplier > 1) {
        const correctRank = calculateCorrectRank(exp, rebirthCount, multiplier);
        if (currentRank !== correctRank) {
          dashSheet.getRange(i + 1, 4).setValue(correctRank);
          fixedCount++;
        }
      }
    }
    
    // 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏ö‡∏ö
    updateLeaderboard();
    
    ui.alert("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏∞‡∏ö‡∏ö Rebirth ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ${fixedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ Leaderboard ‡πÅ‡∏•‡πâ‡∏ß`, ui.ButtonSet.OK);
    
  } catch (error) {
    console.error("Error applying rebirth fixes:", error);
    ui.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ${error.toString()}`, ui.ButtonSet.OK);
  }
}

// üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Form
function checkAndFixFormDataSync() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡∏µ‡∏ó‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const formSheet = ss.getSheetByName("member");
  const dbSheet = ss.getSheetByName("Member Database");
  const dashSheet = ss.getSheetByName("Member Dashboard");
  
  if (!formSheet) {
    return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó member (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Form)");
  }
  
  if (!dashSheet) {
    return ui.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Member Dashboard");
  }
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ä‡∏µ‡∏ó
  const formData = formSheet.getDataRange().getValues();
  const dashData = dashSheet.getDataRange().getValues();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Member Dashboard
  const dashPhones = new Map();
  const dashCodenames = new Map();
  
  for (let i = 1; i < dashData.length; i++) {
    const phone = normalizePhone(dashData[i][1]);
    const codename = String(dashData[i][2]).toLowerCase().trim();
    if (phone) dashPhones.set(phone, i + 1);
    if (codename) dashCodenames.set(codename, i + 1);
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å member sheet
  const missingEntries = [];
  const duplicateEntries = [];
  const invalidEntries = [];
  
  for (let i = 1; i < formData.length; i++) {
    const formRow = formData[i];
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° (‡∏õ‡∏£‡∏±‡∏ö index ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏à‡∏£‡∏¥‡∏á)
    const timestamp = formRow[0];
    const fullName = formRow[1] || "";
    const nickname = formRow[2] || "";
    const rawPhone = formRow[3] || "";
    const codename = String(formRow[4] || "").trim();
    const memberType = formRow[5] || "";
    const referrer = formRow[6] || "";
    
    const phone = normalizePhone(rawPhone);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!phone || phone.length !== 10) {
      invalidEntries.push({
        row: i + 1,
        reason: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        data: { fullName, nickname, phone: rawPhone, codename }
      });
      continue;
    }
    
    if (!codename) {
      invalidEntries.push({
        row: i + 1,
        reason: "‡πÑ‡∏°‡πà‡∏°‡∏µ Codename",
        data: { fullName, nickname, phone, codename }
      });
      continue;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
    const hasPhone = dashPhones.has(phone);
    const hasCodename = dashCodenames.has(codename.toLowerCase());
    
    if (hasPhone || hasCodename) {
      duplicateEntries.push({
        row: i + 1,
        reason: hasPhone ? "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ã‡πâ‡∏≥" : "Codename ‡∏ã‡πâ‡∏≥",
        data: { fullName, nickname, phone, codename },
        existingRow: hasPhone ? dashPhones.get(phone) : dashCodenames.get(codename.toLowerCase())
      });
      continue;
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Member Dashboard
    missingEntries.push({
      row: i + 1,
      data: { timestamp, fullName, nickname, phone, codename, memberType, referrer }
    });
  }
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  let report = `üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n\n`;
  report += `üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:\n`;
  report += `‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°: ${formData.length - 1} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`;
  report += `‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Member Dashboard: ${dashData.length - 1} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`;
  report += `‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô: ${missingEntries.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`;
  report += `‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥: ${duplicateEntries.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`;
  report += `‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${invalidEntries.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n`;
  
  if (missingEntries.length > 0) {
    report += `üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô (${missingEntries.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):\n`;
    missingEntries.forEach((entry, index) => {
      report += `${index + 1}. ${entry.data.nickname} (${entry.data.codename}) - ${entry.data.phone}\n`;
    });
    report += `\n`;
  }
  
  if (duplicateEntries.length > 0) {
    report += `‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ (${duplicateEntries.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):\n`;
    duplicateEntries.forEach((entry, index) => {
      report += `${index + 1}. ${entry.data.nickname} (${entry.data.codename}) - ${entry.reason}\n`;
    });
    report += `\n`;
  }
  
  if (invalidEntries.length > 0) {
    report += `‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (${invalidEntries.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):\n`;
    invalidEntries.forEach((entry, index) => {
      report += `${index + 1}. ${entry.data.nickname} - ${entry.reason}\n`;
    });
    report += `\n`;
  }
  
  // ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (missingEntries.length > 0) {
    report += `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ Member Dashboard ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`;
    const response = ui.alert("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", report, ui.ButtonSet.YES_NO);
    
    if (response === ui.Button.YES) {
      addMissingFormEntries(missingEntries);
    }
  } else {
    ui.alert("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", report, ui.ButtonSet.OK);
  }
}

// ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å Google Form ‡πÄ‡∏Ç‡πâ‡∏≤ Member Dashboard
function addMissingFormEntries(missingEntries) {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const dbSheet = ss.getSheetByName("member");
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå missingEntries ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!missingEntries || !Array.isArray(missingEntries)) {
    return ui.alert("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ui.ButtonSet.OK);
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (missingEntries.length === 0) {
    return ui.alert("‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°", ui.ButtonSet.OK);
  }
  
  let successCount = 0;
  let errorCount = 0;
  let errorMessages = [];
  
  missingEntries.forEach(entry => {
    try {
      const member = entry.data;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      const dashData = dashSheet.getDataRange().getValues();
      const dashPhones = dashData.slice(1).map(row => normalizePhone(row[1]));
      const dashCodenames = dashData.slice(1).map(row => String(row[2]).toLowerCase().trim());
      
      if (dashPhones.includes(member.phone)) {
        errorMessages.push(`${member.nickname}: ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥`);
        errorCount++;
        return;
      }
      
      if (dashCodenames.includes(member.codename.toLowerCase())) {
        errorMessages.push(`${member.nickname}: Codename ‡∏ã‡πâ‡∏≥`);
        errorCount++;
        return;
      }
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EXP ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      let initialExp = 0;
      if (member.memberType && member.memberType.includes("Premium")) {
        initialExp = 3;
        if (member.referrer && dashPhones.includes(member.referrer)) {
          initialExp += 1;
          addExpToPhone(member.referrer, 2);
          logExp(member.referrer, "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Premium (+2 EXP)", 2);
        }
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Member Dashboard
      const newRow = [member.nickname, member.phone, member.codename, "Rookie", initialExp, ""];
      const newRowIndex = dashSheet.getLastRow() + 1;
      dashSheet.getRange(newRowIndex, 1, 1, newRow.length).setValues([newRow]);
      dashSheet.getRange(newRowIndex, 2).setNumberFormat("@");
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å EXP Log
      if (initialExp > 0) {
        logExp(member.phone, "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", initialExp);
      }
      
      successCount++;
      
    } catch (error) {
      console.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° ${entry.data.nickname}:`, error);
      errorMessages.push(`${entry.data.nickname}: ${error.message}`);
      errorCount++;
    }
  });
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rank ‡πÅ‡∏•‡∏∞ Leaderboard
  if (successCount > 0) {
    updateRanks();
    updateLeaderboard();
  }
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  let resultMessage = `üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n\n`;
  resultMessage += `‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`;
  resultMessage += `‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n`;
  
  if (errorMessages.length > 0) {
    resultMessage += `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n`;
    errorMessages.forEach(msg => {
      resultMessage += `‚Ä¢ ${msg}\n`;
    });
  }
  
  ui.alert("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", resultMessage, ui.ButtonSet.OK);
}

// üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î
function fixIncorrectRanks() {
  const ui = SpreadsheetApp.getUi();
  
  // 1. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = sheet.getDataRange().getValues();
  let fixedCount = 0;
  let report = "üîß ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î:\n\n";
  
  try {
    for (let i = 1; i < data.length; i++) {
      const nickname = data[i][0];
      const codename = data[i][2];
      const currentRank = data[i][3];
      const rawExp = data[i][4];
      const exp = Number(rawExp) || 0;
      const rebirthCount = Number(data[i][6]) || 0; // Rebirth Count (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 7)
      const multiplier = Number(data[i][7]) || 1; // EXP Multiplier (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 8)
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const correctRank = calculateCorrectRank(exp, rebirthCount, multiplier);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (currentRank !== correctRank) {
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏£‡∏á‡∏Ñ‡πå
        sheet.getRange(i + 1, 4).setValue(correctRank);
        fixedCount++;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        report += `‚úÖ ${nickname} (${codename})\n`;
        report += `   ${currentRank} ‚Üí ${correctRank}\n`;
        report += `   EXP: ${exp}, Rebirth: ${rebirthCount}, Multiplier: x${multiplier}\n\n`;
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log
        logRebirthActivity("üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î", `${nickname} (${codename}) - ${currentRank} ‚Üí ${correctRank}, EXP: ${exp}, Multiplier: x${multiplier}`, admin, "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Leaderboard
    updateLeaderboard();
    
    if (fixedCount > 0) {
      report += `\nüéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${fixedCount} ‡∏Ñ‡∏ô\n‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Leaderboard ‡πÅ‡∏•‡πâ‡∏ß`;
      ui.alert("üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", report, ui.ButtonSet.OK);
    } else {
      ui.alert("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î", "‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß!", ui.ButtonSet.OK);
    }
    
  } catch (error) {
    console.error("Error fixing incorrect ranks:", error);
    logRebirthActivity("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î - ${error.toString()}`, admin, "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    ui.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏£‡∏á‡∏Ñ‡πå: ${error.toString()}`, ui.ButtonSet.OK);
  }
}

// üîç ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó
function checkActualData() {
  const ui = SpreadsheetApp.getUi();
  
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = sheet.getDataRange().getValues();
  let report = "üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó:\n\n";
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 10 ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å
  const maxRows = Math.min(10, data.length - 1);
  
  for (let i = 1; i <= maxRows; i++) {
    const nickname = data[i][0];
    const codename = data[i][2];
    const currentRank = data[i][3];
    const exp = Number(data[i][4]) || 0;
    const rebirthCount = Number(data[i][6]) || 0;
    const multiplier = Number(data[i][7]) || 1;
    
    report += `üë§ ${nickname} (${codename})\n`;
    report += `   ‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${currentRank}\n`;
    report += `   EXP: ${exp}\n`;
    report += `   Rebirth Count: ${rebirthCount}\n`;
    report += `   Multiplier: x${multiplier}\n`;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
    const correctRank = calculateCorrectRank(exp, rebirthCount, multiplier);
    report += `   ‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô: ${correctRank}\n`;
    report += `   ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${currentRank === correctRank ? "‚úÖ" : "‚ùå"}\n\n`;
  }
  
  report += `üìä ‡∏™‡∏£‡∏∏‡∏õ:\n`;
  report += `‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ${maxRows} ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å\n`;
  report += `‚Ä¢ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå EXP: ${data[0][4]}\n`;
  report += `‚Ä¢ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Rebirth Count: ${data[0][6]}\n`;
  report += `‚Ä¢ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Multiplier: ${data[0][7]}\n`;
  
  ui.alert("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á", report, ui.ButtonSet.OK);
}

// üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Multiplier ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
function updateCorrectMultipliers() {
  const ui = SpreadsheetApp.getUi();
  
  // 1. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  const adminPrompt = ui.prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = sheet.getDataRange().getValues();
  let updatedCount = 0;
  let report = "üîß ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Multiplier:\n\n";
  
  try {
    for (let i = 1; i < data.length; i++) {
      const nickname = data[i][0];
      const codename = data[i][2];
      const rebirthCount = Number(data[i][6]) || 0; // Rebirth Count (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 7)
      const currentMultiplier = Number(data[i][7]) || 1; // Multiplier ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 8)
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Multiplier ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      let correctMultiplier = 1;
      if (rebirthCount >= 1) {
        correctMultiplier = Math.min(rebirthCount + 1, 5); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5
      }
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Multiplier ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (currentMultiplier !== correctMultiplier) {
        sheet.getRange(i + 1, 8).setValue(correctMultiplier); // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 8 = Multiplier
        updatedCount++;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        report += `‚úÖ ${nickname} (${codename})\n`;
        report += `   Rebirth Count: ${rebirthCount}\n`;
        report += `   Multiplier: x${currentMultiplier} ‚Üí x${correctMultiplier}\n\n`;
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log
        logRebirthActivity("üîß ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Multiplier", `${nickname} (${codename}) - Multiplier: x${currentMultiplier} ‚Üí x${correctMultiplier}, Rebirth: ${rebirthCount}`, admin, "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    }
    
    if (updatedCount > 0) {
      report += `\nüéâ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Multiplier ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${updatedCount} ‡∏Ñ‡∏ô\n`;
      report += `üí° ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ: ‡πÉ‡∏ä‡πâ "üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏£‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏£‡∏á‡∏Ñ‡πå`;
      ui.alert("üîß ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Multiplier ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", report, ui.ButtonSet.OK);
    } else {
      ui.alert("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ Multiplier ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", "Multiplier ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß!", ui.ButtonSet.OK);
    }
    
  } catch (error) {
    console.error("Error updating multipliers:", error);
    logRebirthActivity("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Multiplier - ${error.toString()}`, admin, "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    ui.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Multiplier: ${error.toString()}`, ui.ButtonSet.OK);
  }
}