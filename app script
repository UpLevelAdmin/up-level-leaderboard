// ✅ Up Level Guild System - เมนูหลักและฟังก์ชันจัดการเบอร์โทร

function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu("⬆️ Up Level Guild")
    // 🎉 เมนูปาร์ตี้
    .addItem("📊 สรุปข้อมูลปาร์ตี้", "showPartySummary")
    .addItem("✨ สร้างปาร์ตี้ (จากเบอร์โทร)", "createParty")
    .addItem("➕ เชิญเข้าปาร์ตี้", "addMemberToParty")
    .addItem("❌ ออกจากปาร์ตี้", "removeFromParty")
    .addItem("🔁 ย้ายปาร์ตี้", "moveToAnotherParty")
    .addItem("💥 ยุบปาร์ตี้", "disbandParty")
    
    .addSeparator()

    // ⚔️ EXP & Party Point
    .addItem("📥 เพิ่ม EXP จากกิจกรรม (1 คน)", "addExpFromActivity")
    .addItem("📥 เพิ่ม EXP จากกิจกรรม (หลายคน)", "addExpFromActivityBulk")
    .addItem("🟢 เพิ่ม EXP แบบ Manual", "manualAddExp")
    .addItem("🧩 เพิ่ม Party Point แบบ Manual", "manualAddPartyPoint")
    .addItem("✅ อนุมัติเควส (ระบุเบอร์)", "approveQuestByPhone")
    .addItem("↩️ ย้อน EXP ล่าสุด (1 คน)", "undoLastExpSingle")
    .addItem("↩️ ย้อน EXP ล่าสุด (หลายคน)", "undoLastExpBulk")
    .addItem("✅ อนุมัติคำท้า", "approveChallenge")
    .addItem("📊 บันทึกผลการท้าแข่ง", "recordChallengeResult")

    .addSeparator()

    // 🛠️ ระบบ & ข้อมูล
    .addItem("🎯 อัปเดต Rank", "updateRanks")
    .addItem("🏆 อัปเดต Leaderboard", "updateLeaderboard")
    .addItem("🗑️ ลบข้อมูลซ้ำ", "clearDuplicateEntriesDebug")
    .addItem("❌ ลบข้อมูลสมาชิก", "removeMember")
    .addItem("🔑 เพิ่มแอดมินใหม่", "addAdminEmail")
    .addToUi();
}

/**
 * Checks if the given email belongs to an admin.
 * Admins are defined in the 'Admin Settings' sheet.
 * Uses CacheService to reduce sheet reads.
 * @param {string} email The email to check.
 * @returns {boolean} True if the user is an admin.
 */
function isAdmin(email) {
  if (!email) {
    return false;
  }
  
  const cache = CacheService.getScriptCache();
  const CACHE_KEY = 'admin_emails';
  let cachedAdmins = cache.get(CACHE_KEY);
  
  if (cachedAdmins) {
    const adminList = JSON.parse(cachedAdmins);
    return adminList.includes(email.toLowerCase());
  }

  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Admin Settings");
    if (!sheet) {
      console.log("Admin Settings sheet not found. No users will be considered admins.");
      return false;
    }
    const adminEmails = sheet.getRange("A:A").getValues()
                          .flat()
                          .map(e => String(e).trim().toLowerCase())
                          .filter(e => e); 

    if (adminEmails.length > 0) {
      // Cache for 1 hour
      cache.put(CACHE_KEY, JSON.stringify(adminEmails), 3600);
    }
    
    return adminEmails.includes(email.toLowerCase());

  } catch (e) {
    console.error("Error checking admin status: " + e.toString());
    return false;
  }
}

/**
 * Adds a new email to the admin list.
 * Only an existing admin can perform this action.
 */
function addAdminEmail() {
  const ui = SpreadsheetApp.getUi();
  const currentUserEmail = Session.getActiveUser().getEmail();

  if (!isAdmin(currentUserEmail)) {
    ui.alert("🔒 Access Denied", "You do not have permission to add new admins.", ui.ButtonSet.OK);
    return;
  }
  
  const prompt = ui.prompt("➕ Add New Admin", "Enter the email address of the new admin:", ui.ButtonSet.OK_CANCEL);
  
  if (prompt.getSelectedButton() === ui.Button.OK) {
    const newAdminEmail = prompt.getResponseText().trim().toLowerCase();
    
    if (!newAdminEmail || !/^\S+@\S+\.\S+$/.test(newAdminEmail)) {
      ui.alert("❌ Invalid Email", "Please enter a valid email address.", ui.ButtonSet.OK);
      return;
    }
    
    try {
      const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Admin Settings");
      if (!sheet) {
        ui.alert("❌ Error", "The 'Admin Settings' sheet could not be found.", ui.ButtonSet.OK);
        return;
      }
      
      const existingAdmins = sheet.getRange("A:A").getValues().flat().map(e => String(e).trim().toLowerCase());
      if (existingAdmins.includes(newAdminEmail)) {
        ui.alert("ℹ️ Already Exists", "This email is already an admin.", ui.ButtonSet.OK);
        return;
      }
      
      sheet.appendRow([newAdminEmail]);
      
      CacheService.getScriptCache().remove('admin_emails');
      
      ui.alert("✅ Success", `Successfully added ${newAdminEmail} as a new admin.`, ui.ButtonSet.OK);
      
    } catch (e) {
      ui.alert("❌ Error", "An error occurred: " + e.message, ui.ButtonSet.OK);
      console.error("addAdminEmail Error: " + e.toString());
    }
  }
}

function logAdminAction(functionName, details = "", admin = "Unknown") {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Admin Log");
  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");
  sheet.appendRow([now, admin, functionName, details]);
}



// ✅ normalizePhone() — ล้างและจัดเบอร์ให้ปลอดภัย
function normalizePhone(input) {
  const phone = String(input).replace(/[^\d]/g, "").trim();
  if (phone.length === 9 && phone[0] !== "0") return "0" + phone;
  if (phone.length === 10 && phone.startsWith("0")) return phone;
  return "";
}

// ✅ validatePhoneOrAlert() — เช็กความถูกต้องของเบอร์
function validatePhoneOrAlert(phone, ui) {
  if (!phone || phone.length !== 10 || !phone.startsWith("0")) {
    ui.alert("❌ เบอร์โทรไม่ถูกต้อง กรุณาตรวจสอบอีกครั้ง (ควรมี 10 หลักขึ้นต้นด้วย 0)");
    return false;
  }
  return true;
}

// ✅ รับข้อมูลจาก Google Form
function onFormSubmit(e) {
  const values = e.values;
  const fullName = values[1];
  const nickname = values[2];
  const rawPhone = values[3];
  const phone = normalizePhone(rawPhone);
  const codename = values[4].trim();
  const memberType = values[5];
  const referrer = normalizePhone(values[6] || "");

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dbSheet = ss.getSheetByName("Member Database");
  const dashSheet = ss.getSheetByName("Member Dashboard");

  const rowNum = dbSheet.getLastRow();
  const lastCol = dbSheet.getLastColumn();

  const phonesInDash = dashSheet.getRange(2, 2, Math.max(dashSheet.getLastRow() - 1, 1)).getValues()
    .flat().map(p => normalizePhone(p));
  const codenamesInDash = dashSheet.getRange(2, 3, Math.max(dashSheet.getLastRow() - 1, 1)).getValues()
    .flat().map(c => String(c).toLowerCase().trim());

  Logger.log("📥 กำลังตรวจข้อมูลฟอร์ม");
  Logger.log("📞 เบอร์: " + phone);
  Logger.log("🧑 Codename: " + codename);

  let foundPhoneDup = phonesInDash.includes(phone);
  let foundCodenameDup = codenamesInDash.includes(codename.toLowerCase());

  if (foundPhoneDup) {
    dbSheet.getRange(rowNum, 4).setValue(`${phone} (DUPLICATE)`);
    dbSheet.getRange(rowNum, 4).setNumberFormat("@");
    Logger.log("⚠️ พบเบอร์ซ้ำ!");
  }

  if (foundCodenameDup) {
    dbSheet.getRange(rowNum, 5).setValue(`${codename} (DUPLICATE)`);
    Logger.log("⚠️ พบ Codename ซ้ำ!");
  }

  if (foundPhoneDup || foundCodenameDup) {
    if (rowNum >= 2 && lastCol >= 1) {
      dbSheet.getRange(rowNum, 1, 1, lastCol).setBackground("#f28b82");
    }
    Logger.log("🛑 หยุดการลงทะเบียนเพราะข้อมูลซ้ำ");
    return;
  }

  let initialExp = memberType.includes("Premium") ? 3 : 0;

  // ✅ ถ้ามี referrer อยู่จริงในระบบ → ผู้สมัคร Premium ได้ +1
  if (memberType.includes("Premium") && referrer && phonesInDash.includes(referrer)) {
    initialExp += 1;
  }

  // ✅ เขียนเข้า Member Dashboard โดย setValues + ล็อกเบอร์
  const newRow = [nickname, phone, codename, "Rookie", initialExp, ""];
  const newRowIndex = dashSheet.getLastRow() + 1;
  dashSheet.getRange(newRowIndex, 1, 1, newRow.length).setValues([newRow]);
  dashSheet.getRange(newRowIndex, 2).setNumberFormat("@");

  // ✅ ล็อกเบอร์ใน Member Database ด้วย
  dbSheet.getRange(rowNum, 4).setNumberFormat("@");

  logExp(phone, "สมัครสมาชิก", initialExp);

  if (referrer && memberType.includes("Premium") && phonesInDash.includes(referrer)) {
    addExpToPhone(referrer, 2);
    logExp(referrer, "แนะนำเพื่อนสมัคร (Premium)", 2);
  }

  updateRanks();
  updateLeaderboard();
}




// ✅ บันทึกการได้รับ EXP พร้อมวันที่และเวลาแบบเต็ม
function logExp(phone, activity, amount) {
  const normalized = normalizePhone(phone);
  const dashSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const dashData = dashSheet.getDataRange().getValues();
  const member = dashData.find(row => normalizePhone(row[1]) === normalized);
  const codename = member ? member[2] : "ไม่พบชื่อ";

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("EXP Log");
  const row = sheet.getLastRow() + 1;
  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");

  sheet.getRange(row, 1, 1, 5).setValues([[normalized, codename, now, activity, amount]]);
  sheet.getRange(row, 1).setNumberFormat("@");

  updateRanks();
  updateLeaderboard();
}




// ✅ เพิ่ม EXP โดยตรงจากเบอร์
function addExpToPhone(phone, amount) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = sheet.getDataRange().getValues();
  const normalized = normalizePhone(phone);

  for (let i = 1; i < data.length; i++) {
    if (normalizePhone(data[i][1]) === normalized) {
      const current = Number(data[i][4]);
      sheet.getRange(i + 1, 5).setValue(current + amount);
      logExp(phone, "เพิ่ม EXP โดยระบบ", amount);
      return;
    }
  }
}

// ✅ คำนวณ Rank จาก EXP แล้วอัปเดตให้สมาชิกทุกคน
function updateRanks() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = sheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    const rawExp = data[i][4];
    const exp = Number(rawExp) || 0;

    let rank = "Rookie";
    if (exp >= 200) rank = "Legend";
    else if (exp >= 120) rank = "Grandmaster";
    else if (exp >= 75) rank = "Diamond";
    else if (exp >= 50) rank = "Platinum";
    else if (exp >= 30) rank = "Gold";
    else if (exp >= 15) rank = "Silver";
    else if (exp >= 5) rank = "Bronze";

    sheet.getRange(i + 1, 4).setValue(rank);
  }
}


// ✅ อัปเดตตาราง Leaderboard โดยเรียงตาม EXP มากสุด
function updateLeaderboard() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dash = ss.getSheetByName("Member Dashboard");
  const lb = ss.getSheetByName("Leaderboard");
  const data = dash.getRange(2, 1, dash.getLastRow() - 1, 6).getValues();
  const result = [["ชื่อเล่น", "Codename", "Rank", "EXP", "Party"]];
  for (let i = 0; i < data.length; i++) {
    result.push([data[i][0], data[i][2], data[i][3], data[i][4], data[i][5] || ""]);
  }
  result.sort((a, b) => b[3] - a[3]);
  lb.clearContents();
  lb.getRange(1, 1, result.length, result[0].length).setValues(result);
}

// ✅ สำหรับใช้กับ Web App เรียกข้อมูลจากชีท Leaderboard
function getLeaderboardData() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Leaderboard");
  if (!sheet) return [];
  return sheet.getRange(2, 1, sheet.getLastRow() - 1, 5).getValues();
}



// ✅ สรุปปาร์ตี้ทั้งหมด
function showPartySummary() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Party");
  const data = sheet.getDataRange().getValues();
  const ui = SpreadsheetApp.getUi();
  let msg = "🎉 รายชื่อปาร์ตี้ทั้งหมด";

  for (let i = 1; i < data.length; i++) {
    msg += `\n${data[i][0]} - แต้ม: ${data[i][2]}`;
  }
  ui.alert(msg);
}

// ✅ บันทึกกิจกรรมปาร์ตี้ พร้อมเวลาแบบเต็ม
function logPartyActivity(partyName, codename, activity, note = "") {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Party Log");
  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");
  sheet.appendRow([
    now,
    partyName,
    codename,
    activity,
    "",  // Party Point
    note
  ]);
}

// ✅ สร้างปาร์ตี้ (ต้องมี Rank Gold+ และยังไม่อยู่ปาร์ตี้)
function createParty() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const partySheet = ss.getSheetByName("Party");
  const trackerSheet = ss.getSheetByName("Party Tracker");
  const adminPrompt = ui.prompt("ชื่อแอดมิน", "กรุณากรอกชื่อแอดมิน (สำหรับบันทึก log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  // รับเบอร์โทร
  const phonePrompt = ui.prompt("สร้างปาร์ตี้", "กรอกเบอร์โทรผู้ก่อตั้ง", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = normalizePhone(phonePrompt.getResponseText().trim());

  const dashData = dashSheet.getDataRange().getValues();
  const member = dashData.find(row => normalizePhone(row[1]) === phone);
  if (!member) return ui.alert("❌ ไม่พบเบอร์นี้ในระบบ");

  const nickname = member[0];
  const codename = member[2];
  const rank = member[3];
  const currentParty = member[5];

  const allowedRanks = ["Gold", "Platinum", "Diamond", "Grandmaster", "Legend"];
  if (!allowedRanks.includes(rank)) return ui.alert("❌ ต้องมี Rank อย่างน้อย Gold ขึ้นไป");

  if (currentParty && currentParty !== "") return ui.alert("❌ คุณอยู่ในปาร์ตี้อื่นอยู่แล้ว");

  // รับชื่อปาร์ตี้ใหม่
  const namePrompt = ui.prompt("ตั้งชื่อปาร์ตี้ใหม่", "ชื่อห้ามซ้ำ", ui.ButtonSet.OK_CANCEL);
  if (namePrompt.getSelectedButton() !== ui.Button.OK) return;
  const partyName = namePrompt.getResponseText().trim();

  // ตรวจสอบชื่อซ้ำ
  const partyNames = partySheet.getLastRow() > 1
    ? partySheet.getRange(2, 1, partySheet.getLastRow() - 1).getValues().flat()
    : [];
  if (partyNames.includes(partyName)) return ui.alert("❌ มีชื่อปาร์ตี้นี้อยู่แล้ว");

  // ✅ เพิ่มเข้า Party sheet พร้อมล็อก format เบอร์
  const partyRow = partySheet.getLastRow() + 1;
  partySheet.getRange(partyRow, 1, 1, 3).setValues([[partyName, phone, 0]]);
  partySheet.getRange(partyRow, 2).setNumberFormat("@");

  // ✅ เพิ่มเข้า Party Tracker พร้อมล็อก format เบอร์
  const trackerRow = trackerSheet.getLastRow() + 1;
  trackerSheet.getRange(trackerRow, 1, 1, 5).setValues([[partyName, codename, phone, "หัวหน้าปาร์ตี้", new Date()]]);
  trackerSheet.getRange(trackerRow, 3).setNumberFormat("@");

  // ✅ อัปเดต Dashboard
  const memberRow = dashData.findIndex(row => normalizePhone(row[1]) === phone);
  dashSheet.getRange(memberRow + 1, 6).setValue(partyName);

  updateLeaderboard();
  ui.alert(`✅ สร้างปาร์ตี้ ${partyName} สำเร็จแล้ว`);
  logAdminAction("สร้างปาร์ตี้", `${codename} (${phone}) → ${partyName}`, admin);
  sortAndHighlightPartyTracker();
}





// ✅ เชิญสมาชิกเข้าปาร์ตี้ พร้อม log ลง Party Tracker และ Party Log
function addMemberToParty() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const partySheet = ss.getSheetByName("Party");
  const trackerSheet = ss.getSheetByName("Party Tracker");
  const partyLogSheet = ss.getSheetByName("Party Log");

  const phonePrompt = ui.prompt("เชิญเข้าปาร์ตี้", "กรอกเบอร์ของสมาชิก", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = normalizePhone(phonePrompt.getResponseText().trim());
  if (!validatePhoneOrAlert(phone, ui)) return;

  const dashData = dashSheet.getDataRange().getValues();
  const memberIndex = dashData.findIndex(row => normalizePhone(row[1]) === phone);
  if (memberIndex === -1) return ui.alert("❌ ไม่พบเบอร์นี้ในระบบ");

  const codename = dashData[memberIndex][2];
  const currentParty = dashData[memberIndex][5];
  if (currentParty && currentParty !== "") return ui.alert("❌ สมาชิกนี้อยู่ในปาร์ตี้แล้ว");

  const partyList = partySheet.getRange(2, 1, partySheet.getLastRow() - 1).getValues().flat();
  if (partyList.length === 0) return ui.alert("❌ ยังไม่มีปาร์ตี้ให้เลือก");

  const partyPrompt = ui.prompt("ชื่อปาร์ตี้", `พิมพ์ชื่อต่อไปนี้:\n\n${partyList.join("\n")}`, ui.ButtonSet.OK_CANCEL);
  if (partyPrompt.getSelectedButton() !== ui.Button.OK) return;
  const selectedParty = partyPrompt.getResponseText().trim();

  if (!partyList.includes(selectedParty)) return ui.alert("❌ ไม่พบชื่อปาร์ตี้นี้");

  // ✅ อัปเดตชื่อปาร์ตี้ใน Dashboard
  dashSheet.getRange(memberIndex + 1, 6).setValue(selectedParty);

  // ✅ บันทึกลง Party Tracker
  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");
  const trackerRow = trackerSheet.getLastRow() + 1;
  trackerSheet.getRange(trackerRow, 1, 1, 5).setValues([
    [selectedParty, codename, `'${phone}`, "สมาชิก", now]
  ]);

  // ✅ Log ลง Party Log พร้อมชื่อปาร์ตี้
  logPartyActivity(selectedParty, codename, `เข้าร่วมปาร์ตี้ ${selectedParty}`, "เชิญผ่านเมนู");

  updateLeaderboard();
  sortAndHighlightPartyTracker();
  ui.alert(`✅ เพิ่ม ${codename} เข้าปาร์ตี้ ${selectedParty} สำเร็จแล้ว`);
}



function removeMember() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();

  // ✅ ขอชื่อแอดมิน
  const adminPrompt = ui.prompt("ชื่อแอดมิน", "กรุณากรอกชื่อแอดมิน (สำหรับบันทึก log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  const dbSheet = ss.getSheetByName("Member Database");
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const lbSheet = ss.getSheetByName("Leaderboard");
  const partySheet = ss.getSheetByName("Party");
  const trackerSheet = ss.getSheetByName("Party Tracker");

  const phonePrompt = ui.prompt("ลบสมาชิก", "กรอกเบอร์โทรที่ต้องการลบ", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = normalizePhone(phonePrompt.getResponseText().trim());

  // ⚠️ ยืนยันก่อนลบ
  const confirm = ui.alert("⚠️ ยืนยันการลบ", `คุณแน่ใจหรือไม่ว่าต้องการลบสมาชิกเบอร์ ${phone}?\n\nข้อมูลทั้งหมดที่เกี่ยวข้องจะถูกลบ ยกเว้น Member Database`, ui.ButtonSet.YES_NO);
  if (confirm !== ui.Button.YES) return;

  // 1. ✅ ไฮไลต์แดงใน Member Database
  const dbData = dbSheet.getDataRange().getValues();
  for (let i = 1; i < dbData.length; i++) {
    if (normalizePhone(dbData[i][3]) === phone) {
      dbSheet.getRange(i + 1, 1, 1, dbData[0].length).setBackground("#FFCCCC");
    }
  }

  // 2. ✅ ลบจาก Member Dashboard
  const dashData = dashSheet.getDataRange().getValues();
  for (let i = dashData.length - 1; i >= 1; i--) {
    if (normalizePhone(dashData[i][1]) === phone) {
      dashSheet.deleteRow(i + 1);
    }
  }

  // 3. ✅ ลบจาก Leaderboard
  const lbData = lbSheet.getDataRange().getValues();
  for (let i = lbData.length - 1; i >= 1; i--) {
    if (normalizePhone(lbData[i][1]) === phone) {
      lbSheet.deleteRow(i + 1);
    }
  }

  // 4. ✅ ลบออกจากปาร์ตี้ในชีท Party (ถ้าเป็นหัวหน้า)
  const partyData = partySheet.getDataRange().getValues();
  for (let i = partyData.length - 1; i >= 1; i--) {
    if (normalizePhone(partyData[i][1]) === phone) {
      partySheet.deleteRow(i + 1);
    }
  }

  // 5. ✅ ลบจาก Party Tracker (ทุกรายการที่มีเบอร์นี้)
  const trackerData = trackerSheet.getDataRange().getValues();
  for (let i = trackerData.length - 1; i >= 1; i--) {
    if (normalizePhone(trackerData[i][2]) === phone) {
      trackerSheet.deleteRow(i + 1);
    }
  }

  updateLeaderboard();
  ui.alert("✅ ลบสมาชิกและข้อมูลที่เกี่ยวข้องเรียบร้อยแล้ว");

  // ✅ Log Admin
  logAdminAction("ลบสมาชิก", `เบอร์: ${phone}`, admin);
}



// ✅ ออกจากปาร์ตี้
function removeFromParty() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const trackerSheet = ss.getSheetByName("Party Tracker");
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const adminPrompt = ui.prompt("ชื่อแอดมิน", "กรุณากรอกชื่อแอดมิน (สำหรับบันทึก log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();


  const phonePrompt = ui.prompt("ออกจากปาร์ตี้", "กรอกเบอร์โทรสมาชิก", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = normalizePhone(phonePrompt.getResponseText().trim());
  if (!validatePhoneOrAlert(phone, ui)) return;

  const trackerData = trackerSheet.getDataRange().getValues();
  let found = false;

  for (let i = trackerData.length - 1; i >= 1; i--) {
    if (normalizePhone(trackerData[i][2]) === phone) {
      trackerSheet.deleteRow(i + 1);
      found = true;
      break;
    }
  }

  const dashData = dashSheet.getDataRange().getValues();
  let codename = "", partyName = "";

  for (let i = 1; i < dashData.length; i++) {
    if (normalizePhone(dashData[i][1]) === phone) {
      codename = dashData[i][2];
      partyName = dashData[i][5];
      dashSheet.getRange(i + 1, 6).setValue("");
      break;
    }
  }

  if (partyName && codename) {
    logPartyActivity(partyName, codename, "ออกจากปาร์ตี้");
  }

  updateLeaderboard();
  ui.alert(found ? `✅ ลบ ${codename} ออกจากปาร์ตี้แล้ว` : `ℹ️ ไม่พบเบอร์นี้ในปาร์ตี้ใดเลย`);
  logAdminAction("ออกจากปาร์ตี้", `${codename} (${phone}) ← ${partyName}`, admin);
  sortAndHighlightPartyTracker();
}

// ✅ ย้ายสมาชิกไปปาร์ตี้ใหม่ (เช็ก Rank, ความถูกต้อง, จำนวนสมาชิก)
function moveToAnotherParty() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const trackerSheet = ss.getSheetByName("Party Tracker");
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const partySheet = ss.getSheetByName("Party");
  const adminPrompt = ui.prompt("ชื่อแอดมิน", "กรุณากรอกชื่อแอดมิน (สำหรับบันทึก log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();


  const phone = normalizePhone(ui.prompt("ย้ายปาร์ตี้", "กรอกเบอร์โทรสมาชิกที่ต้องการย้าย", ui.ButtonSet.OK_CANCEL)
    .getResponseText().trim());

  const dashData = dashSheet.getDataRange().getValues();
  let codename = "", oldParty = "", dashRow = -1;

  for (let i = 1; i < dashData.length; i++) {
    if (normalizePhone(dashData[i][1]) === phone) {
      codename = dashData[i][2];
      oldParty = dashData[i][5];
      dashRow = i + 1;
      break;
    }
  }

  if (!codename) return ui.alert("❌ ไม่พบเบอร์นี้ใน Member Dashboard");

  const newParty = ui.prompt("กรอกชื่อปาร์ตี้ใหม่ที่ต้องการย้ายเข้า", ui.ButtonSet.OK_CANCEL)
    .getResponseText().trim();

  const existingParties = partySheet.getRange(2, 1, partySheet.getLastRow() - 1).getValues().flat();
  if (!existingParties.includes(newParty)) return ui.alert("❌ ไม่พบปาร์ตี้นี้ในระบบ");

  const trackerData = trackerSheet.getDataRange().getValues();
  const partyMembers = trackerData.filter(row => row[0] === newParty);
  if (partyMembers.length >= 5) return ui.alert("❌ ปาร์ตี้นี้มีสมาชิกครบ 5 คนแล้ว");

  for (let i = trackerData.length - 1; i >= 1; i--) {
    if (normalizePhone(trackerData[i][2]) === phone) {
      trackerSheet.deleteRow(i + 1);
      break;
    }
  }

  const row = trackerSheet.getLastRow() + 1;
  trackerSheet.getRange(row, 1, 1, 5).setValues([[newParty, codename, phone, "สมาชิก", new Date()]]);
  trackerSheet.getRange(row, 3).setNumberFormat("@");

  dashSheet.getRange(dashRow, 6).setValue(newParty);
  updateLeaderboard();

  // ✅ Log พร้อมชื่อปาร์ตี้ใน activity
  if (oldParty) {
    logPartyActivity(oldParty, codename, "ย้ายออกจากปาร์ตี้", `ไปยัง ${newParty}`);
  }
  logPartyActivity(newParty, codename, `เข้าร่วมปาร์ตี้ ${newParty}`, `จาก ${oldParty}`);

  ui.alert(`✅ ย้าย ${codename} ไปปาร์ตี้ ${newParty} สำเร็จ`);
  logAdminAction("ย้ายปาร์ตี้", `${codename} (${phone}): ${oldParty} → ${newParty}`, admin);
  sortAndHighlightPartyTracker();
}




// ✅ จัดเรียง Party Tracker และเน้นสีตามชื่อปาร์ตี้
function sortAndHighlightPartyTracker() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Party Tracker");
  const range = sheet.getDataRange();
  const values = range.getValues();
  if (values.length <= 1) return;

  const headers = values[0];
  const data = values.slice(1);
  data.sort((a, b) => a[0].localeCompare(b[0]));
  sheet.getRange(2, 1, data.length, data[0].length).setValues(data);
  sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).setBackground(null);

  let currentParty = "";
  let currentColor = "";
  for (let i = 0; i < data.length; i++) {
    const partyName = data[i][0];
    if (partyName !== currentParty) {
      currentParty = partyName;
      currentColor = getRandomPastelHex();
    }
    sheet.getRange(i + 2, 1, 1, data[0].length).setBackground(currentColor);
  }
}

function getRandomPastelHex() {
  const r = Math.floor((Math.random() * 127) + 127);
  const g = Math.floor((Math.random() * 127) + 127);
  const b = Math.floor((Math.random() * 127) + 127);
  return rgbToHex(r, g, b);
}

function rgbToHex(r, g, b) {
  return "#" + [r, g, b].map(x => {
    const hex = x.toString(16);
    return hex.length === 1 ? "0" + hex : hex;
  }).join("");
}

// ✅ เพิ่ม EXP ให้คนเดียวจากกิจกรรม
function addExpFromActivity() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const activitySheet = ss.getSheetByName("Activity List");
  const partySheet = ss.getSheetByName("Party");
  const partyLogSheet = ss.getSheetByName("Party Log");
  const adminPrompt = ui.prompt("ชื่อแอดมิน", "กรุณากรอกชื่อแอดมิน (สำหรับบันทึก log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();


  const activityData = activitySheet.getRange(2, 1, activitySheet.getLastRow() - 1, 2).getValues();
  const activityList = activityData.map((row, i) => `${i + 1}. ${row[0]} (${row[1]} EXP)`).join("\n");
  const activityPrompt = ui.prompt("เลือกกิจกรรม (พิมพ์เลข)", `เลือกกิจกรรม:\n\n${activityList}`, ui.ButtonSet.OK_CANCEL);
  if (activityPrompt.getSelectedButton() !== ui.Button.OK) return;
  const activityIndex = Number(activityPrompt.getResponseText().trim()) - 1;
  if (isNaN(activityIndex) || activityIndex < 0 || activityIndex >= activityData.length) {
    ui.alert("❌ เลือกกิจกรรมไม่ถูกต้อง");
    return;
  }
  const [activityName, exp] = activityData[activityIndex];

  const phonePrompt = ui.prompt("กรอกเบอร์โทร", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = normalizePhone(phonePrompt.getResponseText().trim());
  if (!validatePhoneOrAlert(phone, ui)) return;

  const dashData = dashSheet.getDataRange().getValues();
  let codename = "";
  let rowIndex = -1;
  for (let i = 1; i < dashData.length; i++) {
    const dashPhone = normalizePhone(dashData[i][1]);
    if (dashPhone === phone) {
      codename = dashData[i][2];
      rowIndex = i + 1;
      break;
    }
  }

  if (!codename) {
    ui.alert("❌ ไม่พบเบอร์นี้ในระบบ");
    return;
  }

  const currentExp = Number(dashSheet.getRange(rowIndex, 5).getValue());
  dashSheet.getRange(rowIndex, 5).setValue(currentExp + Number(exp));
  logExp(phone, activityName, exp);

  const partyPointActivities = {
    "มาคลับ": 1, "มายิม": 1, "แข่งครบ 2 รอบ": 2,
    "ได้ที่ 1 ยิม": 2, "ได้ที่ 2 ยิม": 1, "ซื้อของครบ 300": 1
  };

  const partyName = dashSheet.getRange(rowIndex, 6).getValue();
  const partyGain = partyPointActivities[activityName];

  if (partyName && partyGain) {
    const partyData = partySheet.getDataRange().getValues();
    for (let j = 1; j < partyData.length; j++) {
      if (partyData[j][0] === partyName) {
        const currentPoint = Number(partySheet.getRange(j + 1, 3).getValue());
        partySheet.getRange(j + 1, 3).setValue(currentPoint + partyGain);
        partyLogSheet.appendRow([
          new Date(), partyName, codename, activityName, partyGain,
          `เพิ่มอัตโนมัติจากกิจกรรม (${activityName})`
        ]);
        break;
      }
    }
  }

  ui.alert(`✅ เพิ่ม ${exp} EXP ให้ ${codename} (${phone}) เรียบร้อยแล้ว`);
  logAdminAction("เพิ่ม EXP จากกิจกรรม", `ให้ ${codename} (${phone}) | ${activityName} +${exp}`, admin);
  updateRanks();
  updateLeaderboard();
}

// ✅ เพิ่ม EXP ให้หลายคนจากกิจกรรมเดียว
function addExpFromActivityBulk() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const activitySheet = ss.getSheetByName("Activity List");
  const expLogSheet = ss.getSheetByName("EXP Log");
  const partySheet = ss.getSheetByName("Party");
  const partyLogSheet = ss.getSheetByName("Party Log");
  const adminPrompt = ui.prompt("ชื่อแอดมิน", "กรุณากรอกชื่อแอดมิน (สำหรับบันทึก log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();


  const activityData = activitySheet.getRange(2, 1, activitySheet.getLastRow() - 1, 2).getValues();
  const activityList = activityData.map((row, i) => `${i + 1}. ${row[0]} (${row[1]} EXP)`).join("\n");

  const activityPrompt = ui.prompt("เลือกกิจกรรม (พิมพ์เลข)", `เลือกกิจกรรมจากรายการ:\n\n${activityList}`, ui.ButtonSet.OK_CANCEL);
  if (activityPrompt.getSelectedButton() !== ui.Button.OK) return;
  const activityIndex = Number(activityPrompt.getResponseText().trim()) - 1;
  if (isNaN(activityIndex) || activityIndex < 0 || activityIndex >= activityData.length) {
    ui.alert("❌ เลือกกิจกรรมไม่ถูกต้อง");
    return;
  }

  const [activityName, exp] = activityData[activityIndex];

  const phonePrompt = ui.prompt("เพิ่ม EXP", "กรอกเบอร์โทร (เว้นวรรค , หรือขึ้นบรรทัดใหม่)", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phonesRaw = phonePrompt.getResponseText().trim();
  const rawPhones = phonesRaw.split(/\s|,|\n/).map(p => p.trim()).filter(p => p);
  const phones = rawPhones.map(normalizePhone);

  const dashData = dashSheet.getDataRange().getValues();
  const updated = [];

  const partyPointActivities = {
    "มาคลับ": 1, "มายิม": 1, "แข่งครบ 2 รอบ": 2,
    "ได้ที่ 1 ยิม": 2, "ได้ที่ 2 ยิม": 1, "ซื้อของครบ 300": 1
  };

  for (let phone of phones) {
    for (let i = 1; i < dashData.length; i++) {
      const dashPhone = normalizePhone(dashData[i][1]);
      if (dashPhone === phone) {
        const codename = dashData[i][2];
        const currentExp = Number(dashData[i][4]);
        dashSheet.getRange(i + 1, 5).setValue(currentExp + Number(exp));
        
        // ✅ Log EXP ด้วย format เบอร์
        const logRow = expLogSheet.getLastRow() + 1;
        expLogSheet.getRange(logRow, 1, 1, 5).setValues([[phone, codename, new Date(), activityName, exp]]);
        expLogSheet.getRange(logRow, 1).setNumberFormat("@");

        updated.push(codename);

        const partyName = dashData[i][5];
        const partyGain = partyPointActivities[activityName];
        if (partyName && partyGain) {
          const partyData = partySheet.getDataRange().getValues();
          for (let j = 1; j < partyData.length; j++) {
            if (partyData[j][0] === partyName) {
              const currentPoint = Number(partyData[j][2]);
              partySheet.getRange(j + 1, 3).setValue(currentPoint + partyGain);
              partyLogSheet.appendRow([
                new Date(), partyName, codename, activityName, partyGain,
                `เพิ่มอัตโนมัติจากกิจกรรม (${activityName})`
              ]);
              break;
            }
          }
        }
        break;
      }
    }
  }

  ui.alert(`✅ เพิ่ม EXP สำเร็จให้กับ: \n${updated.join("\n")}`);
  logAdminAction("เพิ่ม EXP หลายคน", `${phones.length} คน | ${activityName} +${exp}`, admin);
  updateRanks();
  updateLeaderboard();
}


// ✅ เพิ่ม EXP แบบ manual
function manualAddExp() {
  
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const logSheet = ss.getSheetByName("EXP Log");
  const adminPrompt = ui.prompt("ชื่อแอดมิน", "กรุณากรอกชื่อแอดมิน (สำหรับบันทึก log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();
  const phonePrompt = ui.prompt("เพิ่ม EXP", "กรอกเบอร์โทร", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = normalizePhone(phonePrompt.getResponseText().trim());

  const dashData = dashSheet.getDataRange().getValues();
  const memberIndex = dashData.findIndex(row => normalizePhone(row[1]) === phone);
  if (memberIndex === -1) return ui.alert("❌ ไม่พบเบอร์นี้ในระบบ");

  const codename = dashData[memberIndex][2];

  const expPrompt = ui.prompt("เพิ่ม EXP", `กรอกจำนวน EXP สำหรับ ${codename}`, ui.ButtonSet.OK_CANCEL);
  if (expPrompt.getSelectedButton() !== ui.Button.OK) return;
  const exp = Number(expPrompt.getResponseText().trim());
  if (isNaN(exp)) return ui.alert("❌ กรอกจำนวน EXP ไม่ถูกต้อง");

  const currentExp = Number(dashData[memberIndex][4]);
  dashSheet.getRange(memberIndex + 1, 5).setValue(currentExp + exp);

  // ✅ log EXP ด้วย format เบอร์
  const row = logSheet.getLastRow() + 1;
  logSheet.getRange(row, 1, 1, 5).setValues([[phone, codename, new Date(), "เพิ่มด้วยตนเอง", exp]]);
  logSheet.getRange(row, 1).setNumberFormat("@");

  ui.alert(`✅ เพิ่ม ${exp} EXP ให้ ${codename} แล้ว`);
  logAdminAction("เพิ่ม EXP (Manual)", `ให้ ${codename} (${phone}) +${exp}`, admin);
  updateRanks();
  updateLeaderboard();
}


// ✅ เพิ่ม Party Point แบบ manual พร้อม Log
function manualAddPartyPoint() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const partySheet = ss.getSheetByName("Party");
  const partyLogSheet = ss.getSheetByName("Party Log");
  const adminPrompt = ui.prompt("ชื่อแอดมิน", "กรุณากรอกชื่อแอดมิน (สำหรับบันทึก log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();


  const phonePrompt = ui.prompt("เพิ่ม Party Point", "กรอกเบอร์สมาชิก", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = normalizePhone(phonePrompt.getResponseText().trim());

  const dashData = dashSheet.getDataRange().getValues();
  const memberIndex = dashData.findIndex(row => normalizePhone(row[1]) === phone);
  if (memberIndex === -1) return ui.alert("❌ ไม่พบเบอร์นี้ในระบบ");

  const codename = dashData[memberIndex][2];
  const partyName = dashData[memberIndex][5];
  if (!partyName) return ui.alert("❌ สมาชิกนี้ไม่ได้อยู่ในปาร์ตี้");

  const pointPrompt = ui.prompt("จำนวน Party Point", `จะเพิ่มให้ปาร์ตี้ ${partyName} กี่แต้ม?`, ui.ButtonSet.OK_CANCEL);
  if (pointPrompt.getSelectedButton() !== ui.Button.OK) return;
  const point = Number(pointPrompt.getResponseText().trim());
  if (isNaN(point)) return ui.alert("❌ กรอกจำนวนแต้มไม่ถูกต้อง");

  const reasonPrompt = ui.prompt("ระบุเหตุผล", "กรอกคำอธิบายหรือชื่อกิจกรรม", ui.ButtonSet.OK_CANCEL);
  if (reasonPrompt.getSelectedButton() !== ui.Button.OK) return;
  const reason = reasonPrompt.getResponseText().trim();

  const partyData = partySheet.getDataRange().getValues();
  const partyIndex = partyData.findIndex(row => row[0] === partyName);
  if (partyIndex === -1) return ui.alert("❌ ไม่พบปาร์ตี้นี้ในระบบ");

  const currentPoint = Number(partyData[partyIndex][2]);
  partySheet.getRange(partyIndex + 1, 3).setValue(currentPoint + point);

  // ✅ log ลง Party Log ด้วย setValues + setNumberFormat
  const row = partyLogSheet.getLastRow() + 1;
  partyLogSheet.getRange(row, 1, 1, 6).setValues([
    [new Date(), partyName, codename, reason, point, "เพิ่มด้วยตนเอง"]
  ]);
  partyLogSheet.getRange(row, 3).setNumberFormat("@");

  logAdminAction("เพิ่ม Party Point", `ให้ปาร์ตี้ ${partyName} +${point} (${codename}) | ${reason}`, admin);
  ui.alert(`✅ เพิ่ม Party Point สำเร็จให้ปาร์ตี้ ${partyName}`);
}





function disbandParty() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const partySheet = ss.getSheetByName("Party");
  const trackerSheet = ss.getSheetByName("Party Tracker");
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const partyLogSheet = ss.getSheetByName("Party Log");
  const adminPrompt = ui.prompt("ชื่อแอดมิน", "กรุณากรอกชื่อแอดมิน (สำหรับบันทึก log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();


  // 🔽 สร้าง Dropdown รายชื่อปาร์ตี้
  const partyNames = partySheet.getRange(2, 1, partySheet.getLastRow() - 1).getValues().flat();
  if (partyNames.length === 0) {
    ui.alert("❌ ไม่มีปาร์ตี้ให้ยุบ");
    return;
  }

  const list = partyNames.map((p, i) => `${i + 1}. ${p}`).join("\n");
  const prompt = ui.prompt("ยุบปาร์ตี้", `กรุณาเลือกปาร์ตี้โดยพิมพ์หมายเลข:\n\n${list}`, ui.ButtonSet.OK_CANCEL);
  if (prompt.getSelectedButton() !== ui.Button.OK) return;

  const index = Number(prompt.getResponseText().trim()) - 1;
  if (isNaN(index) || index < 0 || index >= partyNames.length) {
    ui.alert("❌ เลือกไม่ถูกต้อง");
    return;
  }

  const partyName = partyNames[index];

  // ⚠️ ยืนยันก่อนยุบ
  const confirm = ui.alert("⚠️ ยืนยันการยุบปาร์ตี้", `คุณแน่ใจหรือไม่ว่าต้องการยุบปาร์ตี้ "${partyName}"?\n\nสมาชิกทั้งหมดจะถูกลบออกจากปาร์ตี้นี้`, ui.ButtonSet.YES_NO);
  if (confirm !== ui.Button.YES) return;

  // ✅ ลบจากชีท Party
  const partyData = partySheet.getDataRange().getValues();
  for (let i = 1; i < partyData.length; i++) {
    if (partyData[i][0] === partyName) {
      partySheet.deleteRow(i + 1);
      break;
    }
  }

  // ✅ ค้นหาสมาชิกทั้งหมดในปาร์ตี้
  const trackerData = trackerSheet.getDataRange().getValues();
  const members = trackerData.filter(row => row[0] === partyName);

  // ✅ ลบจาก Party Tracker (จากล่างขึ้นบน)
  for (let i = trackerData.length - 1; i >= 1; i--) {
    if (trackerData[i][0] === partyName) {
      trackerSheet.deleteRow(i + 1);
    }
  }

  // ✅ ลบจาก Member Dashboard
  const dashData = dashSheet.getDataRange().getValues();
  for (let i = 1; i < dashData.length; i++) {
    if (dashData[i][5] === partyName) {
      dashSheet.getRange(i + 1, 6).setValue(""); // ลบชื่อปาร์ตี้ออก
    }
  }

  // ✅ บันทึก log: ปาร์ตี้ถูกยุบ
  partyLogSheet.appendRow([
    new Date(),
    partyName,
    "System",
    "ปาร์ตี้ถูกยุบ",
    "",
    "ลบโดยแอดมินผ่านเมนู"
  ]);

  updateLeaderboard();
  sortAndHighlightPartyTracker();
  logAdminAction("ยุบปาร์ตี้", `ชื่อ: ${partyName}`, admin);
  ui.alert(`✅ ยุบปาร์ตี้ "${partyName}" และลบสมาชิกออกเรียบร้อยแล้ว`);
}


function undoLastExpSingle() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  const dash = ss.getSheetByName("Member Dashboard");
  const log = ss.getSheetByName("EXP Log");

  const adminPrompt = ui.prompt("ชื่อแอดมิน", "กรุณากรอกชื่อแอดมิน (สำหรับบันทึก log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  const phonePrompt = ui.prompt("ย้อนการเพิ่ม EXP", "กรอกเบอร์โทรของสมาชิก", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = normalizePhone(phonePrompt.getResponseText().trim());

  const logData = log.getDataRange().getValues();
  for (let i = logData.length - 1; i >= 1; i--) {
    if (normalizePhone(logData[i][0]) === phone) {
      const codename = logData[i][1];
      const activity = logData[i][3];
      const exp = Number(logData[i][4]);
      if (isNaN(exp)) {
        ui.alert("❌ ไม่พบข้อมูล EXP ล่าสุด");
        return;
      }

      const dashData = dash.getDataRange().getValues();
      for (let j = 1; j < dashData.length; j++) {
        if (normalizePhone(dashData[j][1]) === phone) {
          const currentExp = Number(dashData[j][4]);
          dash.getRange(j + 1, 5).setValue(currentExp - exp);

          const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");

          // ✅ log แบบล็อก format เบอร์โทรก่อนเขียน
          const rowIndex = log.getLastRow() + 1;
          log.getRange(rowIndex, 1).setNumberFormat("@"); // format เบอร์ก่อน
          log.getRange(rowIndex, 1, 1, 5).setValues([[phone, codename, now, `UNDO: ${activity}`, -exp]]);

          ui.alert(`↩️ ย้อน ${exp} EXP จากกิจกรรม "${activity}" เรียบร้อยแล้ว`);
          logAdminAction("UNDO EXP ล่าสุด (1 คน)", `เบอร์: ${phone} | -${exp} (${activity})`, admin);
          updateRanks();
          updateLeaderboard();
          return;
        }
      }
    }
  }

  ui.alert("❌ ไม่พบข้อมูล EXP ล่าสุดของเบอร์นี้");
}




function undoLastExpBulk() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  const dash = ss.getSheetByName("Member Dashboard");
  const log = ss.getSheetByName("EXP Log");
  const adminPrompt = ui.prompt("ชื่อแอดมิน", "กรุณากรอกชื่อแอดมิน (สำหรับบันทึก log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  const phonePrompt = ui.prompt("ย้อน EXP (หลายคน)", "กรอกเบอร์โทร (เว้นวรรค , หรือขึ้นบรรทัดใหม่)", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phonesRaw = phonePrompt.getResponseText().trim();
  const rawPhones = phonesRaw.split(/\s|,|\n/).map(p => p.trim()).filter(p => p);
  const phones = rawPhones.map(normalizePhone);

  const logData = log.getDataRange().getValues();
  const dashData = dash.getDataRange().getValues();
  let count = 0;

  for (let phone of phones) {
    for (let i = logData.length - 1; i >= 1; i--) {
      if (normalizePhone(logData[i][0]) === phone) {
        const codename = logData[i][1];
        const activity = logData[i][3];
        const exp = Number(logData[i][4]);
        if (isNaN(exp)) break;

        for (let j = 1; j < dashData.length; j++) {
          if (normalizePhone(dashData[j][1]) === phone) {
            const currentExp = Number(dashData[j][4]);
            dash.getRange(j + 1, 5).setValue(currentExp - exp);

            const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");
            log.appendRow([phone, codename, now, `UNDO: ${activity}`, -exp]);
            log.getRange(log.getLastRow(), 1).setNumberFormat("@");

            count++;
            break;
          }
        }
        break;
      }
    }
  }

  if (count > 0) {
    ui.alert(`↩️ ย้อน EXP สำเร็จให้ ${count} คน`);
    logAdminAction("UNDO EXP ล่าสุด (หลายคน)", `${count} คน`, admin);
    updateRanks();
    updateLeaderboard();
  } else {
    ui.alert("❌ ไม่พบข้อมูล EXP ล่าสุดของเบอร์ที่ให้มา");
  }
}

// ✅ ฟังก์ชันสำหรับ Web App - ส่ง Quest List เป็น JSON
function getQuestList() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Quest List");
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const quests = [];

  for (let i = 1; i < data.length; i++) {
     // แก้ getQuestList() ตรงนี้
      if (data[i][7] !== true) continue; // index 7 = คอลัมน์ H (checkbox)
    const quest = {};
    headers.forEach((key, index) => {
      quest[key] = data[i][index];
    });
    quests.push(quest);
  }
  return ContentService.createTextOutput(JSON.stringify(quests)).setMimeType(ContentService.MimeType.JSON);
}

// ✅ ฟังก์ชัน submitQuest(phone, questId)
function submitQuest(e) {
  const phone = normalizePhone(e.parameter.phone);
  const questId = e.parameter.questId;
  const codename = getCodenameFromPhone(phone);

  const questSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Quest List");
  const logSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Quest Log");
  const questData = questSheet.getDataRange().getValues();
  let questName = "";

  for (let i = 1; i < questData.length; i++) {
    if (questData[i][0] === questId) {
      questName = questData[i][1];
      break;
    }
  }

  if (!questName) {
    return ContentService.createTextOutput("❌ ไม่พบเควสนี้");
  }

  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm");
  logSheet.appendRow([now, phone, codename, questId, questName, "รอตรวจ", "", "Web"]);
  return ContentService.createTextOutput("✅ ส่งเควสเรียบร้อยแล้ว");
}

// ✅ helper: หา codename จากเบอร์
function getCodenameFromPhone(phone) {
  const dashSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = dashSheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (normalizePhone(data[i][1]) === normalizePhone(phone)) {
      return data[i][2];
    }
  }
  return "ไม่พบชื่อ";
}

function doGet(e) {
  // Route for the admin panel
  if (e.parameter.page === 'admin') {
    return showAdminPage();
  }

  const func = e?.parameter?.func;
  if (func === "getLeaderboard") return getLeaderboardData();
  if (func === "getQuestList") return getQuestList();
  if (func === "submitQuest") return submitQuest(e);
  if (func === "getFeaturedQuestsRandom") return getFeaturedQuestsRandom();
  if (func === "getQuestActivityLog") return getQuestActivityLog();
  if (func === "submitQuestToLog") return submitQuestToLog(e);
  if (func === "getCodename") return getCodename(e);
  if (func === "getCodenameList") return getCodenameList();
  if (func === "getChallengeList") return getChallengeList();
  if (func === "getPartyByPhone") return getPartyByPhone(e); // Added for completeness
  return HtmlService.createHtmlOutput("<p>✅ Up Level Guild System Web App</p>");
}

function doPost(e) {
  const func = e?.parameter?.func;
  if (func === "submitQuest") return submitQuest(e);
  if (func === "submitChallengeRequest") return submitChallengeRequest(e);
  if (func === "acceptChallenge") return acceptChallenge(e);
  if (func === "updateChallengeStatus") return updateChallengeStatus(e);
  return ContentService.createTextOutput("❌ Invalid Request").setMimeType(ContentService.MimeType.TEXT);
}


function getLeaderboardData() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Leaderboard");
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const result = data.slice(1).map(row => {
    const obj = {};
    headers.forEach((h, i) => obj[h] = row[i]);
    return obj;
  });

  return ContentService.createTextOutput(JSON.stringify(result))
    .setMimeType(ContentService.MimeType.JSON);
}


function getFeaturedQuestsRandom() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Quest List");
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const activeQuests = [];

  for (let i = 1; i < data.length; i++) {
    if (data[i][6] === "เปิดใช้งาน") {
      const quest = {};
      headers.forEach((key, index) => quest[key] = data[i][index]);
      activeQuests.push(quest);
    }
  }

  // สุ่ม 3 เควส
  const shuffled = activeQuests.sort(() => 0.5 - Math.random());
  const selected = shuffled.slice(0, 3);

  return ContentService.createTextOutput(JSON.stringify(selected))
    .setMimeType(ContentService.MimeType.JSON);
}

function getQuestActivityLog() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("EXP Log");
  const data = sheet.getDataRange().getValues();
  const result = [];

  for (let i = data.length - 1; i > 0 && result.length < 5; i--) {
    const activity = data[i][3];
    if (typeof activity === 'string' && activity.startsWith("ทำเควส")) {
      const codename = data[i][1];
      const questName = activity.replace("ทำเควส: ", "").trim();
      result.push({ Codename: codename, QuestName: questName });
    }
  }

  return ContentService.createTextOutput(JSON.stringify(result))
    .setMimeType(ContentService.MimeType.JSON);
}


function submitQuestToLog(e) {
  const phone = normalizePhone(e.parameter.phone);
  const questId = e.parameter.questId;
  const codename = getCodenameFromPhone(phone);

  const questSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Quest List");
  const questData = questSheet.getDataRange().getValues();
  let questName = "";

  for (let i = 1; i < questData.length; i++) {
    if (questData[i][0] === questId) {
      questName = questData[i][1];
        break;
      }
    }

  if (!questName) {
    return ContentService.createTextOutput("❌ ไม่พบ Quest นี้").setMimeType(ContentService.MimeType.TEXT);
  }

  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm");
  const logSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Quest Log");

  const newRow = [now, "", codename, questId, questName, "รอตรวจ", "", "Web"];
  const rowIndex = logSheet.getLastRow() + 1;
  logSheet.getRange(rowIndex, 1, 1, newRow.length).setValues([newRow]);

  // ✅ ใส่เบอร์แยก พร้อมล็อกฟอร์แมต
  logSheet.getRange(rowIndex, 2).setValue(phone);
  logSheet.getRange(rowIndex, 2).setNumberFormat("@");

  return ContentService.createTextOutput("✅ ส่งเควสสำเร็จแล้ว").setMimeType(ContentService.MimeType.TEXT);
}




function approveQuestByPhone() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const logSheet = ss.getSheetByName("Quest Log");
  const questSheet = ss.getSheetByName("Quest List");
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const expLogSheet = ss.getSheetByName("EXP Log");

  const adminPrompt = ui.prompt("อนุมัติเควส", "กรุณากรอกชื่อแอดมิน:", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  const phonePrompt = ui.prompt("กรอกเบอร์", "เบอร์โทรของสมาชิกที่ต้องการอนุมัติเควส", ui.ButtonSet.OK_CANCEL);
  if (phonePrompt.getSelectedButton() !== ui.Button.OK) return;
  const phone = normalizePhone(phonePrompt.getResponseText().trim());

  const dashData = dashSheet.getDataRange().getValues();
  const dashRow = dashData.find(row => normalizePhone(row[1]) === phone);
  const codename = dashRow ? dashRow[2] : "ไม่พบชื่อ";

  const logData = logSheet.getDataRange().getValues();
  const pendingQuests = [];
  for (let i = 1; i < logData.length; i++) {
    if (normalizePhone(logData[i][1]) === phone && logData[i][5] === "รอตรวจ") {
      pendingQuests.push({ row: i + 1, name: logData[i][4], id: logData[i][3] });
    }
  }

  if (pendingQuests.length === 0) {
    ui.alert("❌ ไม่พบเควสที่รอตรวจสำหรับเบอร์นี้");
    return;
  }

  let listText = pendingQuests.map((q, i) => `${i + 1}. ${q.name}`).join("\n");
  const pickPrompt = ui.prompt("เลือกเควส", `สมาชิกคนนี้ส่งเควสเข้ามา:\n\n${listText}\n\nพิมพ์เลขที่ต้องการอนุมัติ`, ui.ButtonSet.OK_CANCEL);
  if (pickPrompt.getSelectedButton() !== ui.Button.OK) return;
  const index = Number(pickPrompt.getResponseText().trim()) - 1;
  if (isNaN(index) || index < 0 || index >= pendingQuests.length) {
    ui.alert("❌ เลือกไม่ถูกต้อง");
    return;
  }

  const selectedQuest = pendingQuests[index];

  const questData = questSheet.getDataRange().getValues();
  const questInfo = questData.find(row => row[0] === selectedQuest.id);
  if (!questInfo) {
    ui.alert("❌ ไม่พบข้อมูลเควสใน Quest List");
    return;
  }

  const exp = Number(questInfo[3]) || 0;
  const pp = Number(questInfo[4]) || 0;

  for (let i = 1; i < dashData.length; i++) {
    if (normalizePhone(dashData[i][1]) === phone) {
      const currentExp = Number(dashData[i][4]);
      dashSheet.getRange(i + 1, 5).setValue(currentExp + exp);
        break;
      }
    }

  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");
  expLogSheet.appendRow([phone, codename, now, `ทำเควส: ${selectedQuest.name}`, exp]);
  expLogSheet.getRange(expLogSheet.getLastRow(), 1).setNumberFormat("@");

  logAdminAction("อนุมัติเควส", `${codename} (${phone}) → ${selectedQuest.name} +${exp}`, admin);

  logSheet.getRange(selectedQuest.row, 6).setValue("เสร็จสิ้น");
  logSheet.getRange(selectedQuest.row, 8).setValue(admin);

  ui.alert(`✅ อนุมัติเควส "${selectedQuest.name}" ให้ ${codename} เรียบร้อยแล้ว`);
  updateRanks();
  updateLeaderboard();
}


function getCodenameFromPhone(phone) {
  const dashSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = dashSheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (normalizePhone(data[i][1]) === normalizePhone(phone)) {
      return data[i][2]; // codename อยู่คอลัมน์ 3
    }
  }
  return "ไม่พบชื่อ";
}

function getCodename(e) {
  const phone = normalizePhone(e.parameter.phone);
  return ContentService.createTextOutput(getCodenameFromPhone(phone)).setMimeType(ContentService.MimeType.TEXT);
}

function getCodenameList() {
      const dashSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = dashSheet.getDataRange().getValues();
  const codenames = data.slice(1).map(row => row[2]).filter(name => name);
  return ContentService.createTextOutput(JSON.stringify(codenames)).setMimeType(ContentService.MimeType.JSON);
}

function submitChallengeRequest(e) {
  const logSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Challenge Log");
  const challengeSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Challenge");
  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");

  if (!e || !e.postData) {
    logSheet.appendRow([now, "❌ ไม่มี postData", "", "", ""]);
    return ContentService.createTextOutput("❌ ไม่พบข้อมูลที่ส่งมา");
  }

  const data = JSON.parse(e.postData.contents);
  const phoneRaw = data.phone;
  const phone = normalizePhone(phoneRaw);
  const codename = getCodenameFromPhone(phone);
  const { type, target, mode, wager, title } = data;
  const challengeTitle = title && title.trim() ? title.trim() : generateRandomChallengeTitle(codename);

  const uuid = new Date().getTime().toString(); // 🆕 ใช้ timestamp เป็น ID

  const values = [
    Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm"),
    phone,
    codename,
    type,
    target,
    mode,
    wager,
    challengeTitle,
    "รออนุมัติ",
    uuid  // 🆕 เพิ่ม ID อัตโนมัติ
  ];

  try {
    const newRow = challengeSheet.getLastRow() + 1;
    challengeSheet.getRange(newRow, 1, 1, values.length).setValues([values]);
    challengeSheet.getRange(newRow, 2).setNumberFormat("@");

    logSheet.appendRow([now, "✅ ส่งคำท้าเรียบร้อย", phone, codename, challengeTitle]);

    return ContentService.createTextOutput("✅ ส่งคำท้าเรียบร้อยแล้ว รอแอดมินอนุมัติ")
      .setMimeType(ContentService.MimeType.TEXT);
  } catch (err) {
    logSheet.appendRow([now, "❌ ERROR", phone, codename, err.message]);
    return ContentService.createTextOutput("❌ เกิดข้อผิดพลาดขณะส่งคำท้า: " + err.message)
      .setMimeType(ContentService.MimeType.TEXT);
  }
}






function fixChallengePhoneColumn() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Challenge");
  const phones = sheet.getRange(2, 2, sheet.getLastRow() - 1).getValues();
  for (let i = 0; i < phones.length; i++) {
    const raw = String(phones[i][0]).trim();
    if (raw.length === 9 && !raw.startsWith("0")) {
      sheet.getRange(i + 2, 2).setNumberFormat("@");
      sheet.getRange(i + 2, 2).setValue("0" + raw);
    }
  }
}




function generateRandomChallengeTitle(codename) {
  const formats = [
    "ศึกเดือดของ " + codename,
    "ท้าแบบไม่เกรงใจ!",
    "ขอแค่ได้แข่ง!",
    "ฝึกฝีมือกับใครสักคน",
    "เวทีนี้เพื่อเกียรติยศ!",
    "ใครจะอยู่ ใครจะไป"
  ];
  return formats[Math.floor(Math.random() * formats.length)];
}





function getChallengeList() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Challenge");
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const results = [];

  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    // แสดงคำท้าที่มีสถานะ "อนุมัติ" หรือ "พร้อมดวล"
    if (row[headers.indexOf("สถานะคำท้า")] === "อนุมัติ" || 
        row[headers.indexOf("สถานะคำท้า")] === "พร้อมดวล") {
      const item = {};
      headers.forEach((key, index) => item[key] = row[index]);
      results.push(item);
    }
  }

  return ContentService.createTextOutput(JSON.stringify(results))
    .setMimeType(ContentService.MimeType.JSON);
}

function approveChallenge() {
  const ui = SpreadsheetApp.getUi();
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Challenge");
  const data = sheet.getDataRange().getValues();

  const pending = [];
  for (let i = 1; i < data.length; i++) {
    if (data[i][8] === "รออนุมัติ") {
      pending.push({ index: i + 1, title: data[i][7], codename: data[i][2] });
    }
  }

  if (pending.length === 0) {
    ui.alert("ไม่มีคำท้าที่รออนุมัติ");
    return;
  }

  const list = pending.map((p, i) => `${i + 1}. ${p.codename} - ${p.title}`).join("\n");
  const prompt = ui.prompt("อนุมัติคำท้า", `เลือกคำท้าโดยพิมพ์หมายเลข:\n\n${list}`, ui.ButtonSet.OK_CANCEL);
  if (prompt.getSelectedButton() !== ui.Button.OK) return;
  const choice = Number(prompt.getResponseText().trim()) - 1;
  if (isNaN(choice) || choice < 0 || choice >= pending.length) {
    ui.alert("❌ เลือกไม่ถูกต้อง");
    return;
  }

  const row = pending[choice].index;
  sheet.getRange(row, 9).setValue("อนุมัติ");
  ui.alert(`✅ อนุมัติคำท้าของ ${pending[choice].codename} เรียบร้อยแล้ว`);
}


function acceptChallenge(e) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("Challenge");
  const data = sheet.getDataRange().getValues();
  const headers = data[0];

  const idCol = headers.indexOf("ID");
  const typeCol = headers.indexOf("ประเภท");
  const targetCol = headers.indexOf("ผู้ถูกท้า");
  const acceptCol = headers.indexOf("ผู้ตอบรับ");
  const statusCol = headers.indexOf("สถานะคำท้า");

  const { phone, fullname, id, type, target } = JSON.parse(e.postData.contents);
  const codename = getCodenameByPhone(phone);
  const realname = getFullNameByPhone(phone);

  if (!codename || !realname || realname.trim() !== fullname.trim()) {
    return ContentService.createTextOutput("❌ ไม่พบข้อมูลสมาชิก หรือชื่อไม่ตรงกับที่ลงทะเบียน");
  }

  const rowIndex = data.findIndex(r => r[idCol] == id);
  if (rowIndex === -1) return ContentService.createTextOutput("❌ ไม่พบคำท้าที่ระบุ");

  const row = data[rowIndex];
  if (row[acceptCol]) return ContentService.createTextOutput("❌ มีผู้รับคำท้านี้แล้ว");

  if (row[typeCol] === "direct" && row[targetCol] !== codename) {
    return ContentService.createTextOutput("❌ คุณไม่ใช่ผู้ถูกท้าในคำท้านี้");
  }

  // บันทึกผู้ตอบรับ
  sheet.getRange(rowIndex + 1, acceptCol + 1).setValue(codename);

  // ถ้าเป็น open → ตั้งผู้ถูกท้าเป็นผู้ตอบรับเลย
  if (row[typeCol] === "open") {
    sheet.getRange(rowIndex + 1, targetCol + 1).setValue(codename);
  }

  // ✅ ตั้งสถานะเป็น "พร้อมดวล" อัตโนมัติ
  if (statusCol !== -1) {
    sheet.getRange(rowIndex + 1, statusCol + 1).setValue("พร้อมดวล");
  }

  return ContentService.createTextOutput("✅ รับคำท้าสำเร็จ พร้อมดวล !!");
}



function recordChallengeResult() {
  const ui = SpreadsheetApp.getUi();
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Challenge");
  const data = sheet.getDataRange().getValues();
  const headers = data[0];

  const idIndex = headers.indexOf("ID");
  const phoneIndex = headers.indexOf("เบอร์โทร");
  const codenameIndex = headers.indexOf("Codename");
  const targetIndex = headers.indexOf("ผู้ถูกท้า");
  const acceptIndex = headers.indexOf("ผู้ตอบรับ");
  const statusIndex = headers.indexOf("สถานะคำท้า");

  // 🔍 คำท้าที่อนุมัติแล้ว
  const approvedRows = data.slice(1).filter(r => r[statusIndex] === "อนุมัติ");
  if (approvedRows.length === 0) return ui.alert("❌ ไม่มีคำท้าที่อนุมัติ");

  const challengeOptions = approvedRows.map(r =>
    `${r[idIndex]} | ${r[codenameIndex]} vs ${r[acceptIndex]}`
  );
  const choicePrompt = ui.prompt(
    "📌 เลือกคำท้าที่ต้องการบันทึกผล",
    challengeOptions.join("\n") + "\n\nกรอก ID ที่ต้องการ (ตัวเลข):",
    ui.ButtonSet.OK_CANCEL
  );
  if (choicePrompt.getSelectedButton() !== ui.Button.OK) return;
  const selectedId = choicePrompt.getResponseText().trim();

  const rowIndex = data.findIndex(r => r[idIndex] == selectedId);
  if (rowIndex === -1) return ui.alert("❌ ไม่พบคำท้าด้วย ID นี้");

  const row = data[rowIndex];
  const creatorPhone = normalizePhone(row[phoneIndex]);
  const creatorCodename = row[codenameIndex];
  const acceptorCodename = row[acceptIndex];
  const targetCodename = row[targetIndex];

  if (!acceptorCodename) return ui.alert("❌ คำท้านี้ยังไม่มีผู้รับ");

  // 🔽 เลือกผู้ชนะ
  const winnerPrompt = ui.prompt(
    "🏆 ใครคือผู้ชนะ",
    `1. ${creatorCodename}\n2. ${acceptorCodename}\n\nกรอกชื่อ Codename ที่ชนะ`,
    ui.ButtonSet.OK_CANCEL
  );
  if (winnerPrompt.getSelectedButton() !== ui.Button.OK) return;
  const winnerCodename = winnerPrompt.getResponseText().trim();

  const winnerPhone = getPhoneByCodename(winnerCodename);
  const loserPhone = (winnerCodename === creatorCodename)
    ? getPhoneByCodename(acceptorCodename)
    : creatorPhone;

  // 🎁 กรอก EXP ที่เดิมพัน (optional)
  const wagerPrompt = ui.prompt(
    "🎁 EXP ที่เดิมพัน (ถ้ามี)",
    "เช่น 3 หรือ -2 (ถ้าไม่ใส่จะไม่มีผลเดิมพัน)", ui.ButtonSet.OK_CANCEL
  );
  if (wagerPrompt.getSelectedButton() !== ui.Button.OK) return;
  const expText = wagerPrompt.getResponseText().trim();
  const expAmount = expText ? parseInt(expText) : 0;

  // 🛠 อัปเดตสถานะ
  sheet.getRange(rowIndex + 1, statusIndex + 1).setValue("บันทึกผลแล้ว");

  // ✅ ให้ EXP & Party ทั้งคู่
  giveExpAndParty(creatorPhone, "ผลการท้าแข่ง", 1);
  giveExpAndParty(getPhoneByCodename(acceptorCodename), "ผลการท้าแข่ง", 1);

  // ➕➖ กรณีมีเดิมพัน EXP
  if (!isNaN(expAmount) && expAmount !== 0) {
    giveExp(winnerPhone, `ชนะเดิมพัน EXP`, expAmount);
    giveExp(loserPhone, `แพ้เดิมพัน EXP`, -expAmount);
  }

  ui.alert(`✅ บันทึกผลสำเร็จ: ${winnerCodename} ชนะ\n+1 EXP/Party ทั้งคู่${expAmount ? `\nเดิมพัน EXP: ${expAmount}` : ""}`);
}

function normalizePhone(phone) {
  phone = phone.replace(/\D/g, "");
  if (phone.length === 9 && !phone.startsWith("0")) return "0" + phone;
  return phone;
}

function getPhoneByCodename(codename) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = sheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (String(data[i][2]).toLowerCase().trim() === codename.toLowerCase().trim()) {
      return normalizePhone(data[i][1]);
    }
  }
  return "";
}

function getCodenameByPhone(phone) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = sheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (normalizePhone(data[i][1]) === normalizePhone(phone)) {
      return data[i][2];
    }
  }
  return "";
}

function giveExpAndParty(phone, note, exp = 1) {
  giveExp(phone, note, exp);
  givePartyPoint(phone, note, 1);
}

function giveExp(phone, note, amount) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("EXP Log");
  const time = new Date();
  const codename = getCodenameByPhone(phone);
  sheet.appendRow([phone, codename, time, note, amount]);
  sheet.getRange(sheet.getLastRow(), 1).setNumberFormat("@");
  updateRanks();
  updateLeaderboard();
}

function givePartyPoint(phone, note, amount) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Party Log");
  const time = new Date();
  const codename = getCodenameByPhone(phone);
  const partyName = getPartyByPhone(phone);
  
  sheet.appendRow([time, partyName, codename, note, amount, "เพิ่มจากระบบ"]);
  sheet.getRange(sheet.getLastRow(), 3).setNumberFormat("@");
  
  // อัปเดต Party Point ในชีท Party
  if (partyName) {
    const partySheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Party");
    const partyData = partySheet.getDataRange().getValues();
    for (let i = 1; i < partyData.length; i++) {
      if (partyData[i][0] === partyName) {
        const currentPoint = Number(partyData[i][2]) || 0;
        partySheet.getRange(i + 1, 3).setValue(currentPoint + amount);
        break;
      }
    }
  }
}

// ✅ helper: หาชื่อปาร์ตี้จากเบอร์โทร
function getPartyByPhone(phone) {
  const dashSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = dashSheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (normalizePhone(data[i][1]) === normalizePhone(phone)) {
      return data[i][5] || "";
    }
  }
  return "";
}

// เพิ่มฟังก์ชันเหล่านี้ต่อท้ายไฟล์ app script ของคุณ (หลังบรรทัดสุดท้าย)

// ฟังก์ชันอัพเดทสถานะคำท้า (สำหรับปุ่มแอดมินใน HTML)
function updateChallengeStatus(request) {
  try {
    const data = JSON.parse(request.postData.contents);
    const id = data.id;
    const status = data.status;
    
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Challenge");
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    const headers = values[0];
    
    const idIndex = headers.indexOf("ID");
    const statusIndex = headers.indexOf("สถานะคำท้า");
    
    // หาแถวที่มี ID ตรงกัน
    let rowIndex = -1;
    for (let i = 1; i < values.length; i++) {
      if (values[i][idIndex] == id) {
        rowIndex = i + 1;
        break;
      }
    }

    if (rowIndex === -1) {
      return ContentService.createTextOutput("❌ ไม่พบคำท้าที่มี ID นี้");
    }
    
    // อัพเดทสถานะ
    sheet.getRange(rowIndex, statusIndex + 1).setValue(status);
    
    return ContentService.createTextOutput("✅ อัพเดทสถานะเรียบร้อย");
    
  } catch (error) {
    return ContentService.createTextOutput("❌ เกิดข้อผิดพลาด: " + error.toString());
  }
}

// ฟังก์ชันช่วยเหลือ - หาชื่อเต็มจากเบอร์โทร
function getFullNameByPhone(phone) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = sheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (normalizePhone(data[i][1]) === normalizePhone(phone)) {
      return data[i][0]; // ชื่อเล่น
    }
  }
  return "";
}

/**
 * Handles the form submission event.
 * This function should be set as the "On form submit" trigger for the spreadsheet.
 * @param {Object} e The event object.
 */
function handleFormSubmit(e) {
  const lock = LockService.getScriptLock();
  if (!lock.tryLock(15000)) {
    console.log("Server is busy, submission for " + e.namedValues['เบอร์โทร'] + " will be processed later if needed, but the row is already in the sheet.");
    return;
  }

  try {
    const dbSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Database");
    const newRowRange = e.range;
    const newRowIndex = newRowRange.getRow();
    
    // --- Get data from the submitted form ---
    // Make sure the keys here EXACTLY match your Google Form question titles
    const codename = e.namedValues['Codename'][0].trim();
    const phone = normalizePhone(e.namedValues['เบอร์โทร'][0].trim());
    const rank = e.namedValues['Rank'][0].trim();
    const isPremium = e.namedValues['Premium?'][0] === 'Yes'; // Adjust 'Yes' if your form uses a different value
    const referrer = e.namedValues['เบอร์ผู้แนะนำ (ถ้ามี)'] ? normalizePhone(e.namedValues['เบอร์ผู้แนะนำ (ถ้ามี)'][0].trim()) : "";

    // --- Search for duplicates (excluding the newly added row) ---
    const dbData = dbSheet.getDataRange().getValues();
    let originalRowIndex = -1;

    for (let i = 1; i < dbData.length; i++) {
      // Skip the row that was just added
      if (i + 1 === newRowIndex) continue;
      
      if (normalizePhone(dbData[i][3]) === phone) { // Assuming phone is in column D (index 3)
        originalRowIndex = i + 1;
        break;
      }
    }

    if (originalRowIndex !== -1) {
      // --- DUPLICATE FOUND ---
      // 1. Update the original row with new data
      dbSheet.getRange(originalRowIndex, 1).setValue(new Date()); // Update timestamp
      dbSheet.getRange(originalRowIndex, 2).setValue(codename);   // Update Codename
      dbSheet.getRange(originalRowIndex, 5).setValue(rank);       // Update Rank
      
      // 2. CRITICAL: Delete the new row that the form just added
      dbSheet.deleteRow(newRowIndex);
      
      // 3. Update other sheets
      updateDashboardAndLeaderboardForExistingUser(phone, codename, rank);

    } else {
      // --- NEW MEMBER ---
      // The row is already in Member Database, just fill in other details
      const initialExp = isPremium ? 2 : 1;
      dbSheet.getRange(newRowIndex, 3).setValue("Member");
      dbSheet.getRange(newRowIndex, 6).setValue(initialExp);
      dbSheet.getRange(newRowIndex, 7).setValue(isPremium);
      dbSheet.getRange(newRowIndex, 8).setValue(referrer);
      
      // Add to other sheets
      const dashSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
      dashSheet.appendRow([new Date(), phone, codename, rank, initialExp, ""]);

      const lbSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Leaderboard");
      lbSheet.appendRow([new Date(), phone, codename, rank, initialExp, ""]);

      logExp(phone, "สมัครสมาชิก", initialExp);

      if (isPremium && referrer) {
        const referrerData = dbData.find(row => normalizePhone(row[3]) === referrer);
        if (referrerData) {
          logExp(referrer, "แนะนำเพื่อนสมัคร (Premium)", 2);
        }
      }
    }

    updateLeaderboard();

  } catch (err) {
    // Log error to know if something goes wrong
    console.error("handleFormSubmit Error: " + err.toString());
    console.error("Event Object: " + JSON.stringify(e));
  } finally {
    lock.releaseLock();
  }
}

// You can keep this helper function as it is still useful
function updateDashboardAndLeaderboardForExistingUser(phone, codename, rank) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const lbSheet = ss.getSheetByName("Leaderboard");
  
  // อัปเดต Member Dashboard
  const dashData = dashSheet.getDataRange().getValues();
  for (let i = 1; i < dashData.length; i++) {
    if (normalizePhone(dashData[i][1]) === phone) {
      dashSheet.getRange(i + 1, 3).setValue(codename); // อัปเดต Codename
      dashSheet.getRange(i + 1, 4).setValue(rank);     // อัปเดต Rank
      break;
    }
  }
  
  // อัปเดต Leaderboard
  const lbData = lbSheet.getDataRange().getValues();
  for (let i = 1; i < lbData.length; i++) {
    if (normalizePhone(lbData[i][1]) === phone) {
      lbSheet.getRange(i + 1, 3).setValue(codename); // อัปเดต Codename
      lbSheet.getRange(i + 1, 4).setValue(rank);     // อัปเดต Rank
      break;
    }
  }
  
  updateRanks();
  updateLeaderboard();
}

// ✅ ลบข้อมูลซ้ำในระบบ
function clearDuplicateEntriesDebug() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashSheet = ss.getSheetByName("Member Dashboard");
  const dbSheet = ss.getSheetByName("Member Database");
  
  const adminPrompt = ui.prompt("ชื่อแอดมิน", "กรุณากรอกชื่อแอดมิน (สำหรับบันทึก log)", ui.ButtonSet.OK_CANCEL);
  if (adminPrompt.getSelectedButton() !== ui.Button.OK) return;
  const admin = adminPrompt.getResponseText().trim();

  const dashData = dashSheet.getDataRange().getValues();
  const phones = new Map();
  const codenames = new Map();
  let duplicates = [];

  // ตรวจสอบข้อมูลซ้ำ
  for (let i = 1; i < dashData.length; i++) {
    const phone = normalizePhone(dashData[i][1]);
    const codename = String(dashData[i][2]).toLowerCase().trim();
    
    if (phones.has(phone)) {
      duplicates.push({ row: i + 1, type: "phone", value: phone, existing: phones.get(phone) });
    } else {
      phones.set(phone, i + 1);
    }
    
    if (codenames.has(codename)) {
      duplicates.push({ row: i + 1, type: "codename", value: codename, existing: codenames.get(codename) });
    } else {
      codenames.set(codename, i + 1);
    }
  }

  if (duplicates.length === 0) {
    ui.alert("✅ ไม่พบข้อมูลซ้ำในระบบ");
    return;
  }

  // แสดงรายการข้อมูลซ้ำ
  let message = `พบข้อมูลซ้ำ ${duplicates.length} รายการ:\n\n`;
  duplicates.forEach((dup, index) => {
    const member = dashData[dup.row - 1];
    message += `${index + 1}. แถว ${dup.row}: ${member[0]} (${dup.type}: ${dup.value})\n`;
  });

  const confirm = ui.alert("🗑️ ลบข้อมูลซ้ำ", message + "\nต้องการลบข้อมูลซ้ำหรือไม่?", ui.ButtonSet.YES_NO);
  if (confirm !== ui.Button.YES) return;

  // ลบข้อมูลซ้ำ (จากล่างขึ้นบน)
  duplicates.sort((a, b) => b.row - a.row);
  let deletedCount = 0;
  
  for (const dup of duplicates) {
    try {
      dashSheet.deleteRow(dup.row);
      deletedCount++;
    } catch (e) {
      console.error(`ไม่สามารถลบแถว ${dup.row}: ${e.message}`);
    }
  }

  updateLeaderboard();
  logAdminAction("ลบข้อมูลซ้ำ", `ลบ ${deletedCount} รายการ`, admin);
  ui.alert(`✅ ลบข้อมูลซ้ำเรียบร้อยแล้ว ${deletedCount} รายการ`);
}

function getPartyByPhone(e) {
  const phone = normalizePhone(e.parameter.phone);
  const partyName = getPartyNameByPhone(phone); // Assuming you rename the original for clarity
  return ContentService.createTextOutput(partyName).setMimeType(ContentService.MimeType.TEXT);
}

// Renamed for clarity from previous steps. 
// If you have 'getPartyByPhone', you can rename it to this.
function getPartyNameByPhone(phone) {
  const dashSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Member Dashboard");
  const data = dashSheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (normalizePhone(data[i][1]) === normalizePhone(phone)) {
      return data[i][5] || "";
    }
  }
  return "";
}

/**
 * Serves the Admin Panel web page.
 * It checks for admin privileges before serving the page.
 */
function showAdminPage() {
  const userEmail = Session.getActiveUser().getEmail();
  // Server-side check for security. If not an admin, show a generic access denied page.
  if (!isAdmin(userEmail)) {
     return HtmlService.createHtmlOutput('<h1>Access Denied</h1><p>You are not authorized to view this page.</p>');
  }
  // If user is an admin, serve the actual admin panel page.
  return HtmlService.createHtmlOutputFromFile('Admin.html')
    .setTitle("Up Level Admin Panel")
    .addMetaTag('viewport', 'width=device-width, initial-scale=1.0');
}

/**
 * Called by the Admin Web App to get initial data.
 * It returns the user's email and their admin status.
 * This allows the web app to display the correct UI (admin tools or access denied message).
 */
function getAdminWebAppInitialData() {
  const email = Session.getActiveUser().getEmail();
  const userIsAdmin = isAdmin(email);
  return {
    isAdmin: userIsAdmin,
    email: email
  };
}
