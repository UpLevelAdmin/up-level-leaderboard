function onOpen() {
  const ui = SpreadsheetApp.getUi();
  
  // üèÜ Tournament Management
  ui.createMenu('üèÜ Tournament')
    .addItem('üÜî ‡∏™‡∏£‡πâ‡∏≤‡∏á Player ID ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', 'generatePlayerIDs')
    .addItem('üé≤ ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å', 'pairFirstRound')
    .addItem('‚û°Ô∏è ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ', 'pairNextRound')
    .addItem('üîÅ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings', 'updateStandings')
    .addItem('‚Ü©Ô∏è ‡∏¢‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', 'undoLastPairing')
    .addSeparator()
    .addItem('üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á Round Robin', 'createRoundRobinTournament')
    .addItem('üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏• Round Robin', 'updateRoundRobinResults')
    .addItem('üèÜ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• Round Robin', 'createRoundRobinStanding')
    .addToUi();
  
  // üìä Analysis & Stats
  ui.createMenu('üìä Analysis')
    .addItem('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà', 'showPairingValidation')
    .addItem('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô', 'showPairingStats')
    .addItem('üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£', 'showTournamentAdvice')
    .addItem('üìä ‡πÅ‡∏™‡∏î‡∏á Bracket Pairing', 'showBracketPairing')
    .addToUi();
  
  // üõ†Ô∏è Data Management
  ui.createMenu('üõ†Ô∏è Data Management')
    .addItem('üßπ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà)', 'clearAllData')
    .addItem('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤', 'fixIncompletePairing')
    .addItem('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç P2_ID ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á', 'fixMissingPlayerIDs')
    .addSeparator()
    .addItem('üóëÔ∏è ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á Standings', 'removeStandingsTable')
    .addItem('üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Standings ‡πÉ‡∏´‡∏°‡πà', 'recreateStandingsTable')
    .addSeparator()
    .addItem('üìã ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà Drop', 'showDroppedPlayers')
    .addItem('‚ùå Drop ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (Dropdown)', 'dropPlayerDropdown')
    .addSeparator()
    .addItem('üîí ‡∏ã‡πà‡∏≠‡∏ô Standings', 'hideStandings')
    .addItem('üëÅÔ∏è ‡πÅ‡∏™‡∏î‡∏á Standings', 'showStandings')
    .addItem('üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Hide Standing', 'checkCurrentHideStandingStatus')
    .addSeparator()
    .addItem('üìè ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô', 'adjustPairingColumns')
    .addItem('üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Hide Standing Controls', 'resetHideStandingControls')
    .addSeparator()
    .addItem('‚ö° ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Controls ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ', 'forceResetControls')
    .addToUi();
  
  // üé® Formatting & Display
  ui.createMenu('üé® Formatting')
    .addItem('üé® ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏µ‡∏ó', 'formatPairingSheet')
    .addItem('‚ú® ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•', 'improveVisualFormatting')
    .addItem('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠', 'fixTextOverlap')
    .addSeparator()
    .addItem('üìä ‡πÅ‡∏¢‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô', 'separateRoundsVisually')
    .addToUi();
  
  // üîß Debug & Maintenance
  ui.createMenu('üîß Debug')
    .addItem('üêõ Debug Standings', 'debugStandingsUpdate')
    .addItem('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô', 'checkMissingMembers')
    .addToUi();
    
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Hide Standing checkbox ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏µ‡∏ó
  setupHideStandingCheckbox();
  setupPairingHideStandingControls();

  ui.createMenu('Pairing Tools')
    .addItem('‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (Swiss)', 'pairNextRound')
    .addItem('‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà)', 'rePairLastRound')
    .addToUi();
}



function pairFirstRound() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const existingRounds = pairingSheet.getRange('A2:A').getValues().flat().filter(r => r);
  if (existingRounds.length > 0) {
    const response = SpreadsheetApp.getUi().alert(
      '‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 
      '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?', 
      SpreadsheetApp.getUi().ButtonSet.YES_NO
    );
    if (response === SpreadsheetApp.getUi().Button.NO) {
      return;
    }
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏°
    pairingSheet.getRange(2, 1, pairingSheet.getLastRow() - 1, pairingSheet.getLastColumn()).clearContent();
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó Players
  const playersSheet = ss.getSheetByName('Players');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏µ‡∏ó Players ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (playersSheet.getLastRow() <= 1) {
    SpreadsheetApp.getUi().alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Players ‡∏Å‡πà‡∏≠‡∏ô');
    return;
  }
  
  const playersData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 4).getValues();
  const dropList = pairingSheet.getRange('M2:M').getValues().flat().filter(name => name);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á dropSet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞ ID
  const dropSet = new Set(dropList.map(x => x.trim()));
  
  // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Drop ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const activePlayers = playersData.filter(row => {
    if (!row[0] || !row[1] || !row[2]) return false;
    const playerId = row[0];
    const playerName = row[1];
    return !dropSet.has(playerId) && !dropSet.has(playerName);
  });

  // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
  console.log('Players Data:', playersData);
  console.log('Active Players:', activePlayers);
  console.log('Drop List:', dropList);

  if (activePlayers.length < 2) {
    SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ ‚Äì ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏ô)\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö: ' + playersData.length + ' ‡∏Ñ‡∏ô\n‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ' + activePlayers.length + ' ‡∏Ñ‡∏ô');
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  if (activePlayers.length < 4) {
    const response = SpreadsheetApp.getUi().alert(
      '‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
      '‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ' + activePlayers.length + ' ‡∏Ñ‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏î‡∏∏‡∏• ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      SpreadsheetApp.getUi().ButtonSet.YES_NO
    );
    if (response === SpreadsheetApp.getUi().Button.NO) {
      return;
    }
  }

  // ‡∏™‡∏∏‡πà‡∏° (Fisher-Yates shuffle)
  for (let i = activePlayers.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [activePlayers[i], activePlayers[j]] = [activePlayers[j], activePlayers[i]];
  }

  const round = 1;
  let output = [];
  let byePlayer = null;

  // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏Ñ‡∏µ‡πà ‚Üí ‡∏à‡∏±‡∏ö BYE ‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á (‡∏™‡∏∏‡πà‡∏°)
  if (activePlayers.length % 2 !== 0) {
    const index = Math.floor(Math.random() * activePlayers.length);
    byePlayer = activePlayers.splice(index, 1)[0]; // remove from list
  }

  // ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  for (let i = 0; i < activePlayers.length; i += 2) {
    const p1 = activePlayers[i];
    const p2 = activePlayers[i + 1];

    if (!p2) break;

    output.push([
      round,
      i / 2 + 1,
      p1[0], p1[1], false, false, false, false,
      p2[0], p2[1], '', 'OK', ''
    ]);
  }

  // BYE ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  if (byePlayer) {
    output.push([
      round,
      output.length + 1,
      byePlayer[0], byePlayer[1], true, false, false, false,
      'BYE', 'BYE', '1:0', 'BYE WIN', ''
    ]);
  }

  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á Pairing
  const startRow = pairingSheet.getLastRow() + 1;
  pairingSheet.getRange(startRow, 1, output.length, output[0].length).setValues(output);
  addCheckboxes(pairingSheet, output.length);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
  formatPairingData(pairingSheet, startRow, output.length);
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Hide Standing controls ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
  setupPairingHideStandingControls();

  // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  const totalMatches = output.length;
  const byeMessage = byePlayer ? '\nüé≤ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ BYE: ' + byePlayer[1] : '';
  
  // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏ö‡∏Å‡∏ß‡∏ô)
  /*
  SpreadsheetApp.getUi().alert(
    '‚úÖ ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
    'üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà:\n' +
    'üéØ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏π‡πà: ' + totalMatches + ' ‡∏Ñ‡∏π‡πà\n' +
    'üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ' + (activePlayers.length + (byePlayer ? 1 : 0)) + ' ‡∏Ñ‡∏ô' +
    byeMessage,
    SpreadsheetApp.getUi().ButtonSet.OK
  );
  */
}



function pairNextRound() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const standingSheet = ss.getSheetByName('Standing');
  const playersSheet = ss.getSheetByName('Players');

  // ‡∏î‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const roundData = pairingSheet.getRange('A2:A').getValues().flat().filter(r => r);
  const nextRound = roundData.length ? Math.max(...roundData) + 1 : 1;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (roundData.length > 0) {
    const lastRound = Math.max(...roundData);
    const lastRoundData = pairingSheet.getRange('A2:A').getValues().flat();
    const hasLastRound = lastRoundData.some(r => r === lastRound);
    if (hasLastRound) {
      const response = SpreadsheetApp.getUi().alert(
        '‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 
        '‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + lastRound + ' ‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + nextRound + ' ‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?', 
        SpreadsheetApp.getUi().ButtonSet.YES_NO
      );
      if (response === SpreadsheetApp.getUi().Button.NO) {
        return;
      }
    }
  }

  // ‡∏î‡∏∂‡∏á standings ‡∏ó‡∏µ‡πà update ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Standing sheet)
  let standings = [];
  if (standingSheet.getLastRow() > 1) {
    standings = standingSheet.getRange(2, 1, standingSheet.getLastRow() - 1, 11).getValues(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• standings ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (standings.length === 0) {
    SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• standings ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡∏Å‡πà‡∏≠‡∏ô');
    return;
  }

  // ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏î‡πâ‡∏ö‡∏≤‡∏¢
  const allPairingData = pairingSheet.getDataRange().getValues();
  const byeList = allPairingData
    .filter(r => r[8] === 'BYE') // P2_ID ‡πÄ‡∏õ‡πá‡∏ô BYE (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå I)
    .map(r => r[2]); // P1_ID ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏≤‡∏¢

  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å ID
  const playerData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 4).getValues();
  const getName = id => {
    const found = playerData.find(row => row[0] === id);
    return found ? found[1] : id;
  };

  // ‡∏Å‡∏£‡∏≠‡∏á activePlayers ‡∏à‡∏≤‡∏Å standings (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà drop)
  let activePlayers = standings
    .filter(row => {
      const rank = row[0];
      const playerId = row[1];
      const playerName = row[2];
      
      // ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ rank ‡πÄ‡∏õ‡πá‡∏ô 'DROP'
      if (rank === 'DROP' || !playerId || playerId === '') {
        return false;
      }
      return true;
    })
    .map(row => ({
      id: row[1],
      name: row[2],
      points: row[7], // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
      rank: row[0]
    }))
    .sort((a, b) => {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
      if (b.points !== a.points) {
        return b.points - a.points;
      }
      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
      return a.id.localeCompare(b.id);
    });

  // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• active players
  console.log('Active Players:', activePlayers.map(p => `${p.name} (${p.id}) - ${p.points} pts`));

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ players ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (activePlayers.length < 2) {
    SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ ‚Äì ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏Ñ‡∏ô)\n\n‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ' + activePlayers.length + ' ‡∏Ñ‡∏ô');
    return;
  }

  // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
  const matchHistory = {}; // { id1: [id2, id3, ...] }
  allPairingData.slice(1).forEach(row => {
    const p1 = row[2], p2 = row[8]; // P1_ID, P2_ID (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C ‡πÅ‡∏•‡∏∞ I)
    if (!p1 || !p2 || p1 === '' || p2 === '' || p2 === 'BYE' || p1 === 'BYE') return;
    if (!matchHistory[p1]) matchHistory[p1] = [];
    if (!matchHistory[p2]) matchHistory[p2] = [];
    matchHistory[p1].push(p2);
    matchHistory[p2].push(p1);
  });

  // 1. ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (Bracket Pairing)
  const playerBrackets = {};
  activePlayers.forEach(player => {
    const points = player.points;
    if (!playerBrackets[points]) playerBrackets[points] = [];
    playerBrackets[points].push(player);
  });

  // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  console.log('Player Brackets:', playerBrackets);

  // 2. ‡πÅ‡∏à‡∏Å‡∏ö‡∏≤‡∏¢‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏Ñ‡∏µ‡πà - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏î‡πâ BYE ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  let byePlayer = null;
  if (activePlayers.length % 2 === 1) {
    const sortedPoints = Object.keys(playerBrackets).map(Number).sort((a, b) => a - b);
    
    for (let points of sortedPoints) {
      const playersInBracket = playerBrackets[points];
      for (let player of playersInBracket) {
        if (!byeList.includes(player.id)) {
          byePlayer = player;
          playerBrackets[points] = playerBrackets[points].filter(p => p.id !== player.id);
          if (playerBrackets[points].length === 0) {
            delete playerBrackets[points];
          }
          break;
        }
      }
      if (byePlayer) break;
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏î‡πâ BYE ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    if (!byePlayer) {
      const availablePoints = Object.keys(playerBrackets).map(Number).filter(points => 
        playerBrackets[points] && Array.isArray(playerBrackets[points]) && playerBrackets[points].length > 0
      );
      
      if (availablePoints.length > 0) {
        const lowestPoints = Math.min(...availablePoints);
        byePlayer = playerBrackets[lowestPoints].pop();
        if (playerBrackets[lowestPoints].length === 0) {
          delete playerBrackets[lowestPoints];
        }
      }
    }
  }

  // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á pairing ‡πÅ‡∏ö‡∏ö backtracking - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥ 100%
  const paired = [];

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
  function getEligibleOpponents(p1, availablePlayers, matchHistory) {
    const eligible = [];
    availablePlayers.forEach(p2 => {
      if (p1.id !== p2.id) {
        const hasPlayed = matchHistory[p1.id] && matchHistory[p1.id].includes(p2.id);
        if (!hasPlayed) {
          eligible.push(p2);
        }
      }
    });
    return eligible;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ
  function calculatePairingScore(p1, p2) {
    const pointDiff = Math.abs(p1.points - p2.points);
    const avgPoints = (p1.points + p2.points) / 2;
    
    // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    const pointScore = Math.max(0, 10 - pointDiff);
    
    // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏Ñ‡∏ß‡∏£‡πÄ‡∏à‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á)
    const avgScore = avgPoints / 10;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    // ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏Ñ‡∏ß‡∏£‡πÄ‡∏à‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏Å‡πà‡∏≠‡∏ô
    const balanceScore = Math.min(p1.points, p2.points) / 10;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
    return (pointScore * 0.3) + (avgScore * 0.5) + (balanceScore * 0.2);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö backtracking
  function pairPlayers(players, matchHistory) {
    if (players.length === 0) return true;
    if (players.length === 1) return false;

    // --- ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô) ---
    if (players.length >= 2) {
      // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
      const pointsGroups = {};
      players.forEach(player => {
        if (!pointsGroups[player.points]) pointsGroups[player.points] = [];
        pointsGroups[player.points].push(player);
      });
      
      // ‡∏´‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ô 2 ‡∏Ñ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
      const sortedPoints = Object.keys(pointsGroups).map(Number).sort((a, b) => b - a);
      
      for (let points of sortedPoints) {
        const playersInGroup = pointsGroups[points];
        if (playersInGroup.length >= 2) {
          // ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
          for (let i = 0; i < playersInGroup.length; i++) {
            for (let j = i + 1; j < playersInGroup.length; j++) {
              const p1 = playersInGroup[i];
              const p2 = playersInGroup[j];
              
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
              const hasPlayed = matchHistory[p1.id] && matchHistory[p1.id].includes(p2.id);
              
              if (!hasPlayed) {
                console.log(`‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô): ${p1.name} (${p1.points} pts) vs ${p2.name} (${p2.points} pts)`);
                
                const remainingPlayers = players.filter(p => p.id !== p1.id && p.id !== p2.id);
                paired.push([p1, p2]);
                
                if (pairPlayers(remainingPlayers, matchHistory)) {
                  return true;
                }
                
                paired.pop(); // backtrack
                console.log(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà ${p1.name} vs ${p2.name}`);
                return false; // ‡∏ñ‡πâ‡∏≤‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
              } else {
                console.log(`${p1.name} ‡πÅ‡∏•‡∏∞ ${p2.name} ‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß`);
              }
            }
          }
        }
      }
    }
    // --- ‡∏à‡∏ö‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö ---

    const p1 = players[0];
    const eligibleOpponents = getEligibleOpponents(p1, players.slice(1), matchHistory);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á + ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢)
    eligibleOpponents.sort((a, b) => {
      const scoreA = calculatePairingScore(p1, a);
      const scoreB = calculatePairingScore(p1, b);
      return scoreB - scoreA; // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
    });
    
    for (let p2 of eligibleOpponents) {
      const remainingPlayers = players.filter(p => p.id !== p1.id && p.id !== p2.id);
      paired.push([p1, p2]);
      
      if (pairPlayers(remainingPlayers, matchHistory)) {
        return true;
      }
      
      paired.pop(); // backtrack
    }
    
    return false;
  }

  // ‡∏•‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö backtracking
  const remainingPlayers = activePlayers.filter(p => !byePlayer || p.id !== byePlayer.id);
  
  // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
  console.log('Remaining Players for Pairing:', remainingPlayers.map(p => `${p.name} (${p.id}) - ${p.points} pts`));
  
  const success = pairPlayers(remainingPlayers, matchHistory);

  if (!success) {
    // ‡∏´‡πâ‡∏≤‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ã‡πâ‡∏≥‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
    SpreadsheetApp.getUi().alert(
      '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥',
      '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + nextRound + ' ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ã‡πâ‡∏≥\n\n' +
      '‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n\n' +
      '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    return; // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
  }

  // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏à‡∏±‡∏î‡πÇ‡∏ï‡πä‡∏∞‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á-‡∏ï‡πà‡∏≥)
  const output = [];
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏™‡∏π‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≥)
  const sortedPairs = paired.map(([p1, p2]) => ({
    p1, p2, avgPoints: (p1.points + p2.points) / 2
  })).sort((a, b) => b.avgPoints - a.avgPoints);
  
  let tableNumber = 1;
  sortedPairs.forEach(({p1, p2}) => {
    output.push([
      nextRound,
      tableNumber++,
      p1.id, p1.name, false, false, false, false,
      p2.id, p2.name, '', 'OK', ''
    ]);
  });

  // BYE ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  if (byePlayer) {
    output.push([
      nextRound,
      tableNumber,
      byePlayer.id, byePlayer.name, true, false, false, false,
      'BYE', 'BYE', '1:0', 'BYE WIN', ''
    ]);
  }

  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á Pairing
  const startRow = pairingSheet.getLastRow() + 1;
  pairingSheet.getRange(startRow, 1, output.length, output[0].length).setValues(output);
  addCheckboxes(pairingSheet, output.length);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
  formatPairingData(pairingSheet, startRow, output.length);
  
  // ‡πÅ‡∏¢‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
  separateRoundsVisually();

  // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  SpreadsheetApp.getUi().alert('‚úÖ ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö ' + nextRound + ' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (' + paired.length + ' ‡∏Ñ‡∏π‡πà)');
}



function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

function getPlayerNameById(id) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const playersSheet = ss.getSheetByName('Players');
  const players = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 4).getValues();
  for (let i = 0; i < players.length; i++) {
    if (players[i][0] === id) return players[i][1];
  }
  return '';
}

function addCheckboxes(sheet, rowCount) {
  const startRow = sheet.getLastRow() - rowCount + 1;
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ‡∏Ñ‡∏π‡πà: E=Win P1, F=Draw, G=Win P2, H=Double Loss (0:0)
  sheet.getRange(startRow, 5, rowCount, 4).insertCheckboxes();
}

// üé® ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
function formatPairingData(sheet, startRow, rowCount) {
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ROUND (A)
  const roundRange = sheet.getRange(startRow, 1, rowCount, 1);
  roundRange.setBackground('#e3f2fd');
  roundRange.setFontWeight('bold');
  roundRange.setHorizontalAlignment('center');
  roundRange.setBorder(true, true, true, true, true, true, '#2196f3', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå TABLE (B)
  const tableRange = sheet.getRange(startRow, 2, rowCount, 1);
  tableRange.setBackground('#f3e5f5');
  tableRange.setFontWeight('bold');
  tableRange.setHorizontalAlignment('center');
  tableRange.setBorder(true, true, true, true, true, true, '#9c27b0', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå P1_ID ‡πÅ‡∏•‡∏∞ P2_ID (C, I)
  const p1IdRange = sheet.getRange(startRow, 3, rowCount, 1);
  const p2IdRange = sheet.getRange(startRow, 9, rowCount, 1);
  p1IdRange.setBackground('#e8f5e8');
  p2IdRange.setBackground('#e8f5e8');
  p1IdRange.setFontWeight('bold');
  p2IdRange.setFontWeight('bold');
  p1IdRange.setHorizontalAlignment('center');
  p2IdRange.setHorizontalAlignment('center');
  p1IdRange.setBorder(true, true, true, true, true, true, '#4caf50', SpreadsheetApp.BorderStyle.SOLID);
  p2IdRange.setBorder(true, true, true, true, true, true, '#4caf50', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå PLAYER 1 ‡πÅ‡∏•‡∏∞ PLAYER 2 (D, J)
  const p1NameRange = sheet.getRange(startRow, 4, rowCount, 1);
  const p2NameRange = sheet.getRange(startRow, 10, rowCount, 1);
  p1NameRange.setBackground('#fff3e0');
  p2NameRange.setBackground('#fff3e0');
  p1NameRange.setFontWeight('bold');
  p2NameRange.setFontWeight('bold');
  p1NameRange.setHorizontalAlignment('center');
  p2NameRange.setHorizontalAlignment('center');
  p1NameRange.setBorder(true, true, true, true, true, true, '#ff9800', SpreadsheetApp.BorderStyle.SOLID);
  p2NameRange.setBorder(true, true, true, true, true, true, '#ff9800', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå RESULT (K)
  const resultRange = sheet.getRange(startRow, 11, rowCount, 1);
  resultRange.setBackground('#fce4ec');
  resultRange.setFontWeight('bold');
  resultRange.setHorizontalAlignment('center');
  resultRange.setBorder(true, true, true, true, true, true, '#e91e63', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå STATUS (L)
  const statusRange = sheet.getRange(startRow, 12, rowCount, 1);
  statusRange.setBackground('#f1f8e9');
  statusRange.setFontWeight('bold');
  statusRange.setHorizontalAlignment('center');
  statusRange.setBorder(true, true, true, true, true, true, '#8bc34a', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  sheet.setColumnWidth(1, 80);   // ROUND
  sheet.setColumnWidth(2, 80);   // TABLE
  sheet.setColumnWidth(3, 100);  // P1_ID
  sheet.setColumnWidth(4, 150);  // PLAYER 1
  sheet.setColumnWidth(5, 60);   // WIN_P1
  sheet.setColumnWidth(6, 60);   // DRAW
  sheet.setColumnWidth(7, 60);   // WIN_P2
  sheet.setColumnWidth(8, 60);   // Double Loss
  sheet.setColumnWidth(9, 100);  // P2_ID
  sheet.setColumnWidth(10, 150); // PLAYER 2
  sheet.setColumnWidth(11, 80);  // RESULT
  sheet.setColumnWidth(12, 100); // STATUS
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  for (let i = startRow; i < startRow + rowCount; i++) {
    sheet.setRowHeight(i, 35);
  }
}

function updateStandings() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const standingSheet = ss.getSheetByName('Standing');
  const playersSheet = ss.getSheetByName('Players');
  
  // Get all players from Players sheet first
  const allPlayers = {};
  if (playersSheet.getLastRow() > 1) {
    const playersData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 4).getValues();
    playersData.forEach(row => {
      if (row[0] && row[1]) {
        allPlayers[row[0]] = { name: row[1], trId: row[2] || '', played: 0, win: 0, draw: 0, loss: 0 };
      }
    });
  }
  
  // Get drop list
  const dropList = pairingSheet.getRange('M2:M').getValues().flat().filter(name => name);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á dropSet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞ ID
  const dropSet = new Set(dropList.map(x => x.trim()));
  
  // Get all players and their results from Pairing sheet
  const standings = {};
  const opponentHistory = {}; // ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
  
  let row = 2;
  while (pairingSheet.getRange(row, 1).getValue() !== '') {
    const p1_id = pairingSheet.getRange(row, 3).getValue(); // P1_ID
    const p2_id = pairingSheet.getRange(row, 9).getValue(); // P2_ID
    const p1_name = pairingSheet.getRange(row, 4).getValue(); // PLAYER 1
    const p2_name = pairingSheet.getRange(row, 10).getValue(); // PLAYER 2
    const result = pairingSheet.getRange(row, 11).getValue(); // RESULT
    
    // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    console.log(`Row ${row}: P1=${p1_id}(${p1_name}) vs P2=${p2_id}(${p2_name}) = ${result}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (p1_id && p2_id && result && result !== '') {
      console.log(`Valid match data: ${p1_name} vs ${p2_name} = ${result}`);
    }
    
    if (p1_id && p2_id && result) {
      // Initialize players if not exists
      if (!standings[p1_id]) standings[p1_id] = { name: p1_name, played: 0, win: 0, draw: 0, loss: 0 };
      if (!opponentHistory[p1_id]) opponentHistory[p1_id] = [];
      
      if (p2_id === 'BYE') {
        // BYE: +3 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß 1 ‡∏£‡∏≠‡∏ö
        standings[p1_id].played++;
        standings[p1_id].win++;
      } else {
        if (!standings[p2_id]) standings[p2_id] = { name: p2_name, played: 0, win: 0, draw: 0, loss: 0 };
        if (!opponentHistory[p2_id]) opponentHistory[p2_id] = [];
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ
        opponentHistory[p1_id].push(p2_id);
        opponentHistory[p2_id].push(p1_id);
        
        // Update stats based on result
        standings[p1_id].played++;
        standings[p2_id].played++;

        if (result === '1:0') {
          standings[p1_id].win++;
          standings[p2_id].loss++;
        } else if (result === '0:1') {
          standings[p1_id].loss++;
          standings[p2_id].win++;
        } else if (result === '1:1') {
          standings[p1_id].draw++;
          standings[p2_id].draw++;
        } else if (result === '0:0') {
          standings[p1_id].loss++;
          standings[p2_id].loss++;
        }
      }
    }
    row++;
  }
  
  // Calculate OW% (Opponent's Win Percentage)
  const calculateOW = (playerId) => {
    const opponents = opponentHistory[playerId] || [];
    if (opponents.length === 0) return 0;
    
    let totalOpponentWins = 0;
    let totalOpponentGames = 0;

    opponents.forEach(opponentId => {
      const opponentStats = standings[opponentId];
      if (opponentStats) {
        totalOpponentWins += opponentStats.win;
        totalOpponentGames += opponentStats.played;
      }
    });
    
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OW% - ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 100%
    if (totalOpponentGames > 0) {
      const owRate = Math.min(100, Math.round((totalOpponentWins / totalOpponentGames) * 100));
      console.log(`OW calculation for ${playerId}: ${totalOpponentWins} wins / ${totalOpponentGames} games = ${owRate}%`);
      return owRate;
    }
    return 0;
  };
  
  // Calculate Head-to-Head (H2H) score
  const calculateH2H = (playerId, opponentId) => {
    let row = 2;
    
    while (pairingSheet.getRange(row, 1).getValue() !== '') {
      const p1_id = pairingSheet.getRange(row, 3).getValue();
      const p2_id = pairingSheet.getRange(row, 9).getValue();
      const result = pairingSheet.getRange(row, 11).getValue();
      
      if ((p1_id === playerId && p2_id === opponentId) || (p1_id === opponentId && p2_id === playerId)) {
        if (result === '1:0') {
          return p1_id === playerId ? 1 : -1; // ‡πÉ‡∏Ñ‡∏£‡∏ä‡∏ô‡∏∞
        } else if (result === '0:1') {
          return p1_id === playerId ? -1 : 1; // ‡πÉ‡∏Ñ‡∏£‡∏ä‡∏ô‡∏∞
        } else if (result === '1:1') {
          return 0; // ‡πÄ‡∏™‡∏°‡∏≠
        }
        break; // Found the match, no need to continue
      }
      row++;
    }
    
    return 0; // ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
  };
  
  // Merge standings with all players (including those who haven't played yet)
  const mergedStandings = { ...allPlayers, ...standings };
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TR_ID ‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó Players
  const playersData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 4).getValues();
  const playerTrIdMap = {};
  playersData.forEach(row => {
    if (row[0] && row[2]) { // Player_id (A) ‡πÅ‡∏•‡∏∞ TR_ID (C)
      playerTrIdMap[row[0]] = row[2];
    }
  });
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° TR_ID ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö standings (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
  Object.keys(mergedStandings).forEach(playerId => {
    if (playerTrIdMap[playerId] && !mergedStandings[playerId].trId) {
      mergedStandings[playerId].trId = playerTrIdMap[playerId];
    }
  });
  
  // ‡πÅ‡∏¢‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà drop ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà drop
  const activePlayers = [];
  const droppedPlayers = [];
  
  Object.entries(mergedStandings).forEach(([player_id, stats]) => {
    const points = stats.win * 3 + stats.draw;
    
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Win Rate - ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 100%
    let winRate = 0;
    if (stats.played > 0) {
      winRate = Math.min(100, Math.round((stats.win / stats.played) * 100));
    }
    
    const owRate = calculateOW(player_id);
    
    // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    console.log(`Player: ${stats.name}, Played: ${stats.played}, Win: ${stats.win}, Draw: ${stats.draw}, Loss: ${stats.loss}, Points: ${points}, WinRate: ${winRate}%, OW: ${owRate}%`);
    
    const playerData = [
      0, // Rank (will be filled later)
      player_id,
      stats.name,
      stats.trId || '', // TR_ID
      stats.played,
      stats.win,
      stats.draw,
      parseInt(stats.loss) || 0, // Loss - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
      parseInt(points) || 0, // Points - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
      winRate + '%',
      owRate + '%',
      '' // H2H (will be filled later)
    ];
    
    // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö playerData
    console.log(`PlayerData for ${stats.name}:`, playerData);
    
    if (dropSet.has(stats.name) || dropSet.has(player_id)) {
      droppedPlayers.push(playerData);
    } else {
      activePlayers.push(playerData);
    }
  });
  
  // Sort active players by points (descending), then win rate (descending)
  activePlayers.sort((a, b) => {
    if (b[8] !== a[8]) return b[8] - a[8]; // Points (index 8)
    if (parseInt(b[9]) !== parseInt(a[9])) return parseInt(b[9]) - parseInt(a[9]); // Win Rate (index 9)
    return a[2].localeCompare(b[2]); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
  });
  
  // Sort dropped players by points (descending) - ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î
  droppedPlayers.sort((a, b) => b[8] - a[8]); // Sort by Points (index 8)
  
  // ‡∏£‡∏ß‡∏° active players ‡πÅ‡∏•‡∏∞ dropped players
  let standingsArray = [...activePlayers, ...droppedPlayers];
  

  
  // Add H2H scores for tied players (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ active players)
  for (let i = 0; i < activePlayers.length; i++) {
    const currentPlayer = activePlayers[i];
    const currentPoints = currentPlayer[8]; // Points (index 8)
    const currentWinRate = parseInt(currentPlayer[9]); // Win Rate (index 9)
    const currentOW = parseInt(currentPlayer[10]); // OW% (index 10)
    
    // Find players with same points, win rate, and OW% (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ active players)
    const tiedPlayers = activePlayers.filter((player, index) => 
      index !== i && 
      player[8] === currentPoints && 
      parseInt(player[9]) === currentWinRate && 
      parseInt(player[10]) === currentOW
    );
    
    if (tiedPlayers.length > 0) {
      // Calculate H2H against tied players
      let h2hInfo = "";
      for (const tiedPlayer of tiedPlayers) {
        const h2h = calculateH2H(currentPlayer[1], tiedPlayer[1]);
        if (h2h === 1) {
          h2hInfo = `W vs ${tiedPlayer[2]}`; // W = Win
          break;
        } else if (h2h === -1) {
          h2hInfo = `L vs ${tiedPlayer[2]}`; // L = Loss
          break;
        } else if (h2h === 0) {
          h2hInfo = `D vs ${tiedPlayer[2]}`; // D = Draw
          break;
        }
      }
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏• H2H ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠
      if (h2hInfo === "") {
        h2hInfo = `Tied with ${tiedPlayers.length} player(s)`;
      }
      
      currentPlayer[11] = h2hInfo; // H2H ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô index 11
    } else {
      currentPlayer[11] = ""; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
    }
  }
  
  // Re-sort active players with H2H as tie-breaker
  activePlayers.sort((a, b) => {
    if (b[8] !== a[8]) return b[8] - a[8]; // Points (index 8)
    if (parseInt(b[9]) !== parseInt(a[9])) return parseInt(b[9]) - parseInt(a[9]); // Win Rate (index 9)
    return a[2].localeCompare(b[2]); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
  });
  
  // ‡∏£‡∏ß‡∏° active players ‡πÅ‡∏•‡∏∞ dropped players ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏´‡∏•‡∏±‡∏á sort)
  standingsArray = [...activePlayers, ...droppedPlayers];
  
  // Add ranks ‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≤‡∏¢ DROP - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏£‡πà‡∏ß‡∏°
  let rankCounter = 1;
  let currentRank = 1;
  
  for (let i = 0; i < standingsArray.length; i++) {
    const row = standingsArray[i];
    
    if (i >= activePlayers.length) {
      // Dropped players - ‡πÉ‡∏ä‡πâ‡∏õ‡πâ‡∏≤‡∏¢ DROP
      row[0] = 'DROP';
    } else {
      // Active players - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏£‡πà‡∏ß‡∏°
      if (i === 0) {
        // ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏£‡∏Å
        row[0] = currentRank;
      } else {
        const prevRow = standingsArray[i - 1];
        const prevPoints = prevRow[8]; // Points (index 8)
        const prevWinRate = parseInt(prevRow[9]); // Win Rate (index 9)
        const prevOW = parseInt(prevRow[10]); // OW% (index 10)
        
        const currentPoints = row[8]; // Points (index 8)
        const currentWinRate = parseInt(row[9]); // Win Rate (index 9)
        const currentOW = parseInt(row[10]); // OW% (index 10)
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ Points ‡πÅ‡∏•‡∏∞ Win Rate ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å)
        if (currentPoints === prevPoints && 
            currentWinRate === prevWinRate) {
          // ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏£‡πà‡∏ß‡∏°
          row[0] = currentRank;
        } else {
          // ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
          currentRank = rankCounter;
          row[0] = currentRank;
        }
      }
      rankCounter++;
    }
  }
  
  // Clear existing data in Standing sheet
  standingSheet.clearContents();
  
  // Add headers
  const headers = ['Rank', 'Player ID', 'Player Name', 'TR_ID', 'Played', 'Win', 'Draw', 'Loss', 'Points', 'Win Rate', 'OW%', 'H2H'];
  standingSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  
  // Add data
  if (standingsArray.length > 0) {
    // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
    console.log('Final standingsArray:', standingsArray);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Points ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    standingsArray.forEach((row, index) => {
      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Points ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
      if (typeof row[8] === 'string') {
        if (row[8].includes('%')) {
          // ‡∏ñ‡πâ‡∏≤ Points ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ó‡∏µ‡πà‡∏°‡∏µ % ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
          row[8] = parseInt(row[8].replace('%', '')) || 0;
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡∏≠‡∏∑‡πà‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
          row[8] = parseInt(row[8]) || 0;
        }
        console.log(`Fixed Points for row ${index}: ${row[8]}`);
      }
      
      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Loss ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
      if (typeof row[7] === 'number' && row[7] % 1 !== 0) {
        row[7] = parseInt(row[7]) || 0;
        console.log(`Fixed Loss for row ${index}: ${row[7]}`);
      }
    });
    
    standingSheet.getRange(2, 1, standingsArray.length, 12).setValues(standingsArray);
  }
  
  // Style the table with improved formatting
  const headerRange = standingSheet.getRange(1, 1, 1, 12);
  headerRange.setBackground('#6366f1'); // Indigo background
  headerRange.setFontColor('#ffffff'); // White text
  headerRange.setFontWeight('bold');
  headerRange.setFontSize(12);
  headerRange.setHorizontalAlignment('center');
  headerRange.setVerticalAlignment('middle');
  headerRange.setBorder(true, true, true, true, true, true, '#4f46e5', SpreadsheetApp.BorderStyle.SOLID);
  
  if (standingsArray.length > 0) {
    const dataRange = standingSheet.getRange(2, 1, standingsArray.length, 12);
    dataRange.setHorizontalAlignment('center');
    dataRange.setVerticalAlignment('middle');
    dataRange.setFontSize(11);
    
    // Left align player names
    standingSheet.getRange(2, 3, standingsArray.length, 1).setHorizontalAlignment('left');
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Loss ‡πÅ‡∏•‡∏∞ Points ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    standingSheet.getRange(2, 8, standingsArray.length, 1).setNumberFormat('0'); // Loss - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
    standingSheet.getRange(2, 9, standingsArray.length, 1).setNumberFormat('0'); // Points - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
    
    // Add alternating row colors for better readability
    standingsArray.forEach((_, index) => {
      const rowRange = standingSheet.getRange(2 + index, 1, 1, 12);
      
      if (index >= activePlayers.length) {
        // Dropped players - ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô
        rowRange.setBackground('#f3f4f6');
        rowRange.setFontColor('#6b7280'); // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
        rowRange.setFontStyle('italic'); // ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏µ‡∏¢‡∏á
      } else {
        // Active players - ‡∏™‡∏µ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß
        rowRange.setBackground(index % 2 === 0 ? '#f3e8ff' : '#f0f9ff'); // Purple and blue alternating
      }
    });

    // Add borders
    dataRange.setBorder(true, true, true, true, true, true, '#e2e8f0', SpreadsheetApp.BorderStyle.SOLID);
    
    // Highlight top 3 players (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ active players)
    for (let i = 0; i < Math.min(3, activePlayers.length); i++) {
      const rowRange = standingSheet.getRange(2 + i, 1, 1, 12);
      if (i === 0) {
        rowRange.setBackground('#ffd700'); // ‡∏ó‡∏≠‡∏á (‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏°) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1
        rowRange.setFontWeight('bold');
        rowRange.setFontColor('#000000'); // ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏µ‡∏î‡∏≥
      } else if (i === 1) {
        rowRange.setBackground('#c0c0c0'); // ‡πÄ‡∏á‡∏¥‡∏ô (‡∏™‡∏µ‡πÄ‡∏ó‡∏≤) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 2
        rowRange.setFontWeight('bold');
      } else if (i === 2) {
        rowRange.setBackground('#cd7f32'); // ‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á (‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 3
        rowRange.setFontWeight('bold');
      }
    }
  }
  
  // Set column widths for better readability
  standingSheet.setColumnWidth(1, 60);   // Rank
  standingSheet.setColumnWidth(2, 100);  // Player ID
  standingSheet.setColumnWidth(3, 200);  // Player Name
  standingSheet.setColumnWidth(4, 100);  // TR_ID
  standingSheet.setColumnWidth(5, 80);   // Played
  standingSheet.setColumnWidth(6, 60);   // Win
  standingSheet.setColumnWidth(7, 60);   // Draw
  standingSheet.setColumnWidth(8, 60);   // Loss
  standingSheet.setColumnWidth(9, 80);   // Points
  standingSheet.setColumnWidth(10, 100); // Win Rate
  standingSheet.setColumnWidth(11, 80);  // OW%
  standingSheet.setColumnWidth(12, 80);  // H2H
  
  // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Hide Standing checkbox ‡∏≠‡∏≠‡∏Å
  // setupHideStandingCheckbox();
}



function removeStandingsTable() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const standingSheet = ss.getSheetByName('Standing');
  
  const response = SpreadsheetApp.getUi().alert(
    '‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á Standings',
    '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Standing ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ',
    SpreadsheetApp.getUi().ButtonSet.YES_NO
  );
  
  if (response === SpreadsheetApp.getUi().Button.YES) {
  standingSheet.clearContents();
    SpreadsheetApp.getUi().alert('‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Standing ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
  }
}

function formatPairingSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('Pairing');
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
  sheet.setColumnWidth(1, 60);   // ROUND
  sheet.setColumnWidth(2, 60);   // TABLE
  sheet.setColumnWidth(3, 80);   // P1_ID
  sheet.setColumnWidth(4, 150);  // PLAYER 1
  sheet.setColumnWidth(5, 80);   // WIN_P1
  sheet.setColumnWidth(6, 80);   // DRAW
  sheet.setColumnWidth(7, 80);   // WIN_P2
  sheet.setColumnWidth(8, 80);   // Double Loss
  sheet.setColumnWidth(9, 80);   // P2_ID
  sheet.setColumnWidth(10, 150); // PLAYER 2
  sheet.setColumnWidth(11, 80);  // RESULT
  sheet.setColumnWidth(12, 80);  // STATUS
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  const headerRange = sheet.getRange(1, 1, 1, 12);
  headerRange.setBackground('#f3f4f6');
  headerRange.setFontWeight('bold');
  headerRange.setHorizontalAlignment('center');
  headerRange.setVerticalAlignment('middle');
  headerRange.setBorder(true, true, true, true, true, true, '#d1d5db', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå checkbox
  const checkboxRange = sheet.getRange(2, 5, sheet.getLastRow() - 1, 4);
  checkboxRange.setHorizontalAlignment('center');
  checkboxRange.setVerticalAlignment('middle');
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  const resultRange = sheet.getRange(2, 11, sheet.getLastRow() - 1, 2);
  resultRange.setHorizontalAlignment('center');
  resultRange.setVerticalAlignment('middle');
  resultRange.setFontWeight('bold');
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  const playerNameRange = sheet.getRange(2, 4, sheet.getLastRow() - 1, 1);
  playerNameRange.setHorizontalAlignment('left');
  playerNameRange.setVerticalAlignment('middle');
  
  const player2NameRange = sheet.getRange(2, 10, sheet.getLastRow() - 1, 1);
  player2NameRange.setHorizontalAlignment('left');
  player2NameRange.setVerticalAlignment('middle');
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° border ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const dataRange = sheet.getRange(2, 1, sheet.getLastRow() - 1, 12);
  dataRange.setBorder(true, true, true, true, true, true, '#e5e7eb', SpreadsheetApp.BorderStyle.SOLID);

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£ wrap text ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  playerNameRange.setWrap(true);
  player2NameRange.setWrap(true);
  
  SpreadsheetApp.getUi().alert('‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏µ‡∏ó Pairing ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
}

function improveVisualFormatting() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('Pairing');
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö checkbox ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
  const checkboxRange = sheet.getRange(2, 5, sheet.getLastRow() - 1, 4);
  checkboxRange.setBackground('#f9fafb');
  checkboxRange.setBorder(true, true, true, true, true, true, '#d1d5db', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î
  const resultRange = sheet.getRange(2, 11, sheet.getLastRow() - 1, 1);
  resultRange.setBackground('#fef3c7'); // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô
  resultRange.setFontWeight('bold');
  resultRange.setFontSize(12);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const statusRange = sheet.getRange(2, 12, sheet.getLastRow() - 1, 1);
  statusRange.setBackground('#dbeafe'); // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
  statusRange.setFontWeight('bold');
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  const player1Range = sheet.getRange(2, 4, sheet.getLastRow() - 1, 1);
  const player2Range = sheet.getRange(2, 10, sheet.getLastRow() - 1, 1);
  
  player1Range.setBackground('#f0fdf4'); // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô
  player2Range.setBackground('#fef2f2'); // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏≠‡πà‡∏≠‡∏ô
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ID
  const idRange = sheet.getRange(2, 3, sheet.getLastRow() - 1, 1);
  const id2Range = sheet.getRange(2, 9, sheet.getLastRow() - 1, 1);
  
  idRange.setBackground('#f3e8ff'); // ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡∏≠‡πà‡∏≠‡∏ô
  id2Range.setBackground('#f3e8ff');
  idRange.setFontWeight('bold');
  id2Range.setFontWeight('bold');
  
  SpreadsheetApp.getUi().alert('‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
}

function fixTextOverlap() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('Pairing');
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  sheet.setColumnWidth(1, 70);   // ROUND
  sheet.setColumnWidth(2, 70);   // TABLE
  sheet.setColumnWidth(3, 90);   // P1_ID
  sheet.setColumnWidth(4, 180);  // PLAYER 1 (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á)
  sheet.setColumnWidth(5, 90);   // WIN_P1
  sheet.setColumnWidth(6, 90);   // DRAW
  sheet.setColumnWidth(7, 90);   // WIN_P2
  sheet.setColumnWidth(8, 90);   // Double Loss
  sheet.setColumnWidth(9, 90);   // P2_ID
  sheet.setColumnWidth(10, 180); // PLAYER 2 (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á)
  sheet.setColumnWidth(11, 100); // RESULT (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á)
  sheet.setColumnWidth(12, 90);  // STATUS
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô
  const player1Range = sheet.getRange(2, 4, sheet.getLastRow() - 1, 1);
  const player2Range = sheet.getRange(2, 10, sheet.getLastRow() - 1, 1);
  
  player1Range.setHorizontalAlignment('left');
  player1Range.setVerticalAlignment('middle');
  player1Range.setWrap(true);
  player1Range.setFontSize(11);
  
  player2Range.setHorizontalAlignment('left');
  player2Range.setVerticalAlignment('middle');
  player2Range.setWrap(true);
  player2Range.setFontSize(11);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  const resultRange = sheet.getRange(2, 11, sheet.getLastRow() - 1, 1);
  resultRange.setHorizontalAlignment('center');
  resultRange.setVerticalAlignment('middle');
  resultRange.setFontWeight('bold');
  resultRange.setFontSize(12);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö checkbox ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  const checkboxRange = sheet.getRange(2, 5, sheet.getLastRow() - 1, 4);
  checkboxRange.setHorizontalAlignment('center');
  checkboxRange.setVerticalAlignment('middle');
  checkboxRange.setBackground('#f8fafc');
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° border ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  const dataRange = sheet.getRange(2, 1, sheet.getLastRow() - 1, 12);
  dataRange.setBorder(true, true, true, true, true, true, '#e2e8f0', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  sheet.setRowHeights(2, sheet.getLastRow(), 25);
  
  SpreadsheetApp.getUi().alert('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
}








function undoLastPairing() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  const roundsData = pairingSheet.getRange('A2:A').getValues().flat();
  const rounds = roundsData.filter(r => r && r !== '' && !isNaN(r)).map(r => parseInt(r));
  
  if (rounds.length === 0) {
    SpreadsheetApp.getUi().alert('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≠‡∏ö‡πÉ‡∏î‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≠‡∏ô');
    return;
  }

  const lastRound = Math.max(...rounds);
  const data = pairingSheet.getDataRange().getValues();

  // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå (‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
  const rowsToClear = [];
  for (let i = 1; i < data.length; i++) {
    const roundValue = data[i][0];
    if (roundValue && roundValue !== '' && !isNaN(roundValue) && parseInt(roundValue) === lastRound) {
      rowsToClear.push(i + 1); // ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà i+1 (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ i ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0)
    }
  }

  if (rowsToClear.length === 0) {
    SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + lastRound);
    return;
  }

  // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
  const response = SpreadsheetApp.getUi().alert(
    '‚Ü©Ô∏è ‡∏¢‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î',
    '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + lastRound + ' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n' +
    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö: ' + rowsToClear.length + ' ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n' +
    '‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ',
    SpreadsheetApp.getUi().ButtonSet.YES_NO
  );

  if (response !== SpreadsheetApp.getUi().Button.YES) {
    return;
  }

  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß)
  rowsToClear.forEach(rowNum => {
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A ‡∏ñ‡∏∂‡∏á M (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô header)
    pairingSheet.getRange(rowNum, 1, 1, 13).clearContent();
    
    // ‡∏•‡∏ö checkbox ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå E, F, G, H
    try {
      pairingSheet.getRange(rowNum, 5, 1, 4).removeCheckboxes();
    } catch (e) {
      // ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏°‡∏µ checkbox) ‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
    }
    
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const rowRange = pairingSheet.getRange(rowNum, 1, 1, 13);
    rowRange.clearFormat(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏µ, ‡∏Ç‡∏≠‡∏ö, ‡∏ü‡∏≠‡∏ô‡∏ï‡πå)
  });

  SpreadsheetApp.getUi().alert('‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + lastRound + ' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
  updateStandings();
}

function fixIncompletePairing() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  // ‡∏´‡∏≤‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (P2_ID ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
  const data = pairingSheet.getDataRange().getValues();
  let problematicRounds = new Set();
  let problematicDetails = [];
  
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const round = row[0];
    const table = row[1];
    const p1Name = row[3];
    const p2Id = row[8]; // P2_ID column (I)
    const p2Name = row[9]; // PLAYER 2 column (J)
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤: P2_ID ‡∏ß‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠ P2_ID ‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
    if (round && p2Name && (!p2Id || p2Id === '' || p2Id.toString().length < 2)) {
      problematicRounds.add(round);
      problematicDetails.push('‡∏£‡∏≠‡∏ö ' + round + ' ‡πÇ‡∏ï‡πä‡∏∞ ' + table + ': ' + p1Name + ' vs ' + p2Name + ' (P2_ID: ' + (p2Id || '‡∏ß‡πà‡∏≤‡∏á') + ')');
    }
  }
  
  if (problematicRounds.size === 0) {
    SpreadsheetApp.getUi().alert('‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤');
    return;
  }
  
  const roundList = Array.from(problematicRounds).sort((a, b) => a - b).join(', ');
  
  const response = SpreadsheetApp.getUi().alert(
    'üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
    '‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏£‡∏≠‡∏ö: ' + roundList + '\n\n' +
    '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤:\n' + problematicDetails.join('\n') + '\n\n' +
    '‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n' +
    '‚Ä¢ ‡πÉ‡∏ä‡πà = ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡∏°‡πà\n' +
    '‚Ä¢ ‡πÑ‡∏°‡πà = ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç\n\n' +
    '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
    SpreadsheetApp.getUi().ButtonSet.YES_NO
  );
  
  if (response === SpreadsheetApp.getUi().Button.YES) {
    // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    const rowsToKeep = data.filter((row, i) => {
      if (i === 0) return true; // keep header
      return !problematicRounds.has(row[0]); // keep rows not in problematic rounds
    });
    
  pairingSheet.clearContents();
    pairingSheet.getRange(1, 1, rowsToKeep.length, data[0].length).setValues(rowsToKeep);
    
    // ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    problematicRounds.forEach(round => {
      pairNextRound();
    });
    
    SpreadsheetApp.getUi().alert(
      '‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö ' + roundList + ' ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n' +
      '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏î "üîÅ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    );
  } else {
    SpreadsheetApp.getUi().alert('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç\n\n‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏î‡πÜ');
  }
}

function fixMissingPlayerIDs() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ P2_ID ‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏°‡∏µ PLAYER 2
  const data = pairingSheet.getDataRange().getValues();
  let fixedCount = 0;
  let fixedDetails = [];
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠ -> ID ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  const playerMap = new Map();
  const playerData = pairingSheet.getRange(2, 1, pairingSheet.getLastRow() - 1, 2).getValues();
  playerData.forEach(row => {
    if (row[0] && row[1]) {
      playerMap.set(row[1].toString().trim(), row[0]);
    }
  });
  
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const round = row[0];
    const table = row[1];
    const p1Name = row[3];
    const p2Id = row[8]; // P2_ID column (I)
    const p2Name = row[9]; // PLAYER 2 column (J)
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤: P2_ID ‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏°‡∏µ PLAYER 2
    if (round && p2Name && (!p2Id || p2Id === '')) {
      const correctP2Id = playerMap.get(p2Name.toString().trim());
      if (correctP2Id) {
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç P2_ID
        pairingSheet.getRange(i + 1, 9).setValue(correctP2Id); // Column I (P2_ID)
        fixedCount++;
        fixedDetails.push('‡∏£‡∏≠‡∏ö ' + round + ' ‡πÇ‡∏ï‡πä‡∏∞ ' + table + ': ' + p1Name + ' vs ' + p2Name + ' (P2_ID: ' + correctP2Id + ')');
      }
    }
  }
  
  if (fixedCount === 0) {
    SpreadsheetApp.getUi().alert('‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö P2_ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
    return;
  }
  
  SpreadsheetApp.getUi().alert(
    '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç P2_ID ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ' + fixedCount + ' ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n\n' +
    fixedDetails.join('\n') + '\n\n' +
    '‡∏Å‡∏î "üîÅ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
  );
}

function doGet(e) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // Swiss Tournament Data
  const pairingSheet = ss.getSheetByName('Pairing');
  const playersSheet = ss.getSheetByName('Players');
  const standingSheet = ss.getSheetByName('Standing');
  
  // Round Robin Tournament Data
  const roundRobinSheet = ss.getSheetByName('Round Robin');
  const roundRobinStandingSheet = ss.getSheetByName('Round Robin Standing');
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Swiss Tournament
  const pairingData = pairingSheet.getDataRange().getValues();
  const playersData = playersSheet.getDataRange().getValues();
  const standingsData = standingSheet.getLastRow() > 1 ? standingSheet.getRange(1, 1, standingSheet.getLastRow(), standingSheet.getLastColumn()).getValues() : [];
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Round Robin Tournament
  const roundRobinData = roundRobinSheet.getLastRow() > 1 ? roundRobinSheet.getDataRange().getValues() : [];
  const roundRobinStandingData = roundRobinStandingSheet.getLastRow() > 1 ? roundRobinStandingSheet.getDataRange().getValues() : [];
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Hide Standing
  const hideStandingStatus = checkHideStandingStatus();

  return ContentService.createTextOutput(
    JSON.stringify({
      // Swiss Tournament
      pairing: pairingData,
      players: playersData,
      standings: standingsData,
      
      // Round Robin Tournament
      roundRobin: roundRobinData,
      roundRobinStandings: roundRobinStandingData,
      
      // Hide Standing Status
      hideStanding: hideStandingStatus
    })
  ).setMimeType(ContentService.MimeType.JSON);
}

function validatePairing() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const playersSheet = ss.getSheetByName('Players');
  
  const pairingData = pairingSheet.getDataRange().getValues();
  const playersData = playersSheet.getRange('A2:B').getValues();
  
  const issues = [];
  const matchHistory = {};
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ã‡πâ‡∏≥
  pairingData.slice(1).forEach((row, index) => {
    const p1 = row[2], p2 = row[8]; // P1_ID, P2_ID (index 8)
    const round = row[0];
    
    if (!p1 || !p2 || p2 === 'BYE') return;
    
    const pairKey = p1 + '-' + p2;
    const reverseKey = p2 + '-' + p1;
    
    if (matchHistory[pairKey] || matchHistory[reverseKey]) {
      issues.push('‡∏£‡∏≠‡∏ö ' + round + ': ' + getPlayerNameById(p1) + ' vs ' + getPlayerNameById(p2) + ' (‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ã‡πâ‡∏≥)');
    }
    
    matchHistory[pairKey] = true;
    matchHistory[reverseKey] = true;
  });
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å BYE
  const byeCount = {};
  pairingData.slice(1).forEach(row => {
    const p1 = row[2];
    const p2 = row[8]; // P2_ID ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà index 8
    
    if (p2 === 'BYE' && p1) {
      byeCount[p1] = (byeCount[p1] || 0) + 1;
    }
  });
  
  Object.entries(byeCount).forEach(([playerId, count]) => {
    if (count > 1) {
      issues.push(getPlayerNameById(playerId) + ' ‡πÑ‡∏î‡πâ BYE ' + count + ' ‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
  });
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
  const incompleteMatches = [];
  pairingData.slice(1).forEach((row, index) => {
    const result = row[10]; // Result column
    const p2 = row[8]; // P2_ID ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà index 8
    
    if (p2 !== 'BYE' && (!result || result === '')) {
      incompleteMatches.push('‡πÅ‡∏ñ‡∏ß ' + (index + 2) + ': ' + row[3] + ' vs ' + row[9] + ' (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•)'); // PLAYER 2 ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà index 9
    }
  });
  
  if (incompleteMatches.length > 0) {
    issues.push('‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à: ' + incompleteMatches.length + ' ‡∏Ñ‡∏π‡πà');
  }
  
  return {
    issues: issues,
    incompleteMatches: incompleteMatches,
    byeCount: byeCount
  };
}

function showPairingValidation() {
  const validation = validatePairing();
  
  let message = '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà:\n\n';
  
  if (validation.issues.length === 0) {
    message += '‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà';
  } else {
    message += '‚ö†Ô∏è ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤:\n';
    validation.issues.forEach(issue => {
      message += '‚Ä¢ ' + issue + '\n';
    });
  }
  
  if (validation.incompleteMatches.length > 0) {
    message += '\nüìã ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à: ' + validation.incompleteMatches.length + ' ‡∏Ñ‡∏π‡πà';
  }
  
  SpreadsheetApp.getUi().alert(message);
}

function showPairingStats() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const playersSheet = ss.getSheetByName('Players');
  
  const pairingData = pairingSheet.getDataRange().getValues();
  const playersData = playersSheet.getRange('A2:B').getValues();
  
  // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö
  const rounds = new Set();
  const playerStats = {};
  
  pairingData.slice(1).forEach(row => {
    const round = row[0];
    const p1 = row[2], p2 = row[9];
    const result = row[10];
    
    if (round) rounds.add(round);
    
    if (p1 && p1 !== '') {
      if (!playerStats[p1]) playerStats[p1] = { played: 0, byes: 0, incomplete: 0 };
      playerStats[p1].played++;
      if (p2 === 'BYE') playerStats[p1].byes++;
      if (p2 !== 'BYE' && (!result || result === '')) playerStats[p1].incomplete++;
    }
    
    if (p2 && p2 !== '' && p2 !== 'BYE') {
      if (!playerStats[p2]) playerStats[p2] = { played: 0, byes: 0, incomplete: 0 };
      playerStats[p2].played++;
      if (!result || result === '') playerStats[p2].incomplete++;
    }
  });
  
  const totalRounds = rounds.size;
  const totalPlayers = Object.keys(playerStats).length;
  const activePlayers = Object.values(playerStats).filter(p => p.played > 0).length;
  
      let message = 'üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô\n\n';
  message += 'üéØ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö: ' + totalRounds + '\n';
  message += 'üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ' + totalPlayers + '\n';
  message += 'üèÉ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: ' + activePlayers + '\n\n';
  
  // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  const playerList = Object.entries(playerStats)
    .sort((a, b) => b[1].played - a[1].played)
    .slice(0, 10); // ‡πÅ‡∏™‡∏î‡∏á 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
  
      message += 'üèÜ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:\n';
  playerList.forEach(([playerId, stats], index) => {
    const playerName = getPlayerNameById(playerId);
    message += (index + 1) + '. ' + playerName + ': ' + stats.played + ' ‡πÄ‡∏Å‡∏°';
    if (stats.byes > 0) message += ' (BYE: ' + stats.byes + ')';
          if (stats.incomplete > 0) message += ' ‚ö†Ô∏è';
      message += '\n';
  });
  
  // ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
  const incompleteCount = Object.values(playerStats).reduce((sum, p) => sum + p.incomplete, 0);
  if (incompleteCount > 0) {
    message += '\n‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à: ' + incompleteCount + ' ‡πÄ‡∏Å‡∏°';
  }
  
  SpreadsheetApp.getUi().alert(message);
}

function showTournamentAdvice() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const playersSheet = ss.getSheetByName('Players');
  const standingSheet = ss.getSheetByName('Standing');
  
  const pairingData = pairingSheet.getDataRange().getValues();
  const playersData = playersSheet.getRange('A2:B').getValues();
  
  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
  const rounds = new Set();
  const playerStats = {};
  const incompleteMatches = [];
  
  pairingData.slice(1).forEach(row => {
    const round = row[0];
    const p1 = row[2], p2 = row[9];
    const result = row[10];
    
    if (round) rounds.add(round);
    
    if (p1 && p1 !== '') {
      if (!playerStats[p1]) playerStats[p1] = { played: 0, wins: 0, draws: 0, losses: 0, byes: 0 };
      playerStats[p1].played++;
      if (p2 === 'BYE') playerStats[p1].byes++;
    }
    
    if (p2 && p2 !== '' && p2 !== 'BYE') {
      if (!playerStats[p2]) playerStats[p2] = { played: 0, wins: 0, draws: 0, losses: 0, byes: 0 };
      playerStats[p2].played++;
    }
    
    if (p2 !== 'BYE' && (!result || result === '')) {
      incompleteMatches.push({ round, p1: row[3], p2: row[8] });
    }
  });
  
  const totalRounds = rounds.size;
  const totalPlayers = Object.keys(playerStats).length;
  const activePlayers = Object.values(playerStats).filter(p => p.played > 0).length;
  const incompleteCount = incompleteMatches.length;
  
  let advice = 'üéØ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô\n\n';
  
  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  if (totalRounds === 0) {
    advice += 'üìã ‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å: ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô\n';
  } else if (totalRounds < 3) {
    advice += 'üìã ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + totalRounds + ': ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3-4 ‡∏£‡∏≠‡∏ö\n';
  } else if (totalRounds >= 6) {
    advice += 'üìã ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + totalRounds + ': ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß\n';
  } else {
    advice += 'üìã ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ' + totalRounds + ': ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£\n';
  }
  
  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  if (totalPlayers < 4) {
    advice += '‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (' + totalPlayers + ' ‡∏Ñ‡∏ô) - ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏Ñ‡∏ô\n';
  } else if (totalPlayers < 8) {
    advice += 'üìä ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ' + totalPlayers + ' ‡∏Ñ‡∏ô - ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ 3-4 ‡∏£‡∏≠‡∏ö\n';
  } else if (totalPlayers < 16) {
    advice += 'üìä ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ' + totalPlayers + ' ‡∏Ñ‡∏ô - ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ 4-5 ‡∏£‡∏≠‡∏ö\n';
  } else {
    advice += 'üìä ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ' + totalPlayers + ' ‡∏Ñ‡∏ô - ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ 5-6 ‡∏£‡∏≠‡∏ö\n';
  }
  
  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
  if (incompleteCount > 0) {
    advice += '\n‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à: ' + incompleteCount + ' ‡∏Ñ‡∏π‡πà\n';
    advice += 'üí° ‡∏Ñ‡∏ß‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ\n';
  }
  
  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å BYE
  const byeCounts = Object.values(playerStats).map(p => p.byes);
  const maxByes = Math.max(...byeCounts);
  if (maxByes > 1) {
    advice += '\n‚ö†Ô∏è ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ BYE ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n';
    advice += 'üí° ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å BYE\n';
  }
  
  // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  if (totalRounds > 0 && incompleteCount === 0) {
    advice += '\n‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ\n';
  } else if (incompleteCount > 0) {
    advice += '\n‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à\n';
  }
  
  // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
  advice += '\nüîß ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:\n';
  advice += '‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ\n';
  advice += '‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤\n';
  advice += '‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞\n';
  
  SpreadsheetApp.getUi().alert(advice);
}

function debugStandingsUpdate() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const standingSheet = ss.getSheetByName('Standing');
  
  let debugInfo = 'üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£ Debug Standings:\n\n';
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing
  const lastRow = pairingSheet.getLastRow();
  debugInfo += 'üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing: ' + lastRow + '\n';
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
  let matchCount = 0;
  let completedMatches = 0;
  let playerStats = {};
  
  for (let row = 2; row <= lastRow; row++) {
    const round = pairingSheet.getRange(row, 1).getValue();
    const p1 = pairingSheet.getRange(row, 4).getValue();
    const p2 = pairingSheet.getRange(row, 10).getValue();
    const result = pairingSheet.getRange(row, 11).getValue();
    
    if (round && p1 && p2 && p2 !== 'BYE') {
      matchCount++;
      
      if (result && result !== '') {
        completedMatches++;
        
        // ‡∏ô‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
        if (!playerStats[p1]) playerStats[p1] = { played: 0, wins: 0, draws: 0, losses: 0 };
        if (!playerStats[p2]) playerStats[p2] = { played: 0, wins: 0, draws: 0, losses: 0 };
        
        playerStats[p1].played++;
        playerStats[p2].played++;
        
        if (result === '1:0') {
          playerStats[p1].wins++;
          playerStats[p2].losses++;
        } else if (result === '0:1') {
          playerStats[p1].losses++;
          playerStats[p2].wins++;
        } else if (result === '1:1') {
          playerStats[p1].draws++;
          playerStats[p2].draws++;
        } else if (result === '0:0') {
          playerStats[p1].losses++;
          playerStats[p2].losses++;
        }
      }
    }
  }
  
  debugInfo += 'üéØ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: ' + matchCount + '\n';
  debugInfo += '‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ' + completedMatches + '\n';
  debugInfo += 'üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ' + Object.keys(playerStats).length + '\n\n';
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  if (Object.keys(playerStats).length > 0) {
    debugInfo += 'üìã ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô:\n';
    Object.entries(playerStats).forEach(([player, stats]) => {
      const points = stats.wins * 3 + stats.draws;
      const winRate = stats.played > 0 ? Math.round((stats.wins / stats.played) * 100) : 0;
      debugInfo += '‚Ä¢ ' + player + ': ' + stats.played + ' ‡πÄ‡∏Å‡∏°, ' + stats.wins + 'W ' + stats.draws + 'D ' + stats.losses + 'L (' + points + ' ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô, ' + winRate + '% WR)\n';
    });
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á Standings ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Standing
  const standingLastRow = standingSheet.getLastRow();
      debugInfo += '\nüèÜ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏µ‡∏ó Standing:\n';
  debugInfo += 'üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Standing: ' + standingLastRow + '\n';
  
  if (standingLastRow > 0) {
    const standingData = standingSheet.getRange(1, 1, standingLastRow, standingSheet.getLastColumn()).getValues();
    debugInfo += 'üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Standing:\n';
    
    standingData.forEach((row, index) => {
      if (index === 0) {
        debugInfo += 'Header: ' + row.join(' | ') + '\n';
      } else if (row[0] && row[0] !== '') {
                  debugInfo += 'Row ' + (index + 1) + ': ' + row.join(' | ') + '\n';
      }
    });
  } else {
    debugInfo += '‚ùå ‡∏ä‡∏µ‡∏ó Standing ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤';
  }
  
  SpreadsheetApp.getUi().alert(debugInfo);
}

function recreateStandingsTable() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const standingSheet = ss.getSheetByName('Standing');
  
  const response = SpreadsheetApp.getUi().alert(
    '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Standings ‡πÉ‡∏´‡∏°‡πà',
    '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Standing ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
    SpreadsheetApp.getUi().ButtonSet.YES_NO
  );
  
  if (response === SpreadsheetApp.getUi().Button.YES) {
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
    standingSheet.clearContents();
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
  updateStandings();
    
    SpreadsheetApp.getUi().alert('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Standings ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
  }
}

function clearAllData() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const standingSheet = ss.getSheetByName('Standing');
  const roundRobinSheet = ss.getSheetByName('Round Robin');
  const roundRobinStandingSheet = ss.getSheetByName('Round Robin Standing');
  const playersSheet = ss.getSheetByName('Players');
  
  const response = SpreadsheetApp.getUi().alert(
    'üßπ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
    '‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡∏µ‡∏ó\n\n' +
    '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Players)\n' +
    '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Pairing)\n' +
    '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standings (Standing)\n' +
    '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Round Robin (Round Robin)\n' +
    '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Round Robin Standing (Round Robin Standing)\n' +
    '‚Ä¢ Checkbox ‡πÅ‡∏•‡∏∞ Format ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n\n' +
    '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
    SpreadsheetApp.getUi().ButtonSet.YES_NO
  );
  
  if (response === SpreadsheetApp.getUi().Button.YES) {
    // === ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Players ===
    if (playersSheet) {
      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Players (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô header)
      const playersLastRow = playersSheet.getLastRow();
      if (playersLastRow > 1) {
        const playersDataRange = playersSheet.getRange(2, 1, playersLastRow - 1, playersSheet.getLastColumn());
        playersDataRange.clearContent();
        playersDataRange.clearFormat(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏™‡∏µ
        playersDataRange.removeCheckboxes(); // ‡∏•‡∏ö checkbox
      }
      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      playersSheet.getRange(2, 1, playersSheet.getMaxRows() - 1, playersSheet.getMaxColumns()).clearContent();
      playersSheet.getRange(2, 1, playersSheet.getMaxRows() - 1, playersSheet.getMaxColumns()).clearFormat();
      playersSheet.getRange(2, 1, playersSheet.getMaxRows() - 1, playersSheet.getMaxColumns()).removeCheckboxes();
    }
    
    // === ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Pairing ===
    const lastRow = pairingSheet.getLastRow();
    if (lastRow > 1) {
      const dataRange = pairingSheet.getRange(2, 1, lastRow - 1, pairingSheet.getLastColumn());
      dataRange.clearContent();
      dataRange.clearFormat(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏™‡∏µ
      dataRange.removeCheckboxes(); // ‡∏•‡∏ö checkbox
    }
    
    // === ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Standing ===
    standingSheet.clearContents();
    standingSheet.clearFormats(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏™‡∏µ (‡πÉ‡∏ä‡πâ clearFormats ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sheet object)
    
    // === ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Round Robin ===
    if (roundRobinSheet) {
      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Round Robin (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô header)
      const rrLastRow = roundRobinSheet.getLastRow();
      if (rrLastRow > 1) {
        const rrDataRange = roundRobinSheet.getRange(2, 1, rrLastRow - 1, roundRobinSheet.getLastColumn());
        rrDataRange.clearContent();
        rrDataRange.clearFormat(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏™‡∏µ
        rrDataRange.removeCheckboxes(); // ‡∏•‡∏ö checkbox
      }
      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      roundRobinSheet.getRange(2, 1, roundRobinSheet.getMaxRows() - 1, roundRobinSheet.getMaxColumns()).clearContent();
      roundRobinSheet.getRange(2, 1, roundRobinSheet.getMaxRows() - 1, roundRobinSheet.getMaxColumns()).clearFormat();
      roundRobinSheet.getRange(2, 1, roundRobinSheet.getMaxRows() - 1, roundRobinSheet.getMaxColumns()).removeCheckboxes();
    }
    
    // === ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏µ‡∏ó Round Robin Standing ===
    if (roundRobinStandingSheet) {
      roundRobinStandingSheet.clearContents();
      roundRobinStandingSheet.clearFormats(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡∏™‡∏µ (‡πÉ‡∏ä‡πâ clearFormats ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sheet object)
    }
    
    // === ‡∏™‡∏£‡πâ‡∏≤‡∏á header ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó Players ===
    if (playersSheet) {
      const playersHeaders = ['Player_id', 'Name', 'TR_ID', 'Tel'];
      playersSheet.getRange(1, 1, 1, playersHeaders.length).setValues([playersHeaders]);
      
      // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header Players
      const playersHeaderRange = playersSheet.getRange(1, 1, 1, playersHeaders.length);
      playersHeaderRange.setBackground('#f3f4f6');
      playersHeaderRange.setFontWeight('bold');
      playersHeaderRange.setHorizontalAlignment('center');
      playersHeaderRange.setBorder(true, true, true, true, true, true, '#d1d5db', SpreadsheetApp.BorderStyle.SOLID);
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
      playersSheet.setColumnWidth(1, 100); // Player_id
      playersSheet.setColumnWidth(2, 200); // Name
      playersSheet.setColumnWidth(3, 120); // TR_ID
      playersSheet.setColumnWidth(4, 120); // Tel
    }
    
    // === ‡∏™‡∏£‡πâ‡∏≤‡∏á header ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó Pairing ===
    const pairingHeaders = ['ROUND', 'TABLE', 'P1_ID', 'PLAYER 1', 'WIN_P1', 'DRAW', 'WIN_P2', 'Double Loss', 'P2_ID', 'PLAYER 2', 'RESULT', 'STATUS', 'Drop'];
    pairingSheet.getRange(1, 1, 1, pairingHeaders.length).setValues([pairingHeaders]);
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header Pairing
    const pairingHeaderRange = pairingSheet.getRange(1, 1, 1, pairingHeaders.length);
    pairingHeaderRange.setBackground('#f3f4f6');
    pairingHeaderRange.setFontWeight('bold');
    pairingHeaderRange.setHorizontalAlignment('center');
    pairingHeaderRange.setBorder(true, true, true, true, true, true, '#d1d5db', SpreadsheetApp.BorderStyle.SOLID);
    
    // === ‡∏™‡∏£‡πâ‡∏≤‡∏á header ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó Standing ===
    const standingHeaders = ['RANK', 'PLAYER ID', 'PLAYER NAME', 'TR_ID', 'WINS', 'DRAWS', 'LOSSES', 'POINTS', 'WIN RATE', 'OW%', 'H2H'];
    standingSheet.getRange(1, 1, 1, standingHeaders.length).setValues([standingHeaders]);
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header Standing
    const standingHeaderRange = standingSheet.getRange(1, 1, 1, standingHeaders.length);
    standingHeaderRange.setBackground('#34a853');
    standingHeaderRange.setFontColor('white');
    standingHeaderRange.setFontWeight('bold');
    standingHeaderRange.setHorizontalAlignment('center');
    
    // === ‡∏™‡∏£‡πâ‡∏≤‡∏á header ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó Round Robin ===
    if (roundRobinSheet) {
      const rrHeaders = ['ROUND', 'MATCH', 'P1_ID', 'PLAYER 1', 'P1_TR_ID', 'P1_RANK', 'WIN_P1', 'DRAW', 'WIN_P2', 'Double Loss', 'P2_ID', 'PLAYER 2', 'P2_TR_ID', 'P2_RANK', 'RESULT', 'STATUS'];
      roundRobinSheet.getRange(1, 1, 1, rrHeaders.length).setValues([rrHeaders]);
      
      // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header Round Robin
      const rrHeaderRange = roundRobinSheet.getRange(1, 1, 1, rrHeaders.length);
      rrHeaderRange.setBackground('#f3f4f6');
      rrHeaderRange.setFontWeight('bold');
      rrHeaderRange.setHorizontalAlignment('center');
      rrHeaderRange.setBorder(true, true, true, true, true, true, '#d1d5db', SpreadsheetApp.BorderStyle.SOLID);
    }
    
    // === ‡∏™‡∏£‡πâ‡∏≤‡∏á header ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó Round Robin Standing ===
    if (roundRobinStandingSheet) {
      const rrStandingHeaders = ['RANK', 'PLAYER ID', 'PLAYER NAME', 'TR_ID', 'WINS', 'DRAWS', 'LOSSES', 'POINTS', 'WIN RATE', 'OW%', 'H2H'];
      roundRobinStandingSheet.getRange(1, 1, 1, rrStandingHeaders.length).setValues([rrStandingHeaders]);
      
      // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header Round Robin Standing
      const rrStandingHeaderRange = roundRobinStandingSheet.getRange(1, 1, 1, rrStandingHeaders.length);
      rrStandingHeaderRange.setBackground('#34a853');
      rrStandingHeaderRange.setFontColor('white');
      rrStandingHeaderRange.setFontWeight('bold');
      rrStandingHeaderRange.setHorizontalAlignment('center');
    }
    
    SpreadsheetApp.getUi().alert(
      '‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß\n\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Players)\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Pairing)\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standings (Standing)\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Round Robin (Round Robin)\n' +
      '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Round Robin Standing (Round Robin Standing)\n' +
      '‚Ä¢ Checkbox ‡πÅ‡∏•‡∏∞ Format ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n\n' +
      '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà!',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
}

function generatePlayerIDs() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const playersSheet = ss.getSheetByName('Players');
  
  // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
  const data = playersSheet.getDataRange().getValues();
  let playerCount = 0;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Name ‡πÅ‡∏•‡∏∞ Tel ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  for (let i = 1; i < data.length; i++) {
    const name = data[i][1]; // Column B (Name)
    const tel = data[i][3];  // Column D (Tel) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å C ‡πÄ‡∏õ‡πá‡∏ô D
    
    if (name && name.toString().trim() !== '' && tel && tel.toString().trim() !== '') {
      playerCount++;
    }
  }
  
  if (playerCount === 0) {
    SpreadsheetApp.getUi().alert(
      '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô',
      '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Name ‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Tel ‡∏Å‡πà‡∏≠‡∏ô',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    return;
  }
  
  const response = SpreadsheetApp.getUi().alert(
    'üÜî ‡∏™‡∏£‡πâ‡∏≤‡∏á Player ID ‡πÅ‡∏•‡∏∞ TR_ID ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
    '‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ' + playerCount + ' ‡∏Ñ‡∏ô\n\n' +
    'Player ID ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô:\n' +
    '‚Ä¢ P001, P002, P003, ... (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 1-9 ‡∏Ñ‡∏ô)\n' +
    '‚Ä¢ P01, P02, P03, ... (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 10-99 ‡∏Ñ‡∏ô)\n' +
    '‚Ä¢ P1, P2, P3, ... (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 100+ ‡∏Ñ‡∏ô)\n\n' +
    'TR_ID ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô:\n' +
    '‚Ä¢ th + ‡πÄ‡∏•‡∏Ç 8 ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏ä‡πà‡∏ô th12345678)\n\n' +
    '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô: TR_ID_‡∏ä‡∏∑‡πà‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô th34294245_Visthisidh L.)\n\n' +
    '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏µ 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 0957780151)\n\n' +
    '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Player ID ‡πÅ‡∏•‡∏∞ TR_ID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
    SpreadsheetApp.getUi().ButtonSet.YES_NO
  );
  
  if (response === SpreadsheetApp.getUi().Button.YES) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Player ID, TR_ID ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠
    let idCounter = 1;
    const idFormat = playerCount < 10 ? 'P00' : 'P0';
    
    for (let i = 1; i < data.length; i++) {
      const name = data[i][1]; // Column B (Name)
      const tel = data[i][3];  // Column D (Tel) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å C ‡πÄ‡∏õ‡πá‡∏ô D
      
      if (name && name.toString().trim() !== '' && tel && tel.toString().trim() !== '') {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Player ID
    let playerID;
    if (playerCount < 10) {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 1-9 ‡∏Ñ‡∏ô: P001, P002, P003, ...
      playerID = 'P00' + idCounter;
    } else if (playerCount < 100) {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 10-99 ‡∏Ñ‡∏ô: P01, P02, P03, ...
      playerID = 'P0' + idCounter;
    } else {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 100+ ‡∏Ñ‡∏ô: P1, P2, P3, ...
      playerID = 'P' + idCounter;
    }
    playersSheet.getRange(i + 1, 1).setValue(playerID); // Column A (Player_id)
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á TR_ID (th + ‡πÄ‡∏•‡∏Ç 8 ‡∏´‡∏•‡∏±‡∏Å)
        const trId = 'th' + Math.floor(Math.random() * 90000000 + 10000000); // ‡πÄ‡∏•‡∏Ç 8 ‡∏´‡∏•‡∏±‡∏Å
        playersSheet.getRange(i + 1, 3).setValue(trId); // Column C (TR_ID)
        
        // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠: TR_ID_‡∏ä‡∏∑‡πà‡∏≠
        const formattedName = formatPlayerNameWithTRID(trId, name.toString().trim());
        playersSheet.getRange(i + 1, 2).setValue(formattedName); // Column B (Name)
        
        // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡∏°‡∏µ 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
        let formattedTel = tel.toString().trim();
        if (!formattedTel.startsWith('0')) {
          formattedTel = '0' + formattedTel;
        }
        playersSheet.getRange(i + 1, 4).setValue(formattedTel); // Column D (Tel)
        
        idCounter++;
      }
    }
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Player_id
    const idRange = playersSheet.getRange(2, 1, playerCount, 1);
    idRange.setBackground('#e0f2fe');
    idRange.setFontWeight('bold');
    idRange.setHorizontalAlignment('center');
    idRange.setBorder(true, true, true, true, true, true, '#0288d1', SpreadsheetApp.BorderStyle.SOLID);
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Name
    const nameRange = playersSheet.getRange(2, 2, playerCount, 1);
    nameRange.setBackground('#f3e5f5');
    nameRange.setFontWeight('bold');
    nameRange.setHorizontalAlignment('center');
    nameRange.setBorder(true, true, true, true, true, true, '#9c27b0', SpreadsheetApp.BorderStyle.SOLID);
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå TR_ID
    const trIdRange = playersSheet.getRange(2, 3, playerCount, 1);
    trIdRange.setBackground('#fff3e0');
    trIdRange.setFontWeight('bold');
    trIdRange.setHorizontalAlignment('center');
    trIdRange.setBorder(true, true, true, true, true, true, '#ff9800', SpreadsheetApp.BorderStyle.SOLID);
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Tel
    const telRange = playersSheet.getRange(2, 4, playerCount, 1);
    telRange.setBackground('#e8f5e8');
    telRange.setFontWeight('bold');
    telRange.setHorizontalAlignment('center');
    telRange.setBorder(true, true, true, true, true, true, '#4caf50', SpreadsheetApp.BorderStyle.SOLID);
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    playersSheet.setColumnWidth(1, 100); // Player_id
    playersSheet.setColumnWidth(2, 200); // Name (‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö TR_ID_‡∏ä‡∏∑‡πà‡∏≠)
    playersSheet.setColumnWidth(3, 120); // TR_ID
    playersSheet.setColumnWidth(4, 120); // Tel (‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£)
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    for (let i = 2; i <= playerCount + 1; i++) {
      playersSheet.setRowHeight(i, 30);
    }
    
    SpreadsheetApp.getUi().alert(
      '‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Player ID ‡πÅ‡∏•‡∏∞ TR_ID ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      '‡∏™‡∏£‡πâ‡∏≤‡∏á Player ID ‡πÅ‡∏•‡∏∞ TR_ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ' + playerCount + ' ‡∏Ñ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n' +
      'Player ID ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô\n' +
      'TR_ID ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç 8 ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô\n' +
      '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô: TR_ID_‡∏ä‡∏∑‡πà‡∏≠\n' +
      '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏µ 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 0957780151)\n\n' +
      'üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: Player ID ‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏•‡∏Ç 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
}

// üìù ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ‡∏ä‡∏∑‡πà‡∏≠ + ‡∏ï‡∏±‡∏ß‡∏¢‡πà‡∏≠‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
function formatPlayerName(fullName) {
  const nameParts = fullName.split(' ').filter(part => part.trim() !== '');
  
  if (nameParts.length === 1) {
    // ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    return nameParts[0];
  } else if (nameParts.length >= 2) {
    // ‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
    const firstName = nameParts[0];
    const lastName = nameParts[nameParts.length - 1];
    const lastNameInitial = lastName.charAt(0).toUpperCase() + '.';
    return firstName + ' ' + lastNameInitial;
  }
  
  return fullName; // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
}

// üìù ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° TR_ID: TR_ID_‡∏ä‡∏∑‡πà‡∏≠
function formatPlayerNameWithTRID(trId, fullName) {
  const formattedName = formatPlayerName(fullName);
  return trId + '_' + formattedName;
}

function showBracketPairing() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const standingSheet = ss.getSheetByName('Standing');
  const playersSheet = ss.getSheetByName('Players');

  // ‡∏î‡∏∂‡∏á drop list
  const dropList = pairingSheet.getRange('M2:M').getValues().flat().filter(name => name);

  // ‡∏î‡∏∂‡∏á standings
  let standings = [];
  if (standingSheet.getLastRow() > 1) {
    standings = standingSheet.getRange(2, 1, standingSheet.getLastRow() - 1, 3).getValues();
  }

  if (standings.length === 0) {
    SpreadsheetApp.getUi().alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Standings\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡∏Å‡πà‡∏≠‡∏ô');
    return;
  }

  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å ID
  const playerData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 4).getValues();
  const getName = id => {
    const found = playerData.find(row => row[0] === id);
    return found ? found[1] : id;
  };

  // ‡∏ï‡∏±‡∏î‡∏Ñ‡∏ô drop ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  const activePlayers = standings
    .filter(r => r[1] && r[1] !== '' && !dropList.includes(r[1]))
    .sort((a, b) => b[2] - a[2]);

  const playerBrackets = {};
  activePlayers.forEach(player => {
    const points = player[2];
    if (!playerBrackets[points]) playerBrackets[points] = [];
    playerBrackets[points].push(player[1]); // Player ID
  });

  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Bracket Pairing
  let message = 'üìä Bracket Pairing Analysis\n\n';
  
  const sortedPoints = Object.keys(playerBrackets).map(Number).sort((a, b) => b - a);
  
  sortedPoints.forEach(points => {
    const playersInBracket = playerBrackets[points];
    message += `üèÜ ${points} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (${playersInBracket.length} ‡∏Ñ‡∏ô):\n`;
    
    playersInBracket.forEach(playerId => {
      const playerName = getName(playerId);
      const playerStanding = standings.find(s => s[1] === playerId);
      const winRate = playerStanding ? playerStanding[8] : '0%';
      const owRate = playerStanding ? playerStanding[9] : '0%';
      message += `  ‚Ä¢ ${playerName} (${playerId}) - WR: ${winRate}, OW: ${owRate}\n`;
    });
    message += '\n';
  });

  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
  message += 'üîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:\n';
  message += `‚Ä¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${activePlayers.length} ‡∏Ñ‡∏ô\n`;
  message +=(`‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Bracket: ${sortedPoints.length} ‡∏Å‡∏•‡∏∏‡πà‡∏°\n`);
  
  if (activePlayers.length % 2 === 1) {
    message += '‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏µ‡πà - ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å BYE\n';
  } else {
    message += '‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏π‡πà - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å BYE\n';
  }

  // ‡πÅ‡∏™‡∏î‡∏á Bracket ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
  const problematicBrackets = [];
  sortedPoints.forEach(points => {
    const playersInBracket = playerBrackets[points];
    if (playersInBracket.length === 1) {
      problematicBrackets.push(`${points} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (${getName(playersInBracket[0])})`);
    }
  });

  if (problematicBrackets.length > 0) {
    message += `\n‚ö†Ô∏è Bracket ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà:\n`;
    problematicBrackets.forEach(bracket => {
      message += `  ‚Ä¢ ${bracket}\n`;
    });
  }

  SpreadsheetApp.getUi().alert(message);
}

// üèÜ Round Robin Tournament Functions
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏û‡∏ö‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î (‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î)

// üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á Round Robin Tournament
function createRoundRobinTournament() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const playersSheet = ss.getSheetByName("Players");
  const roundRobinSheet = ss.getSheetByName("Round Robin");
  
  if (!playersSheet || !roundRobinSheet) {
    return SpreadsheetApp.getUi().alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Players ‡∏´‡∏£‡∏∑‡∏≠ Round Robin");
  }
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  const playersData = playersSheet.getDataRange().getValues();
  const headers = playersData[0];
  
  // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  const idCol = headers.indexOf("Player_id");
  const nameCol = headers.indexOf("Name");
  const trIdCol = headers.indexOf("TR_ID");
  const rankCol = headers.indexOf("Rank");
  
  if (idCol === -1 || nameCol === -1) {
    return SpreadsheetApp.getUi().alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Player_id ‡∏´‡∏£‡∏∑‡∏≠ Name ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Players");
  }
  
  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà active
  const activePlayers = playersData.slice(1).filter(row => {
    const playerName = String(row[nameCol]).trim();
    return playerName && playerName !== "" && playerName !== "BYE";
  });
  
  if (activePlayers.length < 2) {
    return SpreadsheetApp.getUi().alert("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏ô");
  }
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö
  const playerCount = activePlayers.length;
  const totalRounds = playerCount - 1;
  const matchesPerRound = Math.floor(playerCount / 2);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Round Robin Schedule
  const schedule = generateRoundRobinSchedule(activePlayers, idCol, nameCol, trIdCol);
  
  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Round Robin
  roundRobinSheet.clearContents();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Headers
  const roundRobinHeaders = [
    "ROUND", "MATCH", "P1_ID", "PLAYER 1", "P1_TR_ID", "P1_RANK", 
    "WIN_P1", "DRAW", "WIN_P2", "Double Loss",
    "P2_ID", "PLAYER 2", "P2_TR_ID", "P2_RANK", "RESULT", "STATUS"
  ];
  
  roundRobinSheet.getRange(1, 1, 1, roundRobinHeaders.length).setValues([roundRobinHeaders]);
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó Headers
  const headerRange = roundRobinSheet.getRange(1, 1, 1, roundRobinHeaders.length);
  headerRange.setBackground("#4285f4");
  headerRange.setFontColor("white");
  headerRange.setFontWeight("bold");
  headerRange.setHorizontalAlignment("center");
  
  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
  let currentRow = 2;
  
  schedule.forEach((round, roundIndex) => {
    round.forEach((match, matchIndex) => {
      const rowData = [
        roundIndex + 1, // ROUND
        matchIndex + 1, // MATCH
        match.player1.id, // P1_ID
        match.player1.name, // PLAYER 1
        match.player1.trId || "", // P1_TR_ID
        match.player1.rank || "", // P1_RANK
        false, // WIN_P1 (checkbox)
        false, // DRAW (checkbox)
        false, // WIN_P2 (checkbox)
        false, // Double Loss (checkbox)
        match.player2.id, // P2_ID
        match.player2.name, // PLAYER 2
        match.player2.trId || "", // P2_TR_ID
        match.player2.rank || "", // P2_RANK
        "", // RESULT
        "" // STATUS
      ];
      
      roundRobinSheet.getRange(currentRow, 1, 1, rowData.length).setValues([rowData]);
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ checkboxes
      roundRobinSheet.getRange(currentRow, 7, 1, 4).insertCheckboxes();
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó
      const rowRange = roundRobinSheet.getRange(currentRow, 1, 1, rowData.length);
      rowRange.setBorder(true, true, true, true, true, true);
      
      // ‡∏™‡∏µ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß
      if (roundIndex % 2 === 0) {
        rowRange.setBackground("#f8f9fa");
      }
      
      currentRow++;
    });
  });
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
  roundRobinSheet.setColumnWidth(1, 60); // ROUND
  roundRobinSheet.setColumnWidth(2, 60); // MATCH
  roundRobinSheet.setColumnWidth(3, 80); // P1_ID
  roundRobinSheet.setColumnWidth(4, 120); // PLAYER 1
  roundRobinSheet.setColumnWidth(5, 100); // P1_TR_ID
  roundRobinSheet.setColumnWidth(6, 80); // P1_RANK
  roundRobinSheet.setColumnWidth(7, 60); // WIN_P1
  roundRobinSheet.setColumnWidth(8, 60); // DRAW
  roundRobinSheet.setColumnWidth(9, 60); // WIN_P2
  roundRobinSheet.setColumnWidth(10, 80); // Double Loss
  roundRobinSheet.setColumnWidth(11, 80); // P2_ID
  roundRobinSheet.setColumnWidth(12, 120); // PLAYER 2
  roundRobinSheet.setColumnWidth(13, 100); // P2_TR_ID
  roundRobinSheet.setColumnWidth(14, 80); // P2_RANK
  roundRobinSheet.setColumnWidth(15, 80); // RESULT
  roundRobinSheet.setColumnWidth(16, 80); // STATUS
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ
  const summary = `
üèÜ Round Robin Tournament ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ${playerCount} ‡∏Ñ‡∏ô
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö: ${totalRounds} ‡∏£‡∏≠‡∏ö
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö: ${matchesPerRound} ‡πÅ‡∏°‡∏ï‡∏ä‡πå
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalRounds * matchesPerRound} ‡πÅ‡∏°‡∏ï‡∏ä‡πå

üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡∏µ‡∏ó "Round Robin"
2. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ checkboxes
3. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
4. ‡∏î‡∏π‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏µ‡∏ó "Round Robin Standing"

üéØ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏ö‡∏ö Round Robin ‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î
  `;
  
  SpreadsheetApp.getUi().alert("Round Robin Tournament\n\n" + summary);
}

// üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô Round Robin
function generateRoundRobinSchedule(players, idCol, nameCol, trIdCol) {
  const playerCount = players.length;
  const schedule = [];
  
  // ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏µ‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° BYE
  let playerList = [...players];
  if (playerCount % 2 === 1) {
    playerList.push({
      [idCol]: "BYE",
      [nameCol]: "BYE",
      [trIdCol]: "BYE",
      rank: ""
    });
  }
  
  const n = playerList.length;
  const rounds = n - 1;
  const halfSize = n / 2;
  
  for (let round = 0; round < rounds; round++) {
    const roundMatches = [];
    
    for (let i = 0; i < halfSize; i++) {
      const player1Index = i;
      const player2Index = n - 1 - i;
      
      // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô BYE
      if (playerList[player1Index][nameCol] === "BYE" || playerList[player2Index][nameCol] === "BYE") {
        continue;
      }
      
      roundMatches.push({
        player1: {
          id: playerList[player1Index][idCol],
          name: playerList[player1Index][nameCol],
          trId: playerList[player1Index][trIdCol] || "",
          rank: playerList[player1Index].rank || ""
        },
        player2: {
          id: playerList[player2Index][idCol],
          name: playerList[player2Index][nameCol],
          trId: playerList[player2Index][trIdCol] || "",
          rank: playerList[player2Index].rank || ""
        }
      });
    }
    
    schedule.push(roundMatches);
    
    // ‡∏´‡∏°‡∏∏‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ (Berger Table)
    const lastPlayer = playerList.pop();
    playerList.splice(1, 0, lastPlayer);
  }
  
  return schedule;
}

// üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô Round Robin
function updateRoundRobinResults() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const roundRobinSheet = ss.getSheetByName("Round Robin");
  
  if (!roundRobinSheet) {
    return SpreadsheetApp.getUi().alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Round Robin");
  }
  
  const data = roundRobinSheet.getDataRange().getValues();
  const headers = data[0];
  
  // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  const winP1Col = headers.indexOf("WIN_P1");
  const drawCol = headers.indexOf("DRAW");
  const winP2Col = headers.indexOf("WIN_P2");
  const doubleLossCol = headers.indexOf("Double Loss");
  const resultCol = headers.indexOf("RESULT");
  const statusCol = headers.indexOf("STATUS");
  
  let updatedCount = 0;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const winP1 = row[winP1Col];
    const draw = row[drawCol];
    const winP2 = row[winP2Col];
    const doubleLoss = row[doubleLossCol];
    
    let result = "";
    let status = "";
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    if (winP1) {
      result = "1:0";
      status = "OK";
    } else if (winP2) {
      result = "0:1";
      status = "OK";
    } else if (draw) {
      result = "1:1";
      status = "OK";
    } else if (doubleLoss) {
      result = "0:0";
      status = "OK";
    } else {
      result = "";
      status = "";
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    roundRobinSheet.getRange(i + 1, resultCol + 1).setValue(result);
    roundRobinSheet.getRange(i + 1, statusCol + 1).setValue(status);
    
    if (result !== "") {
      updatedCount++;
    }
  }
  
  SpreadsheetApp.getUi().alert(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:\n‚Ä¢ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•: ${updatedCount} ‡πÅ‡∏°‡∏ï‡∏ä‡πå\n‚Ä¢ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•: ${data.length - 1 - updatedCount} ‡πÅ‡∏°‡∏ï‡∏ä‡πå`);
}

// üèÜ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• Round Robin
function createRoundRobinStanding() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const roundRobinSheet = ss.getSheetByName("Round Robin");
  const standingSheet = ss.getSheetByName("Round Robin Standing");
  
  if (!roundRobinSheet || !standingSheet) {
    return SpreadsheetApp.getUi().alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Round Robin ‡∏´‡∏£‡∏∑‡∏≠ Round Robin Standing");
  }
  
  const data = roundRobinSheet.getDataRange().getValues();
  const headers = data[0];
  
  // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  const p1IdCol = headers.indexOf("P1_ID");
  const p1NameCol = headers.indexOf("PLAYER 1");
  const p1TrIdCol = headers.indexOf("P1_TR_ID");
  const p2IdCol = headers.indexOf("P2_ID");
  const p2NameCol = headers.indexOf("PLAYER 2");
  const p2TrIdCol = headers.indexOf("P2_TR_ID");
  const resultCol = headers.indexOf("RESULT");
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  const playerStats = {};
  const opponentHistory = {}; // ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
  
  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const p1Id = row[p1IdCol];
    const p1Name = row[p1NameCol];
    const p2Id = row[p2IdCol];
    const p2Name = row[p2NameCol];
    const result = row[resultCol];
    
    // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•
    if (!result || result === "") continue;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á player stats ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!playerStats[p1Id]) {
      playerStats[p1Id] = {
        id: p1Id,
        name: p1Name,
        trId: row[p1TrIdCol] || "",
        wins: 0,
        draws: 0,
        losses: 0,
        points: 0
      };
    }
    
    if (!playerStats[p2Id]) {
      playerStats[p2Id] = {
        id: p2Id,
        name: p2Name,
        trId: row[p2TrIdCol] || "",
        wins: 0,
        draws: 0,
        losses: 0,
        points: 0
      };
    }
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ
    if (!opponentHistory[p1Id]) opponentHistory[p1Id] = [];
    if (!opponentHistory[p2Id]) opponentHistory[p2Id] = [];
    opponentHistory[p1Id].push(p2Id);
    opponentHistory[p2Id].push(p1Id);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    if (result === "1:0") {
      playerStats[p1Id].wins++;
      playerStats[p1Id].points += 3;
      playerStats[p2Id].losses++;
    } else if (result === "0:1") {
      playerStats[p2Id].wins++;
      playerStats[p2Id].points += 3;
      playerStats[p1Id].losses++;
    } else if (result === "1:1") {
      playerStats[p1Id].draws++;
      playerStats[p1Id].points += 1;
      playerStats[p2Id].draws++;
      playerStats[p2Id].points += 1;
    } else if (result === "0:0") {
      // Double Loss - ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    }
  }
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OW% (Opponent's Win Percentage)
  const calculateOW = (playerId) => {
    const opponents = opponentHistory[playerId] || [];
    if (opponents.length === 0) return 0;
    
    let totalOpponentWins = 0;
    let totalOpponentGames = 0;

    opponents.forEach(opponentId => {
      const opponentStats = playerStats[opponentId];
      if (opponentStats) {
        totalOpponentWins += opponentStats.wins;
        totalOpponentGames += opponentStats.wins + opponentStats.draws + opponentStats.losses;
      }
    });
    
    return totalOpponentGames > 0 ? Math.round((totalOpponentWins / totalOpponentGames) * 100) : 0;
  };
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Head-to-Head (‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô)
  const calculateHeadToHead = (playerId, opponentId) => {
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const p1Id = row[p1IdCol];
      const p2Id = row[p2IdCol];
      const result = row[resultCol];
      
      if (!result || result === "") continue;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if ((p1Id === playerId && p2Id === opponentId) || 
          (p1Id === opponentId && p2Id === playerId)) {
        
        // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
        console.log(`Found match: ${p1Id} vs ${p2Id} = ${result}`);
        
        if (result === "1:0") {
          const winner = p1Id === playerId ? 1 : -1;
          console.log(`${playerId} ${winner === 1 ? '‡∏ä‡∏ô‡∏∞' : '‡πÅ‡∏û‡πâ'} ${opponentId}`);
          return winner;
        } else if (result === "0:1") {
          const winner = p1Id === playerId ? -1 : 1;
          console.log(`${playerId} ${winner === 1 ? '‡∏ä‡∏ô‡∏∞' : '‡πÅ‡∏û‡πâ'} ${opponentId}`);
          return winner;
        } else if (result === "1:1") {
          console.log(`${playerId} ‡πÄ‡∏™‡∏°‡∏≠ ${opponentId}`);
          return 0;
        }
      }
    }
    console.log(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á ${playerId} ‡πÅ‡∏•‡∏∞ ${opponentId}`);
    return 0; // ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
  };
  
  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
  const standings = Object.values(playerStats).map(player => ({
    ...player,
    owRate: calculateOW(player.id)
  }));
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö H2H
  standings.sort((a, b) => {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
    if (b.points !== a.points) return b.points - a.points;
    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏∞ (‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
    if (b.wins !== a.wins) return b.wins - a.wins;
    // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏ô‡∏∞‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° OW% (‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
    if (b.owRate !== a.owRate) return b.owRate - a.owRate;
    // ‡∏ñ‡πâ‡∏≤ OW% ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Head-to-Head
    const h2h = calculateHeadToHead(a.id, b.id);
    if (h2h !== 0) {
      // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
      console.log(`H2H: ${a.name} vs ${b.name} = ${h2h} (${h2h === 1 ? a.name + ' ‡∏ä‡∏ô‡∏∞' : b.name + ' ‡∏ä‡∏ô‡∏∞'})`);
      // ‡πÉ‡∏Ñ‡∏£‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô H2H = ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ (h2h = 1 ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á a ‡∏ä‡∏ô‡∏∞ b)
      // ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏ä‡∏ô‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏•‡∏±‡∏ö
      return -h2h; // ‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢
    }
    // ‡∏ñ‡πâ‡∏≤ H2H ‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
    return a.name.localeCompare(b.name);
  });
  
  // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
  console.log('=== ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ===');
  standings.forEach((player, index) => {
    console.log(`${index + 1}. ${player.name} (${player.id}) - ${player.points} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`);
  });
  
  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
  standingSheet.clearContents();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Headers
  const standingHeaders = [
    "RANK", "PLAYER ID", "PLAYER NAME", "TR_ID", "WINS", "DRAWS", "LOSSES", "POINTS", "WIN RATE", "OW%", "H2H"
  ];
  
  standingSheet.getRange(1, 1, 1, standingHeaders.length).setValues([standingHeaders]);
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó Headers
  const headerRange = standingSheet.getRange(1, 1, 1, standingHeaders.length);
  headerRange.setBackground("#34a853");
  headerRange.setFontColor("white");
  headerRange.setFontWeight("bold");
  headerRange.setHorizontalAlignment("center");
  
  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  standings.forEach((player, index) => {
    const totalGames = player.wins + player.draws + player.losses;
    const winRate = totalGames > 0 ? ((player.wins / totalGames) * 100).toFixed(1) + "%" : "0%";
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì H2H ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    let h2hInfo = "";
    // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
    const tiedPlayers = standings.filter(p => 
      p.points === player.points && 
      p.wins === player.wins && 
      p.owRate === player.owRate && 
      p.id !== player.id
    );
    
    if (tiedPlayers.length > 0) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö H2H ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
      for (const otherPlayer of tiedPlayers) {
        const h2h = calculateHeadToHead(player.id, otherPlayer.id);
        if (h2h === 1) {
          h2hInfo = `W vs ${otherPlayer.name}`;
          break;
        } else if (h2h === -1) {
          h2hInfo = `L vs ${otherPlayer.name}`;
          break;
        } else if (h2h === 0) {
          h2hInfo = `D vs ${otherPlayer.name}`;
          break;
        }
      }
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏• H2H ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠
      if (h2hInfo === "") {
        h2hInfo = `Tied with ${tiedPlayers.length} player(s)`;
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (tiedPlayers.length > 0) {
      console.log(`‚ö†Ô∏è  ${player.name} ‡∏°‡∏µ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö: ${tiedPlayers.map(p => p.name).join(', ')}`);
      tiedPlayers.forEach(otherPlayer => {
        const h2h = calculateHeadToHead(player.id, otherPlayer.id);
        console.log(`   ${player.name} vs ${otherPlayer.name}: ${h2h === 1 ? 'W' : h2h === -1 ? 'L' : 'D'}`);
      });
    }
    
    // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
    console.log(`Rank ${index + 1}: ${player.name} (${player.id}) - ${player.points} pts, H2H: ${h2hInfo}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (tiedPlayers.length > 0) {
      console.log(`‚ö†Ô∏è  ${player.name} ‡∏°‡∏µ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö: ${tiedPlayers.map(p => p.name).join(', ')}`);
      tiedPlayers.forEach(otherPlayer => {
        const h2h = calculateHeadToHead(player.id, otherPlayer.id);
        console.log(`   ${player.name} vs ${otherPlayer.name}: ${h2h === 1 ? 'W' : h2h === -1 ? 'L' : 'D'}`);
      });
    }
    
    const rowData = [
      index + 1, // RANK
      player.id, // PLAYER ID
      player.name, // PLAYER NAME
      player.trId || "", // TR_ID
      player.wins, // WINS
      player.draws, // DRAWS
      player.losses, // LOSSES
      player.points, // POINTS
      winRate, // WIN RATE
      player.owRate + "%", // OW%
      h2hInfo // H2H
    ];
    
    const rowIndex = index + 2;
    standingSheet.getRange(rowIndex, 1, 1, rowData.length).setValues([rowData]);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó
    const rowRange = standingSheet.getRange(rowIndex, 1, 1, rowData.length);
    rowRange.setBorder(true, true, true, true, true, true);
    
    // ‡∏™‡∏µ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß
    if (index % 2 === 0) {
      rowRange.setBackground("#f8f9fa");
    }
    
    // ‡∏™‡∏µ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1-3
    if (index === 0) {
      rowRange.setBackground("#ffd700"); // ‡∏ó‡∏≠‡∏á
    } else if (index === 1) {
      rowRange.setBackground("#c0c0c0"); // ‡πÄ‡∏á‡∏¥‡∏ô
    } else if (index === 2) {
      rowRange.setBackground("#cd7f32"); // ‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á
    }
  });
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
  standingSheet.setColumnWidth(1, 60); // RANK
  standingSheet.setColumnWidth(2, 100); // PLAYER ID
  standingSheet.setColumnWidth(3, 150); // PLAYER NAME
  standingSheet.setColumnWidth(4, 100); // TR_ID
  standingSheet.setColumnWidth(5, 80); // WINS
  standingSheet.setColumnWidth(6, 80); // DRAWS
  standingSheet.setColumnWidth(7, 80); // LOSSES
  standingSheet.setColumnWidth(8, 80); // POINTS
  standingSheet.setColumnWidth(9, 100); // WIN RATE
  standingSheet.setColumnWidth(10, 100); // OW%
  standingSheet.setColumnWidth(11, 120); // H2H
  
  SpreadsheetApp.getUi().alert(`üèÜ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• Round Robin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:\n‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ${standings.length} ‡∏Ñ‡∏ô\n‚Ä¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: ${standings.filter(p => p.wins + p.draws + p.losses > 0).length} ‡∏Ñ‡∏ô`);
}

// üëÅÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Hide Standing
function checkHideStandingStatus() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö checkbox ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á N1 (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå N, ‡πÅ‡∏ñ‡∏ß 1) ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing
  const hideStandingCell = pairingSheet.getRange(1, 14); // N1
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á N1 ‡∏°‡∏µ checkbox ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  try {
    const checkboxValue = hideStandingCell.getValue();
    const isChecked = checkboxValue === true;
    
    console.log(`Hide Standing Status (N1): ${isChecked ? '‡∏ã‡πà‡∏≠‡∏ô Standings' : '‡πÅ‡∏™‡∏î‡∏á Standings'}`);
    
    return {
      hideStanding: isChecked
    };
  } catch (error) {
    console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö checkbox ‡∏ó‡∏µ‡πà N1, ‡πÅ‡∏™‡∏î‡∏á Standings ‡∏õ‡∏Å‡∏ï‡∏¥');
    return {
      hideStanding: false
    };
  }
}

// üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Hide Standing checkbox ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á L1 ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà M1
function setupHideStandingCheckbox() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const standingSheet = ss.getSheetByName('Standing');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á L1 ‡∏°‡∏µ checkbox ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const hideStandingCell = standingSheet.getRange(1, 12); // L1
  
  try {
    // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ checkbox ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const currentValue = hideStandingCell.getValue();
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ checkbox ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    if (currentValue === '') {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° checkbox ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á L1
      hideStandingCell.insertCheckboxes();
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å (‡∏ã‡πà‡∏≠‡∏ô Standings)
      hideStandingCell.check();
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó
      hideStandingCell.setBackground('#fef3c7'); // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô
      hideStandingCell.setFontWeight('bold');
      hideStandingCell.setHorizontalAlignment('center');
      hideStandingCell.setBorder(true, true, true, true, true, true, '#fcd34d', SpreadsheetApp.BorderStyle.SOLID);
      
      console.log('‡∏™‡∏£‡πâ‡∏≤‡∏á Hide Standing checkbox ‡∏ó‡∏µ‡πà L1 ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (default: ‡∏ã‡πà‡∏≠‡∏ô Standings)');
    }
  } catch (error) {
    console.log('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á checkbox ‡∏ó‡∏µ‡πà L1 ‡πÑ‡∏î‡πâ:', error);
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "Hide Standing" ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á M1
  const hideStandingText = standingSheet.getRange(1, 13); // M1
  hideStandingText.setValue('Hide Standing');
  hideStandingText.setBackground('#e3f2fd'); // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
  hideStandingText.setFontWeight('bold');
  hideStandingText.setHorizontalAlignment('center');
  hideStandingText.setBorder(true, true, true, true, true, true, '#2196f3', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  standingSheet.setColumnWidth(1, 60);   // Rank
  standingSheet.setColumnWidth(2, 100);  // Player ID
  standingSheet.setColumnWidth(3, 150);  // Player Name
  standingSheet.setColumnWidth(4, 100);  // TR_ID
  standingSheet.setColumnWidth(5, 80);   // Played
  standingSheet.setColumnWidth(6, 60);   // Win
  standingSheet.setColumnWidth(7, 60);   // Draw
  standingSheet.setColumnWidth(8, 60);   // Loss
  standingSheet.setColumnWidth(9, 80);   // Points
  standingSheet.setColumnWidth(10, 80);  // Win Rate
  standingSheet.setColumnWidth(11, 80);  // OW%
  standingSheet.setColumnWidth(12, 120); // H2H - ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  standingSheet.setColumnWidth(13, 120); // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L (checkbox)
  standingSheet.setColumnWidth(14, 150); // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå M (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå H2H ‡πÉ‡∏´‡πâ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  const h2hRange = standingSheet.getRange(2, 12, standingSheet.getLastRow() - 1, 1);
  const h2hValues = h2hRange.getValues();
  let maxLength = 0;
  
  h2hValues.forEach(row => {
    const text = row[0] ? row[0].toString() : '';
    if (text.length > maxLength) {
      maxLength = text.length;
    }
  });
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 8px ‡∏ï‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ + padding)
  const optimalWidth = Math.max(120, Math.min(300, maxLength * 8 + 20));
  standingSheet.setColumnWidth(12, optimalWidth);
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1 ‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
  standingSheet.setRowHeight(1, 40);
}

// üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Hide Standing controls ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing
function setupPairingHideStandingControls() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "Hide Standing" ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á N2
  const controlText = pairingSheet.getRange(2, 14); // N2
  controlText.setValue('Hide Standing');
  controlText.setBackground('#e3f2fd'); // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
  controlText.setFontWeight('bold');
  controlText.setHorizontalAlignment('center');
  controlText.setBorder(true, true, true, true, true, true, '#2196f3', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° checkbox ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á O2
  const hideCheckbox = pairingSheet.getRange(2, 15); // O2
  hideCheckbox.insertCheckboxes();
  hideCheckbox.check(); // ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡πá‡∏ô default
  hideCheckbox.setBackground('#fef3c7'); // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô
  hideCheckbox.setFontWeight('bold');
  hideCheckbox.setHorizontalAlignment('center');
  hideCheckbox.setBorder(true, true, true, true, true, true, '#fcd34d', SpreadsheetApp.BorderStyle.SOLID);
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  pairingSheet.setColumnWidth(14, 120); // N - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  pairingSheet.setColumnWidth(15, 80);  // O - checkbox
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
  pairingSheet.setRowHeight(2, 40);
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå D (PLAYER 1) ‡πÅ‡∏•‡∏∞ J (PLAYER 2) ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠
  adjustPlayerNameColumns(pairingSheet);
  
  console.log('‡∏™‡∏£‡πâ‡∏≤‡∏á Hide Standing checkbox ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö onEdit (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
  setupOnEditTrigger();
}

// üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö onEdit
function setupOnEditTrigger() {
  // ‡∏•‡∏ö trigger ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  const triggers = ScriptApp.getProjectTriggers();
  triggers.forEach(trigger => {
    if (trigger.getHandlerFunction() === 'onEdit') {
      ScriptApp.deleteTrigger(trigger);
    }
  });
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á trigger ‡πÉ‡∏´‡∏°‡πà
  ScriptApp.newTrigger('onEdit')
    .onEdit()
    .create();
  
  console.log('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ onEdit trigger ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
}

// üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Hide Standing controls ‡πÄ‡∏õ‡πá‡∏ô default
function resetHideStandingControls() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï checkbox ‡∏ó‡∏µ‡πà O2 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å
  const hideCheckbox = pairingSheet.getRange(2, 15); // O2
  hideCheckbox.check();
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  adjustPlayerNameColumns(pairingSheet);
  
  SpreadsheetApp.getUi().alert(
    'üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
    'Hide Standing checkbox ‡∏ñ‡∏π‡∏Å‡∏ï‡∏¥‡πä‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô default ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

// üìè ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Pairing
function adjustPairingColumns() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  adjustPlayerNameColumns(pairingSheet);
  
  SpreadsheetApp.getUi().alert(
    'üìè ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
    '‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå D (PLAYER 1) ‡πÅ‡∏•‡∏∞ J (PLAYER 2) ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß',
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

// ‚ö° ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Controls ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
function forceResetControls() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï checkbox ‡∏ó‡∏µ‡πà O2 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å
  const hideCheckbox = pairingSheet.getRange(2, 15); // O2
  hideCheckbox.check();
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  adjustPlayerNameColumns(pairingSheet);
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings
  updateStandings();
  
  SpreadsheetApp.getUi().alert(
    '‚ö° ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
    'Hide Standing checkbox ‡∏ñ‡∏π‡∏Å‡∏ï‡∏¥‡πä‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô default\n‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô\n‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡πÅ‡∏•‡πâ‡∏ß',
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

// === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà (Swiss, ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Ñ‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏°) ===
function rePairLastRound() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  const standingSheet = ss.getSheetByName('Standing');
  const playersSheet = ss.getSheetByName('Players');

  // ‡∏î‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const roundData = pairingSheet.getRange('A2:A').getValues().flat().filter(r => r);
  const lastRound = roundData.length ? Math.max(...roundData) : 1;
  const nextRound = lastRound + 1;

  // ‡∏î‡∏∂‡∏á standings ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  let standings = [];
  if (standingSheet.getLastRow() > 1) {
    standings = standingSheet.getRange(2, 1, standingSheet.getLastRow() - 1, 11).getValues();
  }
  if (standings.length === 0) {
    SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• standings ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Standings ‡∏Å‡πà‡∏≠‡∏ô');
    return;
  }

  // ‡∏Å‡∏£‡∏≠‡∏á activePlayers ‡∏à‡∏≤‡∏Å standings (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà drop)
  let activePlayers = standings
    .filter(row => row[0] !== 'DROP' && row[1] && row[1] !== '')
    .map(row => ({
      id: row[1],
      name: row[2],
      points: row[7],
      rank: row[0]
    }))
    .sort((a, b) => b.points - a.points || a.id.localeCompare(b.id));

  if (activePlayers.length < 2) {
    SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ ‚Äì ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏Ñ‡∏ô)');
    return;
  }

  // ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏î‡πâ‡∏ö‡∏≤‡∏¢
  const allPairingData = pairingSheet.getDataRange().getValues();
  const byeList = allPairingData.filter(r => r[8] === 'BYE').map(r => r[2]);

  // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
  const matchHistory = {};
  allPairingData.slice(1).forEach(row => {
    const p1 = row[2], p2 = row[8];
    if (!p1 || !p2 || p1 === '' || p2 === '' || p2 === 'BYE' || p1 === 'BYE') return;
    if (!matchHistory[p1]) matchHistory[p1] = [];
    if (!matchHistory[p2]) matchHistory[p2] = [];
    matchHistory[p1].push(p2);
    matchHistory[p2].push(p1);
  });

  // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥)
  const lastRoundPairs = allPairingData.filter(r => r[0] === lastRound && r[8] !== 'BYE')
    .map(r => [r[2], r[8]]);

  // ‡πÅ‡∏à‡∏Å‡∏ö‡∏≤‡∏¢‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏Ñ‡∏µ‡πà
  let byePlayer = null;
  if (activePlayers.length % 2 === 1) {
    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô pairNextRound)
    const playerBrackets = {};
    activePlayers.forEach(player => {
      const points = player.points;
      if (!playerBrackets[points]) playerBrackets[points] = [];
      playerBrackets[points].push(player);
    });
    
    const sortedPoints = Object.keys(playerBrackets).map(Number).sort((a, b) => a - b);
    for (let points of sortedPoints) {
      const playersInBracket = playerBrackets[points];
      for (let player of playersInBracket) {
        if (!byeList.includes(player.id)) {
          byePlayer = player;
          activePlayers = activePlayers.filter(p => p.id !== player.id);
          break;
        }
      }
      if (byePlayer) break;
    }
    if (!byePlayer) {
      byePlayer = activePlayers[activePlayers.length - 1];
      activePlayers = activePlayers.slice(0, -1);
    }
  }

  // ‡∏™‡∏∏‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
  shuffle(activePlayers);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö backtracking (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
  const paired = [];
  function getEligibleOpponents(p1, availablePlayers, matchHistory) {
    const eligible = [];
    availablePlayers.forEach(p2 => {
      if (p1.id !== p2.id) {
        const hasPlayed = matchHistory[p1.id] && matchHistory[p1.id].includes(p2.id);
        const isLastRoundPair = lastRoundPairs.some(pair =>
          (pair[0] === p1.id && pair[1] === p2.id) || (pair[0] === p2.id && pair[1] === p1.id)
        );
        if (!hasPlayed && !isLastRoundPair) {
          eligible.push(p2);
        }
      }
    });
    return eligible;
  }
  function calculatePairingScore(p1, p2) {
    const pointDiff = Math.abs(p1.points - p2.points);
    const avgPoints = (p1.points + p2.points) / 2;
    const pointScore = Math.max(0, 10 - pointDiff);
    const avgScore = avgPoints / 10;
    const balanceScore = Math.min(p1.points, p2.points) / 10;
    return (pointScore * 0.3) + (avgScore * 0.5) + (balanceScore * 0.2);
  }
  function pairPlayers(players, matchHistory) {
    if (players.length === 0) return true;
    if (players.length === 1) return false;
    // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏™‡∏≠‡∏á‡∏Ñ‡∏ô‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    if (players.length >= 2) {
      const sorted = [...players].sort((a, b) => b.points - a.points || a.id.localeCompare(b.id));
      const top1 = sorted[0];
      const top2 = sorted[1];
      const isLastRoundPair = lastRoundPairs.some(pair =>
        (pair[0] === top1.id && pair[1] === top2.id) || (pair[0] === top2.id && pair[1] === top1.id)
      );
      if (!matchHistory[top1.id] || !matchHistory[top1.id].includes(top2.id)) {
        if (!isLastRoundPair) {
          const remainingPlayers = players.filter(p => p.id !== top1.id && p.id !== top2.id);
          paired.push([top1, top2]);
          if (pairPlayers(remainingPlayers, matchHistory)) {
            return true;
          }
          paired.pop();
          return false;
        }
      }
    }
    const p1 = players[0];
    const eligibleOpponents = getEligibleOpponents(p1, players.slice(1), matchHistory);
    eligibleOpponents.sort((a, b) => {
      const scoreA = calculatePairingScore(p1, a);
      const scoreB = calculatePairingScore(p1, b);
      return scoreB - scoreA;
    });
    for (let p2 of eligibleOpponents) {
      const remainingPlayers = players.filter(p => p.id !== p1.id && p.id !== p2.id);
      paired.push([p1, p2]);
      if (pairPlayers(remainingPlayers, matchHistory)) {
        return true;
      }
      paired.pop();
    }
    return false;
  }

  // ‡∏•‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
  const success = pairPlayers(activePlayers, matchHistory);
  if (!success) {
    SpreadsheetApp.getUi().alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Ñ‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏°‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î');
    return;
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  const output = [];
  let tableNumber = 1;
  paired.forEach(([p1, p2]) => {
    output.push([
      nextRound,
      tableNumber++,
      p1.id, p1.name, false, false, false, false,
      p2.id, p2.name, '', 'OK', ''
    ]);
  });
  if (byePlayer) {
    output.push([
      nextRound,
      tableNumber,
      byePlayer.id, byePlayer.name, true, false, false, false,
      'BYE', 'BYE', '1:0', 'BYE WIN', ''
    ]);
  }
  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á Pairing
  const startRow = pairingSheet.getLastRow() + 1;
  pairingSheet.getRange(startRow, 1, output.length, output[0].length).setValues(output);
  addCheckboxes(pairingSheet, output.length);
  formatPairingData(pairingSheet, startRow, output.length);
  separateRoundsVisually();
  SpreadsheetApp.getUi().alert('‚úÖ ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö ' + nextRound + ' (‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (' + paired.length + ' ‡∏Ñ‡∏π‡πà)');
}

// üìä ‡πÅ‡∏¢‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ - ‡πÅ‡∏Ñ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ highlight)
function separateRoundsVisually() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const pairingSheet = ss.getSheetByName('Pairing');
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const pairingData = pairingSheet.getRange(2, 1, pairingSheet.getLastRow() - 1, 13).getValues();
  
  if (pairingData.length === 0) {
    SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô');
    return;
  }
  
  // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö
  const rounds = {};
  pairingData.forEach((row, index) => {
    const round = row[0];
    if (round && round !== '' && !isNaN(round)) {
      if (!rounds[round]) {
        rounds[round] = [];
      }
      rounds[round].push(index + 2); // +2 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡πÅ‡∏•‡∏∞ index ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0
    }
  });
  
  // ‡πÅ‡∏¢‡∏Å‡∏£‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á)
  Object.keys(rounds).forEach(roundNum => {
    const rowNumbers = rounds[roundNum];
    if (rowNumbers.length > 0) {
      const startRow = Math.min(...rowNumbers);
      const endRow = Math.max(...rowNumbers);
      
      // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
      const roundRange = pairingSheet.getRange(startRow, 1, endRow - startRow + 1, 13);
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö
      let backgroundColor;
      switch (parseInt(roundNum)) {
        case 1:
          backgroundColor = '#f0f9ff'; // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
          break;
        case 2:
          backgroundColor = '#fef3c7'; // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô
          break;
        case 3:
          backgroundColor = '#f3e8ff'; // ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡∏≠‡πà‡∏≠‡∏ô
          break;
        case 4:
          backgroundColor = '#ecfdf5'; // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô
          break;
        case 5:
          backgroundColor = '#fef2f2'; // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏≠‡πà‡∏≠‡∏ô
          break;
        default:
          backgroundColor = '#f9fafb'; // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô
      }
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
      roundRange.setBackground(backgroundColor);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏ö‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏£‡∏≠‡∏ö
      roundRange.setBorder(true, true, true, true, true, true, '#d1d5db', SpreadsheetApp.BorderStyle.SOLID);
    }
  });
  
  SpreadsheetApp.getUi().alert('‡πÅ‡∏¢‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n- ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö‡∏°‡∏µ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô\n- ‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏ö‡∏≤‡∏á‡πÅ‡∏¢‡∏Å‡∏£‡∏≠‡∏ö\n- ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡∏±‡∏ö‡∏™‡∏ô');
}
